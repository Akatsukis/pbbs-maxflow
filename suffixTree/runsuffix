#!/usr/bin/python
#
# run all tests
#

import os
import sys
import signal
import time
import subprocess

os.system("echo HOSTNAME: `hostname`")
os.system("make suffixTree")

def signal_handler(signal,frame):
  print "bye\n"
  sys.exit(0)
signal.signal(signal.SIGINT,signal_handler)

def shellGetOutput(str) :
  process = subprocess.Popen(str,shell=True,stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
  output, err = process.communicate()
  
  if (len(err) > 0):
      raise NameError(str+"\n"+output+err)
  return output

#testfiles = []
testfiles = ["10Midentical","10Mrandom","10Msqrtn","chr22.dna","etext99","howto","jdk13c","kingjamesbible","rctail96","rfc","sprot34.dat","thesaurus.doc","w3c2","wikisamp8.xml","wikisamp9.xml"]
testfiles = ["100Midentical","100Mrandom","etext99","rctail96","rfc","w3c2","wikisamp8.xml"]
integertestfiles = ["10Mrandom_ints_range_10K","10Mrandom_ints_range_INTMAX"]
integertestfiles = ["100Mrandom_ints_range_10K","100Mrandom_ints_range_INTMAX"]
integertestfiles = []
processors = [1,2,4]+range(8,80+1,8)

print "-------MERGE SUFFIX TREE TIMINGS------\n"
if (len(sys.argv) > 1) :
  tests = [test for test in tests if test[0] in sys.argv]

for testfile in testfiles :
  for p in processors :    
    ss = "export CILK_NWORKERS="+`p`+"; ./suffixTree testfiles/"+testfile#+ " -c"
    print `p` + " " + testfile 
    print shellGetOutput(ss)
    sys.stdout.flush()

    #os.system(ss)


for testfile in integertestfiles :
  for p in processors :
    ss = "export CILK_NWORKERS="+`p`+"; ./suffixTree testfiles/"+testfile+" -i -c"
    print `p` + " " + testfile + " -i"
    print shellGetOutput(ss)
    sys.stdout.flush()

# print "\n--------ANSV SUFFIX TREE TIMINGS--------\n"

# for testfile in testfiles :
#   for p in processors :
    
#     ss = "export CILK_NWORKERS="+`p`+"; ./ansvSuffixTree testfiles/"+testfile
#     print `p` + " " + testfile 
#     print shellGetOutput(ss)
#     sys.stdout.flush()

#     #os.system(ss)


# for testfile in integertestfiles :
#   for p in processors :
#     ss = "export CILK_NWORKERS="+`p`+"; ./ansvSuffixTree testfiles/"+testfile+" -i"
#     print `p` + " " + testfile + " -i"
#     print shellGetOutput(ss)
#     sys.stdout.flush()
