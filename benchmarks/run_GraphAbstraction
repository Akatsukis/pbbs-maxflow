#!/usr/bin/python
#
# run all tests
#

import os
import sys

os.system("echo HOSTNAME: `hostname`")
os.system("svn info")

tests = [
["breadthFirstSearch/serialBFS",False],
["breadthFirstSearch/ndBFS",True],
["GraphAbstraction/hybridBFS",True],


["GraphAbstraction/betweennessCentrality",True],
["GraphAbstraction/radii",True],
["GraphAbstraction/connectedComponents",True],
["spanningTree/serialST",False],
["spanningTree/incrementalST",True],

["GraphAbstraction/pagerank",True],
["GraphAbstraction/pagerank_delta",True],

["bellmanFord/serialBellmanFord",False],
["bellmanFord/hybridBellmanFord",True],

]

if (sys.argv.count("-only") > 0):
    filteredTests = [l for l in tests if sys.argv.count(l[0]) == 1]
    tests = filteredTests
    print("Running only: ", tests)

def detectCPUs():
    """                                                                                                                                                  
     Detects the number of CPUs on a system. Cribbed from pp.                                                                                            
     """
    # Linux, Unix and MacOS:                                                                                                                             
    if hasattr(os, "sysconf"):
       if os.sysconf_names.has_key("SC_NPROCESSORS_ONLN"):
           # Linux & Unix:                                                                                                                               
           ncpus = os.sysconf("SC_NPROCESSORS_ONLN")
           if isinstance(ncpus, int) and ncpus > 0:
               return ncpus
       else: # OSX:                                                                                                                                      
           return int(os.popen2("sysctl -n hw.ncpu")[1].read())
    # Windows:                                                                                                                                           
    if os.environ.has_key("NUMBER_OF_PROCESSORS"):
           ncpus = int(os.environ["NUMBER_OF_PROCESSORS"]);
           if ncpus > 0:
               return ncpus
    return 1 # Default   



maxcpus = detectCPUs()
if maxcpus <= 16:
    processors = [1]+range(2,maxcpus+1,2)
elif maxcpus <= 32:
    processors = [1,2]+range(4,maxcpus+1,4)
else:
    processors = [1,2,4]+range(8,maxcpus+1,8)
print(processors)
processors=[1,2,4,8,16,32,40,60,80]

def runtest(dir,options) :
  ss = "make -s -C " + dir
  sc = "cd "+dir+" ; ./testInputs " + options
  os.system("echo")
  os.system(ss)
  x = os.system(sc)
  if (x) :
    raise NameError("  " + sc)

try :
  for test in tests :
    if (test[1]) :
      for p in processors :
        #if (p == 1) :
        #  runtest(test[0], "-x -r 1 -p " + `p`)
        #if (p < 16) :
          runtest(test[0], "-x -r 3 -p " + `p`)
        #else :
          #runtest(test[0], "-x -r 5 -p " + `p`)
      #  runtest(test[0],"-r 1 -p " + `processors[-1]`)
    else :
      #runtest(test[0], "-r 3 -p 0")
        runtest(test[0], "-x -r 3 -p 0")
        
except NameError,v :
  x, = v
  print "TEST TERMINATED ABNORMALLY:\n"+x



