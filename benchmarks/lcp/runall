#!/usr/bin/python
#
# run all tests
#

import os
import sys
import signal
import time
import subprocess


def signal_handler(signal,frame):
  print "bye\n"
  sys.exit(0)
signal.signal(signal.SIGINT,signal_handler)

def shellGetOutput(str) :
  process = subprocess.Popen(str,shell=True,stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
  output, err = process.communicate()
  
  if (len(err) > 0):
      raise NameError(str+"\n"+output+err)
  return output

applications = ["parallelLCP","parallelPLCP","parallelLCP_DK_split","parallelPLCP_DK_split"]#,"parallelKSLCP"]
#applications = ["naiveParallel"]
#applications = ["parallelKS"]
serial_applications=["serialLCP","serialPLCP"]
serial_applications = []

testfiles = [("chr22.dna","chr22.dna_SA"),("etext99","etext99_SA"),("wikisamp.xml","wikisamp.xml_SA"),("howto","howto_SA"),("jdk13c","jdk13c_SA"),("rctail96","rctail96_SA"),("rfc","rfc_SA"),("sprot34.dat","sprot34.dat_SA"),("w3c2","w3c2_SA"),("100Mrandom","100Mrandom_SA"),("100Msqrtn","100Msqrtn_SA"),("100Midentical","100Midentical_SA"),("wikisamp9.xml","wikisamp9.xml_SA")]
testfiles = [("etext99","etext99_SA"),("rctail96","rctail96_SA"),("rfc","rfc_SA"),("wikisamp.xml","wikisamp.xml_SA"),("100Mrandom","100Mrandom_SA"),("100Midentical","100Midentical_SA")]

largetestfiles = [("HG18.fasta","HG18.fasta_SA")]
largetestfiles = []

#testfiles = [("10Mrandom","10Mrandom_SA"),("10Msqrtn","10Msqrtn_SA"),("10Midentical","10Midentical_SA")]

processors = [1,2,4]+range(8,80+1,8)
processors = range(40,81,8)

for testfile in testfiles :
  for app in applications:
    for p in processors : #parallel
      if p == 1:
        os.system("unset GCILK; cd "+app+"; make clean -s; make -s; cd ..");
        ss = "./" + app + "/LCP sequenceData/data/"+testfile[0] + " sequenceData/data/"+testfile[1]
        print app+" 1 " + testfile[0]
        print shellGetOutput(ss)
        sys.stdout.flush()
        os.system("export GCILK=1; cd "+app+"; make clean -s; make -s; cd ..");
      else:
        ss = "export CILK_NWORKERS="+`p`+"; numactl -i all ./" + app + "/LCP -r 3 sequenceData/data/"+testfile[0] + " sequenceData/data/"+testfile[1]
        print app+" "+`p` + " " + testfile[0]
        print shellGetOutput(ss)
        sys.stdout.flush()

  for app in serial_applications:
    os.system("cd "+app+"; make -s; cd ..");
    ss = "./" + app + "/LCP sequenceData/data/"+testfile[0] + " sequenceData/data/"+testfile[1]
    print app + " " + testfile[0]
    print shellGetOutput(ss)
    sys.stdout.flush()

  #sais-lite
  # ss = "~/sais-lite-LCP-0.0.1/suftest " + " sequenceData/data/"+testfile[0]
  # print "sais-lite-LCP " + testfile[0]
  # print shellGetOutput(ss)
  # sys.stdout.flush()


for testfile in largetestfiles :
  for app in applications:
    os.system("unset GCILK; cd "+app+"; make clean -s; make -s; cd ..");
    ss = "./" + app + "/LCP sequenceData/data/"+testfile[0] + " sequenceData/data/"+testfile[1]
    print app+" 1 " + testfile[0]
    print shellGetOutput(ss)
    sys.stdout.flush()
    os.system("export GCILK=1; cd "+app+"; make clean -s; make -s; cd ..");
    
    ss = "export CILK_NWORKERS=80; numactl -i all ./" + app + "/LCP -r 3 sequenceData/data/"+testfile[0] + " sequenceData/data/"+testfile[1]
    print app+" 80 " + testfile[0]
    print shellGetOutput(ss)
    sys.stdout.flush()

  for app in serial_applications:
    os.system("cd "+app+"; make -s; cd ..");
    ss = "./" + app + "/LCP sequenceData/data/"+testfile[0] + " sequenceData/data/"+testfile[1]
    print app + " " + testfile[0]
    print shellGetOutput(ss)
    sys.stdout.flush()


os.system("unset CILK_NWORKERS;")
