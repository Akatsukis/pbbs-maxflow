HOSTNAME: oblivious
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 212
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 212
Last Changed Date: 2010-11-10 16:19:41 -0500 (Wed, 10 Nov 2010)

icpc -O3 -DCILKP -c maxIndSetTest.C
icpc -O3 -DCILKP -c maxIndSet.C
icpc  -o maxIndSetTest graphGen.o maxIndSet.o maxIndSetTest.o
icpc -O3 -DCILKP -c colorGraphTest.C
icpc -O3 -DCILKP -c colorGraph.C
icpc  -o colorGraphTest graphGen.o colorGraph.o maxIndSet.o colorGraphTest.o
icpc -O3 -DCILKP -c bfsTest.C
icpc -O3 -DCILKP -c bfs.C
icpc  -o bfsTest graphGen.o bfs.o bfsTest.o
icpc -O3 -DCILKP -c spmvTest.C
icpc  -o spmvTest spmvTest.o graphGen.o 
icpc -O3 -DCILKP -c mst.C
icpc -O3 -DCILKP -c mstTest.C
icpc  -o mstTest graphGen.o mst.o mstTest.o
icpc -O3 -DCILKP -c serialMst.C
icpc  -o serialMstTest graphGen.o serialMst.o mstTest.o
icpc -O3 -DCILKP  -o randPermTest randPermTest.C 

./runtest sequenceTest 100000000 1
tabulate (double) : 0.106 seconds
map (double, +1) : 0.183 seconds
map (char, +1)  : 0.179 seconds
map (char, isalpha) : 0.35 seconds
reduce (double, add) : 0.0808 seconds
max Index (double) : 0.115 seconds
scan (double, add, inplace) : 0.272 seconds
scan (double, add) : 0.307 seconds
scanI (double, add) : 0.293 seconds
scan (int, max) : 0.213 seconds
sequential scan (double, add) : 0.367 seconds
sequential scan (int, max) : 0.115 seconds
filter (double, odd) : 0.348 seconds
pack (double, odd) : 0.288 seconds
gather (int) : 2.46 seconds
gather (double) : 2.82 seconds
scatter (int) : 2.03 seconds
scatter (double) : 2.46 seconds
scatter contended (10^6) : 1.15 seconds
scatter contended (10^5) : 0.578 seconds
scatter CAS (int) : 9.86 seconds
scatter CAS contended (10^6) : 1.9 seconds
scatter CAS contended conditional (10^6) : 0.84 seconds
scatter CAS contended (10^5) : 1.33 seconds
scatter CAS contended conditional (10^5) : 0.698 seconds
partition : 0.114 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.0819 seconds
map (double, +1) : 0.147 seconds
map (char, +1)  : 0.0897 seconds
map (char, isalpha) : 0.173 seconds
reduce (double, add) : 0.0661 seconds
max Index (double) : 0.0765 seconds
scan (double, add, inplace) : 0.181 seconds
scan (double, add) : 0.229 seconds
scanI (double, add) : 0.235 seconds
scan (int, max) : 0.136 seconds
sequential scan (double, add) : 0.362 seconds
sequential scan (int, max) : 0.116 seconds
filter (double, odd) : 0.234 seconds
pack (double, odd) : 0.198 seconds
gather (int) : 1.23 seconds
gather (double) : 1.42 seconds
scatter (int) : 1.04 seconds
scatter (double) : 1.25 seconds
scatter contended (10^6) : 0.576 seconds
scatter contended (10^5) : 0.323 seconds
scatter CAS (int) : 4.91 seconds
scatter CAS contended (10^6) : 1.03 seconds
scatter CAS contended conditional (10^6) : 0.482 seconds
scatter CAS contended (10^5) : 0.997 seconds
scatter CAS contended conditional (10^5) : 0.412 seconds
partition : 0.114 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.0654 seconds
map (double, +1) : 0.118 seconds
map (char, +1)  : 0.0464 seconds
map (char, isalpha) : 0.0944 seconds
reduce (double, add) : 0.0473 seconds
max Index (double) : 0.0403 seconds
scan (double, add, inplace) : 0.107 seconds
scan (double, add) : 0.141 seconds
scanI (double, add) : 0.158 seconds
scan (int, max) : 0.0816 seconds
sequential scan (double, add) : 0.364 seconds
sequential scan (int, max) : 0.114 seconds
filter (double, odd) : 0.155 seconds
pack (double, odd) : 0.115 seconds
gather (int) : 0.641 seconds
gather (double) : 0.734 seconds
scatter (int) : 0.658 seconds
scatter (double) : 0.734 seconds
scatter contended (10^6) : 0.322 seconds
scatter contended (10^5) : 0.234 seconds
scatter CAS (int) : 2.47 seconds
scatter CAS contended (10^6) : 0.579 seconds
scatter CAS contended conditional (10^6) : 0.292 seconds
scatter CAS contended (10^5) : 0.678 seconds
scatter CAS contended conditional (10^5) : 0.265 seconds
partition : 0.113 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0502 seconds
map (double, +1) : 0.0775 seconds
map (char, +1)  : 0.0267 seconds
map (char, isalpha) : 0.0468 seconds
reduce (double, add) : 0.0273 seconds
max Index (double) : 0.029 seconds
scan (double, add, inplace) : 0.0786 seconds
scan (double, add) : 0.106 seconds
scanI (double, add) : 0.106 seconds
scan (int, max) : 0.0561 seconds
sequential scan (double, add) : 0.352 seconds
sequential scan (int, max) : 0.115 seconds
filter (double, odd) : 0.094 seconds
pack (double, odd) : 0.0751 seconds
gather (int) : 0.358 seconds
gather (double) : 0.416 seconds
scatter (int) : 0.418 seconds
scatter (double) : 0.46 seconds
scatter contended (10^6) : 0.226 seconds
scatter contended (10^5) : 0.213 seconds
scatter CAS (int) : 1.33 seconds
scatter CAS contended (10^6) : 0.59 seconds
scatter CAS contended conditional (10^6) : 0.339 seconds
scatter CAS contended (10^5) : 0.645 seconds
scatter CAS contended conditional (10^5) : 0.332 seconds
partition : 0.113 seconds

./runtest mergeTest 100000000 1
Merging (interleaved) :0.1: 0.503 seconds
Merging (weighted average) : 0.503 seconds

./runtest mergeTest 100000000 2
Merging (interleaved) :0.1: 0.252 seconds
Merging (weighted average) : 0.252 seconds

./runtest mergeTest 100000000 4
Merging (interleaved) :0.1: 0.135 seconds
Merging (weighted average) : 0.135 seconds

./runtest mergeTest 100000000 8
Merging (interleaved) :0.1: 0.084 seconds
Merging (weighted average) : 0.084 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 9.27 seconds
Random Permutation (4 x double) :0.1: 14.6 seconds
Random Permutation (weighted average) : 11.9 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 4.84 seconds
Random Permutation (4 x double) :0.1: 7.57 seconds
Random Permutation (weighted average) : 6.21 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 2.69 seconds
Random Permutation (4 x double) :0.1: 4.05 seconds
Random Permutation (weighted average) : 3.37 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 1.9 seconds
Random Permutation (4 x double) :0.1: 2.67 seconds
Random Permutation (weighted average) : 2.28 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 2.23 seconds
Integer Sort (32 bit, exponential) :0.1: 2.27 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.719 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 3.47 seconds
Integer Sort (weighted average) : 2.43 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 1.11 seconds
Integer Sort (32 bit, exponential) :0.1: 1.22 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.376 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.02 seconds
Integer Sort (weighted average) : 1.35 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 0.636 seconds
Integer Sort (32 bit, exponential) :0.1: 0.695 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.243 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.2 seconds
Integer Sort (weighted average) : 0.797 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.391 seconds
Integer Sort (32 bit, exponential) :0.1: 0.424 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.123 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.664 seconds
Integer Sort (weighted average) : 0.453 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 14.3 seconds
Comparison Sort (double, exponential) :0.1: 9.29 seconds
Comparison Sort (double, almost sorted) :0.1: 3.37 seconds
Comparison Sort (trigram strings adjacent) :0.2: 43.1 seconds
Comparison Sort (trigram strings, random layout) :0.2: 61.2 seconds
Comparison Sort (double with 3 x double payload) :0.3: 17.1 seconds
Comparison Sort (weighted average) : 28.7 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 7.44 seconds
Comparison Sort (double, exponential) :0.1: 4.91 seconds
Comparison Sort (double, almost sorted) :0.1: 1.85 seconds
Comparison Sort (trigram strings adjacent) :0.2: 23.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 34 seconds
Comparison Sort (double with 3 x double payload) :0.3: 9.01 seconds
Comparison Sort (weighted average) : 15.6 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4.29 seconds
Comparison Sort (double, exponential) :0.1: 2.95 seconds
Comparison Sort (double, almost sorted) :0.1: 1.24 seconds
Comparison Sort (trigram strings adjacent) :0.2: 13.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 20.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 5.51 seconds
Comparison Sort (weighted average) : 9.23 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.63 seconds
Comparison Sort (double, exponential) :0.1: 1.89 seconds
Comparison Sort (double, almost sorted) :0.1: 0.796 seconds
Comparison Sort (trigram strings adjacent) :0.2: 7.41 seconds
Comparison Sort (trigram strings, random layout) :0.2: 12.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.43 seconds
Comparison Sort (weighted average) : 5.58 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 17.4 seconds
Comparison Sort (double, exponential) :0.1: 12.1 seconds
Comparison Sort (double, almost sorted) :0.1: 4.95 seconds
Comparison Sort (trigram strings adjacent) :0.2: 27.6 seconds
Comparison Sort (trigram strings, random layout) :0.2: 42 seconds
Comparison Sort (double with 3 x double payload) :0.3: 21.3 seconds
Comparison Sort (weighted average) : 23.8 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 8.9 seconds
Comparison Sort (double, exponential) :0.1: 6.14 seconds
Comparison Sort (double, almost sorted) :0.1: 2.62 seconds
Comparison Sort (trigram strings adjacent) :0.2: 14.2 seconds
Comparison Sort (trigram strings, random layout) :0.2: 21.9 seconds
Comparison Sort (double with 3 x double payload) :0.3: 10.8 seconds
Comparison Sort (weighted average) : 12.2 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4.69 seconds
Comparison Sort (double, exponential) :0.1: 3.24 seconds
Comparison Sort (double, almost sorted) :0.1: 1.38 seconds
Comparison Sort (trigram strings adjacent) :0.2: 7.73 seconds
Comparison Sort (trigram strings, random layout) :0.2: 12.1 seconds
Comparison Sort (double with 3 x double payload) :0.3: 5.9 seconds
Comparison Sort (weighted average) : 6.66 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.43 seconds
Comparison Sort (double, exponential) :0.1: 1.68 seconds
Comparison Sort (double, almost sorted) :0.1: 0.789 seconds
Comparison Sort (trigram strings adjacent) :0.2: 4.02 seconds
Comparison Sort (trigram strings, random layout) :0.2: 6.11 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.11 seconds
Comparison Sort (weighted average) : 3.45 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 12 seconds
Comparison Sort (double, exponential) :0.1: 9.04 seconds
Comparison Sort (double, almost sorted) :0.1: 2.18 seconds
Comparison Sort (trigram strings adjacent) :0.2: 56.6 seconds
Comparison Sort (trigram strings, random layout) :0.2: 75.3 seconds
Comparison Sort (double with 3 x double payload) :0.3: 13.5 seconds
Comparison Sort (weighted average) : 32.8 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.678 seconds
Remove Duplicates (int, exponential) :0.1: 0.47 seconds
Remove Duplicates (trigram strings) :0.2: 0.792 seconds
Remove Duplicates (weighted average) : 0.683 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.34 seconds
Remove Duplicates (int, exponential) :0.1: 0.238 seconds
Remove Duplicates (trigram strings) :0.2: 0.407 seconds
Remove Duplicates (weighted average) : 0.348 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.18 seconds
Remove Duplicates (int, exponential) :0.1: 0.124 seconds
Remove Duplicates (trigram strings) :0.2: 0.227 seconds
Remove Duplicates (weighted average) : 0.19 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.111 seconds
Remove Duplicates (int, exponential) :0.1: 0.074 seconds
Remove Duplicates (trigram strings) :0.2: 0.138 seconds
Remove Duplicates (weighted average) : 0.115 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 0.523 seconds
Table (trigram words, insert and find) :0.2: 0.59 seconds
Table (weighted average) : 0.568 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.266 seconds
Table (trigram words, insert and find) :0.2: 0.3 seconds
Table (weighted average) : 0.289 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.14 seconds
Table (trigram words, insert and find) :0.2: 0.16 seconds
Table (weighted average) : 0.153 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.0808 seconds
Table (trigram words, insert and find) :0.2: 0.0797 seconds
Table (weighted average) : 0.0801 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.22 seconds
Maximal Independent Set (2d grid) :0.2: 0.614 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 2.98 seconds
Maximal Independent Set (weighted average) : 1.36 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.633 seconds
Maximal Independent Set (2d grid) :0.2: 0.322 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 1.59 seconds
Maximal Independent Set (weighted average) : 0.716 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.351 seconds
Maximal Independent Set (2d grid) :0.2: 0.179 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.826 seconds
Maximal Independent Set (weighted average) : 0.384 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.195 seconds
Maximal Independent Set (2d grid) :0.2: 0.112 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.509 seconds
Maximal Independent Set (weighted average) : 0.232 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 4.55 seconds
Color Graph (2d grid) :0.1: 1.34 seconds
Color Graph (weighted average) : 2.94 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 2.42 seconds
Color Graph (2d grid) :0.1: 0.747 seconds
Color Graph (weighted average) : 1.58 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.32 seconds
Color Graph (2d grid) :0.1: 0.44 seconds
Color Graph (weighted average) : 0.879 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 0.727 seconds
Color Graph (2d grid) :0.1: 0.27 seconds
Color Graph (weighted average) : 0.498 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 0.94 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.8 seconds
Maximal Matching (2d mesh) :0.1: 1.44 seconds
Maximal Matching (weighted average) : 1.39 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.504 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.958 seconds
Maximal Matching (2d mesh) :0.1: 0.765 seconds
Maximal Matching (weighted average) : 0.743 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.273 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.534 seconds
Maximal Matching (2d mesh) :0.1: 0.427 seconds
Maximal Matching (weighted average) : 0.411 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.174 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.367 seconds
Maximal Matching (2d mesh) :0.1: 0.306 seconds
Maximal Matching (weighted average) : 0.283 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 16.7 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 51.7 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 34.2 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 8.68 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 26.4 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 17.5 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 4.96 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 14.2 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 9.6 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 2.93 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 7.85 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 5.39 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 2.91 seconds
BFS (return BFS tree) (3d grid) :0.1: 4.24 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 7.13 seconds
BFS (weighted average) : 4.3 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.5 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.28 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 3.69 seconds
BFS (weighted average) : 2.24 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.789 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.2 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.95 seconds
BFS (weighted average) : 1.18 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.473 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.719 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.03 seconds
BFS (weighted average) : 0.674 seconds

./runtest buildTreeTest 10000000 1
build tree (random 2d) :0.1: 1.67 seconds
build tree (kuzmin 2d) :0.1: 3.77 seconds
build tree (random 3d) :0.1: 2.02 seconds
build tree (plummer 3d) :0.1: 4.13 seconds
build tree (weighted average) : 2.9 seconds

./runtest buildTreeTest 10000000 2
build tree (random 2d) :0.1: 0.907 seconds
build tree (kuzmin 2d) :0.1: 2.25 seconds
build tree (random 3d) :0.1: 1.08 seconds
build tree (plummer 3d) :0.1: 2.3 seconds
build tree (weighted average) : 1.63 seconds

./runtest buildTreeTest 10000000 4
build tree (random 2d) :0.1: 0.496 seconds
build tree (kuzmin 2d) :0.1: 1.35 seconds
build tree (random 3d) :0.1: 0.602 seconds
build tree (plummer 3d) :0.1: 1.35 seconds
build tree (weighted average) : 0.951 seconds

./runtest buildTreeTest 10000000 8
build tree (random 2d) :0.1: 0.334 seconds
build tree (kuzmin 2d) :0.1: 0.857 seconds
build tree (random 3d) :0.1: 0.364 seconds
build tree (plummer 3d) :0.1: 0.798 seconds
build tree (weighted average) : 0.588 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 64.4 seconds
Delaunay (random points in kuzmin distribution) :0.1: 67.4 seconds
Delaunay (weighted average) : 65.9 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 33.5 seconds
Delaunay (random points in kuzmin distribution) :0.1: 35 seconds
Delaunay (weighted average) : 34.2 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 17.5 seconds
Delaunay (random points in kuzmin distribution) :0.1: 18.3 seconds
Delaunay (weighted average) : 17.9 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 9.99 seconds
Delaunay (random points in kuzmin distribution) :0.1: 10.5 seconds
Delaunay (weighted average) : 10.3 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 2d, k=1) :0.1: 7.26 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 13 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 23.5 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 19 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 32.5 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 34.5 seconds
k-nearest neighbors (weighted average) : 21.6 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 2d, k=1) :0.1: 3.72 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 6.72 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 12.2 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 9.72 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 16.9 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 17.5 seconds
k-nearest neighbors (weighted average) : 11.1 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 2d, k=1) :0.1: 2 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 3.55 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 6.47 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 5.1 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 8.88 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 9.27 seconds
k-nearest neighbors (weighted average) : 5.88 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 2d, k=1) :0.1: 1.12 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.92 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 3.45 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.66 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 5.12 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 4.72 seconds
k-nearest neighbors (weighted average) : 3.16 seconds

./runtest spmvTest 1000000 1
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0695 seconds
sparse VM (rMat m = n*20)  :0.1: 0.121 seconds
sparse VM (weighted average) : 0.0953 seconds

./runtest spmvTest 1000000 2
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.037 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0619 seconds
sparse VM (weighted average) : 0.0494 seconds

./runtest spmvTest 1000000 4
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0213 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0325 seconds
sparse VM (weighted average) : 0.0269 seconds

./runtest spmvTest 1000000 8
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0127 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0192 seconds
sparse VM (weighted average) : 0.016 seconds

./runtest nbodyTest 1000000 1
Nbody (Random 3d points) :0.1: 229 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 229 seconds

./runtest nbodyTest 1000000 2
Nbody (Random 3d points) :0.1: 115 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 115 seconds

./runtest nbodyTest 1000000 4
Nbody (Random 3d points) :0.1: 62.4 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 62.4 seconds

./runtest nbodyTest 1000000 8
Nbody (Random 3d points) :0.1: 31.2 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 31.2 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 4.29 seconds
Suffix Array (equal string) :0.1: 1.58 seconds
Suffix Array (repeated string) :0.1: 3.23 seconds
Suffix Array (weighted average) : 3.53 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.33 seconds
Suffix Array (equal string) :0.1: 0.982 seconds
Suffix Array (repeated string) :0.1: 1.96 seconds
Suffix Array (weighted average) : 1.99 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.26 seconds
Suffix Array (equal string) :0.1: 0.594 seconds
Suffix Array (repeated string) :0.1: 1.13 seconds
Suffix Array (weighted average) : 1.1 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.839 seconds
Suffix Array (equal string) :0.1: 0.414 seconds
Suffix Array (repeated string) :0.1: 0.799 seconds
Suffix Array (weighted average) : 0.746 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 5.03 seconds
Convex Hull (random in unit circle) :0.3: 0.46 seconds
Convex Hull (random projected Parabola) :0.3: 0.388 seconds
Convex Hull (weighted average) : 1.08 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 2.67 seconds
Convex Hull (random in unit circle) :0.3: 0.263 seconds
Convex Hull (random projected Parabola) :0.3: 0.234 seconds
Convex Hull (weighted average) : 0.594 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 1.46 seconds
Convex Hull (random in unit circle) :0.3: 0.145 seconds
Convex Hull (random projected Parabola) :0.3: 0.133 seconds
Convex Hull (weighted average) : 0.328 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 0.816 seconds
Convex Hull (random in unit circle) :0.3: 0.102 seconds
Convex Hull (random projected Parabola) :0.3: 0.0884 seconds
Convex Hull (weighted average) : 0.198 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 5.9 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 12.3 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 9.84 seconds
Minimum Spanning Tree (weighted average) : 9.35 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 3.08 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 6.34 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 5.1 seconds
Minimum Spanning Tree (weighted average) : 4.84 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.71 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 3.52 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 2.74 seconds
Minimum Spanning Tree (weighted average) : 2.66 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.989 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.97 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.65 seconds
Minimum Spanning Tree (weighted average) : 1.53 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 3.18 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 6.75 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 6.2 seconds
Minimum Spanning Tree (weighted average) : 5.38 seconds
