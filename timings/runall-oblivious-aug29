HOSTNAME: oblivious
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 74
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 73
Last Changed Date: 2010-08-25 17:54:22 -0400 (Wed, 25 Aug 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.13 seconds
map (double, +1) : 0.184 seconds
map (char, +1)  : 0.146 seconds
map (char, isalpha) : 0.342 seconds
reduce (double, add) : 0.162 seconds
map reduce (char, add) : 0.167 seconds
max Index (double) : 0.136 seconds
scan (double, add, inplace) : 0.327 seconds
scan (double, add) : 0.352 seconds
scanI (double, add) : 0.517 seconds
scan (int, max) : 0.298 seconds
sequential scan (double, add) : 0.18 seconds
sequential scan (int, max) : 0.143 seconds
filter (double, odd) : 0.341 seconds
pack (double, odd) : 0.276 seconds
gather (int) : 2.01 seconds
gather (double) : 2.43 seconds
scatter (int) : 2.11 seconds
scatter (double) : 2.54 seconds
scatter contended (10^6) : 1.15 seconds
scatter contended (10^5) : 0.465 seconds
scatter CAS (int) : 9.58 seconds
scatter CAS contended (10^6) : 1.87 seconds
scatter CAS contended conditional (10^6) : 0.821 seconds
scatter CAS contended (10^5) : 1.29 seconds
scatter CAS contended conditional (10^5) : 0.656 seconds
partition : 0.124 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.0906 seconds
map (double, +1) : 0.165 seconds
map (char, +1)  : 0.0746 seconds
map (char, isalpha) : 0.174 seconds
reduce (double, add) : 0.086 seconds
map reduce (char, add) : 0.0835 seconds
max Index (double) : 0.0763 seconds
scan (double, add, inplace) : 0.184 seconds
scan (double, add) : 0.233 seconds
scanI (double, add) : 0.27 seconds
scan (int, max) : 0.159 seconds
sequential scan (double, add) : 0.189 seconds
sequential scan (int, max) : 0.146 seconds
filter (double, odd) : 0.21 seconds
pack (double, odd) : 0.176 seconds
gather (int) : 1.02 seconds
gather (double) : 1.25 seconds
scatter (int) : 1.08 seconds
scatter (double) : 1.31 seconds
scatter contended (10^6) : 0.587 seconds
scatter contended (10^5) : 0.259 seconds
scatter CAS (int) : 4.79 seconds
scatter CAS contended (10^6) : 0.979 seconds
scatter CAS contended conditional (10^6) : 0.43 seconds
scatter CAS contended (10^5) : 0.982 seconds
scatter CAS contended conditional (10^5) : 0.372 seconds
partition : 0.13 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.0701 seconds
map (double, +1) : 0.118 seconds
map (char, +1)  : 0.0387 seconds
map (char, isalpha) : 0.089 seconds
reduce (double, add) : 0.0526 seconds
map reduce (char, add) : 0.0437 seconds
max Index (double) : 0.0503 seconds
scan (double, add, inplace) : 0.124 seconds
scan (double, add) : 0.167 seconds
scanI (double, add) : 0.173 seconds
scan (int, max) : 0.1 seconds
sequential scan (double, add) : 0.243 seconds
sequential scan (int, max) : 0.155 seconds
filter (double, odd) : 0.152 seconds
pack (double, odd) : 0.118 seconds
gather (int) : 0.546 seconds
gather (double) : 0.65 seconds
scatter (int) : 0.657 seconds
scatter (double) : 0.741 seconds
scatter contended (10^6) : 0.35 seconds
scatter contended (10^5) : 0.228 seconds
scatter CAS (int) : 2.43 seconds
scatter CAS contended (10^6) : 0.527 seconds
scatter CAS contended conditional (10^6) : 0.264 seconds
scatter CAS contended (10^5) : 0.66 seconds
scatter CAS contended conditional (10^5) : 0.218 seconds
partition : 0.155 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0499 seconds
map (double, +1) : 0.0778 seconds
map (char, +1)  : 0.02 seconds
map (char, isalpha) : 0.0462 seconds
reduce (double, add) : 0.0295 seconds

./runtest mergeTest 100000000 1
Merge : 0.195 seconds

./runtest mergeTest 100000000 2
Merge : 0.141 seconds

./runtest mergeTest 100000000 4
Merge : 0.117 seconds

./runtest mergeTest 100000000 8
Merge : 0.0774 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 9.14 seconds
Random Permutation (4 x double) :0.1: 14.3 seconds
Random Permutation (weighted average) : 11.7 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 4.7 seconds
Random Permutation (4 x double) :0.1: 7.16 seconds
Random Permutation (weighted average) : 5.93 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 2.61 seconds
Random Permutation (4 x double) :0.1: 3.92 seconds
Random Permutation (weighted average) : 3.26 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 1.75 seconds
Random Permutation (4 x double) :0.1: 2.56 seconds
Random Permutation (weighted average) : 2.16 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 3.42 seconds
Integer Sort (32 bit, exponential) :0.1: 3.24 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.82 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 5.64 seconds
Integer Sort (weighted average) : 3.75 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 1.73 seconds
Integer Sort (32 bit, exponential) :0.1: 1.61 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.399 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.76 seconds
Integer Sort (weighted average) : 1.85 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 0.93 seconds
Integer Sort (32 bit, exponential) :0.1: 0.885 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.217 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.52 seconds
Integer Sort (weighted average) : 1.02 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.513 seconds
Integer Sort (32 bit, exponential) :0.1: 0.492 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.122 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.877 seconds
Integer Sort (weighted average) : 0.576 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 13.4 seconds
Comparison Sort (double, exponential) :0.1: 8.81 seconds
Comparison Sort (double, almost sorted) :0.1: 2.89 seconds
Comparison Sort (trigram strings adjacent) :0.2: 47.8 seconds
randPerm : 9.74 seconds
Comparison Sort (trigram strings, random layout) :0.2: 79.6 seconds
Comparison Sort (double with 4 x double payload) :0.3: 20.4 seconds
Comparison Sort (weighted average) : 43.9 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 6.98 seconds
Comparison Sort (double, exponential) :0.1: 4.67 seconds
Comparison Sort (double, almost sorted) :0.1: 1.63 seconds
Comparison Sort (trigram strings adjacent) :0.2: 26.3 seconds
randPerm : 5.03 seconds
Comparison Sort (trigram strings, random layout) :0.2: 46.4 seconds
Comparison Sort (double with 4 x double payload) :0.3: 10.9 seconds
Comparison Sort (weighted average) : 24.2 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4.05 seconds
Comparison Sort (double, exponential) :0.1: 2.81 seconds
Comparison Sort (double, almost sorted) :0.1: 1.1 seconds
Comparison Sort (trigram strings adjacent) :0.2: 15.3 seconds
randPerm : 2.81 seconds
Comparison Sort (trigram strings, random layout) :0.2: 27 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.8 seconds
Comparison Sort (weighted average) : 14.1 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.44 seconds
Comparison Sort (double, exponential) :0.1: 1.83 seconds
Comparison Sort (double, almost sorted) :0.1: 0.726 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.01 seconds
randPerm : 1.74 seconds
Comparison Sort (trigram strings, random layout) :0.2: 17.7 seconds
Comparison Sort (double with 4 x double payload) :0.3: 4.32 seconds
Comparison Sort (weighted average) : 8.86 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 16.2 seconds
Comparison Sort (double, exponential) :0.1: 11.4 seconds
Comparison Sort (double, almost sorted) :0.1: 4.47 seconds
Comparison Sort (trigram strings adjacent) :0.2: 29.3 seconds
randPerm : 9.46 seconds
Comparison Sort (trigram strings, random layout) :0.2: 45.2 seconds
Comparison Sort (double with 4 x double payload) :0.3: 24.2 seconds
Comparison Sort (weighted average) : 34.8 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 8.13 seconds
Comparison Sort (double, exponential) :0.1: 5.77 seconds
Comparison Sort (double, almost sorted) :0.1: 2.32 seconds
Comparison Sort (trigram strings adjacent) :0.2: 15.2 seconds
randPerm : 4.87 seconds
Comparison Sort (trigram strings, random layout) :0.2: 24.7 seconds
Comparison Sort (double with 4 x double payload) :0.3: 12.5 seconds
Comparison Sort (weighted average) : 18.2 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4.33 seconds
Comparison Sort (double, exponential) :0.1: 3.06 seconds
Comparison Sort (double, almost sorted) :0.1: 1.32 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.36 seconds
randPerm : 2.71 seconds
Comparison Sort (trigram strings, random layout) :0.2: 14.2 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.76 seconds
Comparison Sort (weighted average) : 10.1 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.23 seconds
Comparison Sort (double, exponential) :0.1: 1.58 seconds
Comparison Sort (double, almost sorted) :0.1: 0.716 seconds
Comparison Sort (trigram strings adjacent) :0.2: 4.24 seconds
randPerm : 1.66 seconds
Comparison Sort (trigram strings, random layout) :0.2: 7.04 seconds
Comparison Sort (double with 4 x double payload) :0.3: 3.56 seconds
Comparison Sort (weighted average) : 5.44 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 12.1 seconds
Comparison Sort (double, exponential) :0.1: 9.1 seconds
Comparison Sort (double, almost sorted) :0.1: 2.17 seconds
Comparison Sort (trigram strings adjacent) :0.2: 70.5 seconds
randPerm : 9.53 seconds
Comparison Sort (trigram strings, random layout) :0.2: 113 seconds
Comparison Sort (double with 4 x double payload) :0.3: 14.8 seconds
Comparison Sort (weighted average) : 53 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.688 seconds
Remove Duplicates (int, exponential) :0.1: 0.503 seconds
Remove Duplicates (trigram strings) :0.2: 0.932 seconds
Remove Duplicates (weighted average) : 0.764 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.35 seconds
Remove Duplicates (int, exponential) :0.1: 0.252 seconds
Remove Duplicates (trigram strings) :0.2: 0.478 seconds
Remove Duplicates (weighted average) : 0.39 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.181 seconds
Remove Duplicates (int, exponential) :0.1: 0.131 seconds
Remove Duplicates (trigram strings) :0.2: 0.251 seconds
Remove Duplicates (weighted average) : 0.203 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.1 seconds
Remove Duplicates (int, exponential) :0.1: 0.0702 seconds
Remove Duplicates (trigram strings) :0.2: 0.15 seconds
Remove Duplicates (weighted average) : 0.118 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 0.836 seconds
Table (trigram words, insert and find) :0.2: 1.47 seconds
Table (weighted average) : 1.26 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.419 seconds
Table (trigram words, insert and find) :0.2: 0.742 seconds
Table (weighted average) : 0.635 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.216 seconds
Table (trigram words, insert and find) :0.2: 0.377 seconds
Table (weighted average) : 0.324 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.116 seconds
Table (trigram words, insert and find) :0.2: 0.19 seconds
Table (weighted average) : 0.165 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.24 seconds
Maximal Independent Set (2d grid) :0.2: 0.644 seconds
Maximal Independent Set (weighted average) : 0.844 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.655 seconds
Maximal Independent Set (2d grid) :0.2: 0.357 seconds
Maximal Independent Set (weighted average) : 0.457 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.352 seconds
Maximal Independent Set (2d grid) :0.2: 0.195 seconds
Maximal Independent Set (weighted average) : 0.247 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.188 seconds
Maximal Independent Set (2d grid) :0.2: 0.11 seconds
Maximal Independent Set (weighted average) : 0.136 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 4.69 seconds
Color Graph (2d grid) :0.1: 1.43 seconds
Color Graph (weighted average) : 3.06 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 2.47 seconds
Color Graph (2d grid) :0.1: 0.784 seconds
Color Graph (weighted average) : 1.63 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.33 seconds
Color Graph (2d grid) :0.1: 0.445 seconds
Color Graph (weighted average) : 0.885 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 0.723 seconds
Color Graph (2d grid) :0.1: 0.251 seconds
Color Graph (weighted average) : 0.487 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 0.911 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.81 seconds
Maximal Matching (2d mesh) :0.1: 1.44 seconds
Maximal Matching (weighted average) : 1.39 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.47 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.973 seconds
Maximal Matching (2d mesh) :0.1: 0.806 seconds
Maximal Matching (weighted average) : 0.75 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.255 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.545 seconds
Maximal Matching (2d mesh) :0.1: 0.452 seconds
Maximal Matching (weighted average) : 0.417 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.155 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.338 seconds
Maximal Matching (2d mesh) :0.1: 0.287 seconds
Maximal Matching (weighted average) : 0.26 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 14.9 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 42.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 28.7 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 7.94 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 22.2 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 15.1 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 4.4 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 11.7 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 8.04 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 2.57 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 6.51 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 4.54 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 3.22 seconds
BFS (return BFS tree) (3d grid) :0.1: 4.4 seconds
BFS (weighted average) : 3.62 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.64 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.21 seconds
BFS (weighted average) : 1.83 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.858 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.14 seconds
BFS (weighted average) : 0.953 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.457 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.623 seconds
BFS (weighted average) : 0.513 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 73.8 seconds
Delaunay (random points in kuzmin distribution) :0.1: 83.4 seconds
Delaunay (weighted average) : 78.6 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 37.3 seconds
Delaunay (random points in kuzmin distribution) :0.1: 42.8 seconds
Delaunay (weighted average) : 40.1 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 19.3 seconds
Delaunay (random points in kuzmin distribution) :0.1: 22.6 seconds
Delaunay (weighted average) : 20.9 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 10 seconds
Delaunay (random points in kuzmin distribution) :0.1: 11.8 seconds
Delaunay (weighted average) : 10.9 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 3d, k=1) build tree : 4.23 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 11.4 seconds
k-nearest neighbors (random 2d, k=1) build tree : 4.82 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 7.27 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 3d, k=1) build tree : 2.71 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 5.75 seconds
k-nearest neighbors (random 2d, k=1) build tree : 2.77 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 3.65 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 3d, k=1) build tree : 1.65 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 3.04 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.58 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 1.93 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 3d, k=1) build tree : 1.13 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 1.54 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.33 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.968 seconds

./runtest mvMultiply 5000000 1
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.338 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.331 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.251 seconds

./runtest mvMultiply 5000000 2
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.183 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.335 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.131 seconds

./runtest mvMultiply 5000000 4
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.103 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.328 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.072 seconds

./runtest mvMultiply 5000000 8
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0568 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.317 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0394 seconds

./runtest nbodyTest 1000000 1
Barnes Hut (Random 3d points) :0.1: 30.4 seconds
Barnes Hut (weighted average) : 30.4 seconds

./runtest nbodyTest 1000000 2
Barnes Hut (Random 3d points) :0.1: 15.1 seconds
Barnes Hut (weighted average) : 15.1 seconds

./runtest nbodyTest 1000000 4
Barnes Hut (Random 3d points) :0.1: 7.89 seconds
Barnes Hut (weighted average) : 7.89 seconds

./runtest nbodyTest 1000000 8
Barnes Hut (Random 3d points) :0.1: 4.14 seconds
Barnes Hut (weighted average) : 4.14 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 4.23 seconds
Suffix Array (equal string) :0.1: 1.44 seconds
Suffix Array (repeated string) :0.1: 3.03 seconds
Suffix Array (weighted average) : 3.43 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.21 seconds
Suffix Array (equal string) :0.1: 0.821 seconds
Suffix Array (repeated string) :0.1: 1.64 seconds
Suffix Array (weighted average) : 1.82 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.27 seconds
Suffix Array (equal string) :0.1: 0.519 seconds
Suffix Array (repeated string) :0.1: 1.02 seconds
Suffix Array (weighted average) : 1.07 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.73 seconds
Suffix Array (equal string) :0.1: 0.322 seconds
Suffix Array (repeated string) :0.1: 0.649 seconds
Suffix Array (weighted average) : 0.632 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 6.81 seconds
Convex Hull (random in unit circle) :0.3: 0.561 seconds
Convex Hull (random projected Parabola) :0.3: 0.736 seconds
Convex Hull (weighted average) : 1.53 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 3.45 seconds
Convex Hull (random in unit circle) :0.3: 0.298 seconds
Convex Hull (random projected Parabola) :0.3: 0.379 seconds
Convex Hull (weighted average) : 0.783 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 1.9 seconds
Convex Hull (random in unit circle) :0.3: 0.178 seconds
Convex Hull (random projected Parabola) :0.3: 0.225 seconds
Convex Hull (weighted average) : 0.444 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 1.01 seconds
Convex Hull (random in unit circle) :0.3: 0.103 seconds
Convex Hull (random projected Parabola) :0.3: 0.13 seconds
Convex Hull (weighted average) : 0.245 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 7.07 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 17 seconds
Minimum Spanning Tree (weighted average) : 12 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 3.6 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 8.6 seconds
Minimum Spanning Tree (weighted average) : 6.1 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.9 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 4.56 seconds
Minimum Spanning Tree (weighted average) : 3.23 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.01 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 2.38 seconds
Minimum Spanning Tree (weighted average) : 1.7 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.2 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 11 seconds
Minimum Spanning Tree (weighted average) : 7.58 seconds
