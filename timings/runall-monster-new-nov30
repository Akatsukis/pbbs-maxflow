HOSTNAME: monster
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 274
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 274
Last Changed Date: 2010-11-30 13:30:44 -0500 (Tue, 30 Nov 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.182 seconds
map (double, +1) : 0.318 seconds
map (char, +1)  : 0.239 seconds
map (char, isalpha) : 0.476 seconds
reduce (double, add) : 0.158 seconds
max Index (double) : 0.256 seconds
scan (double, add, inplace) : 0.474 seconds
scan (double, add) : 0.54 seconds
scanI (double, add) : 0.538 seconds
scan (int, max) : 0.366 seconds
sequential scan (double, add) : 0.516 seconds
sequential scan (int, max) : 0.221 seconds
filter (double, odd) : 0.63 seconds
pack (double, odd) : 0.466 seconds
gather (int) : 3.16 seconds
gather (double) : 3.29 seconds
scatter (int) : 2.75 seconds
scatter (double) : 2.91 seconds
scatter contended (10^6) : 0.95 seconds
scatter contended (10^5) : 0.845 seconds
scatter CAS (int) : 14.7 seconds
scatter CAS contended (10^6) : 2.53 seconds
scatter CAS contended conditional (10^6) : 0.998 seconds
scatter CAS contended (10^5) : 1.76 seconds
scatter CAS contended conditional (10^5) : 0.846 seconds
partition : 0.202 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.0913 seconds
map (double, +1) : 0.16 seconds
map (char, +1)  : 0.121 seconds
map (char, isalpha) : 0.237 seconds
reduce (double, add) : 0.0948 seconds
max Index (double) : 0.125 seconds
scan (double, add, inplace) : 0.275 seconds
scan (double, add) : 0.32 seconds
scanI (double, add) : 0.318 seconds
scan (int, max) : 0.222 seconds
sequential scan (double, add) : 0.607 seconds
sequential scan (int, max) : 0.215 seconds
filter (double, odd) : 0.345 seconds
pack (double, odd) : 0.291 seconds
gather (int) : 1.82 seconds
gather (double) : 2.11 seconds
scatter (int) : 1.62 seconds
scatter (double) : 1.64 seconds
scatter contended (10^6) : 0.769 seconds
scatter contended (10^5) : 0.835 seconds
scatter CAS (int) : 9.71 seconds
scatter CAS contended (10^6) : 3.57 seconds
scatter CAS contended conditional (10^6) : 1.25 seconds
scatter CAS contended (10^5) : 3.73 seconds
scatter CAS contended conditional (10^5) : 1.34 seconds
partition : 0.249 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.0621 seconds
map (double, +1) : 0.107 seconds
map (char, +1)  : 0.0602 seconds
map (char, isalpha) : 0.12 seconds
reduce (double, add) : 0.0522 seconds
max Index (double) : 0.0791 seconds
scan (double, add, inplace) : 0.157 seconds
scan (double, add) : 0.172 seconds
scanI (double, add) : 0.173 seconds
scan (int, max) : 0.116 seconds
sequential scan (double, add) : 0.605 seconds
sequential scan (int, max) : 0.265 seconds
filter (double, odd) : 0.203 seconds
pack (double, odd) : 0.15 seconds
gather (int) : 0.981 seconds
gather (double) : 1.04 seconds
scatter (int) : 0.796 seconds
scatter (double) : 0.825 seconds
scatter contended (10^6) : 0.417 seconds
scatter contended (10^5) : 0.47 seconds
scatter CAS (int) : 4.35 seconds
scatter CAS contended (10^6) : 2.02 seconds
scatter CAS contended conditional (10^6) : 0.678 seconds
scatter CAS contended (10^5) : 2.49 seconds
scatter CAS contended conditional (10^5) : 0.729 seconds
partition : 0.248 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0434 seconds
map (double, +1) : 0.0836 seconds
map (char, +1)  : 0.0306 seconds
map (char, isalpha) : 0.0859 seconds
reduce (double, add) : 0.0318 seconds
max Index (double) : 0.0412 seconds
scan (double, add, inplace) : 0.0862 seconds
scan (double, add) : 0.103 seconds
scanI (double, add) : 0.103 seconds
scan (int, max) : 0.0647 seconds
sequential scan (double, add) : 0.684 seconds
sequential scan (int, max) : 0.276 seconds
filter (double, odd) : 0.112 seconds
pack (double, odd) : 0.0842 seconds
gather (int) : 0.499 seconds
gather (double) : 0.52 seconds
scatter (int) : 0.461 seconds
scatter (double) : 0.429 seconds
scatter contended (10^6) : 0.239 seconds
scatter contended (10^5) : 0.263 seconds
scatter CAS (int) : 2.13 seconds
scatter CAS contended (10^6) : 1.25 seconds
scatter CAS contended conditional (10^6) : 0.366 seconds
scatter CAS contended (10^5) : 1.37 seconds
scatter CAS contended conditional (10^5) : 0.409 seconds
partition : 0.271 seconds

./runtest sequenceTest 100000000 16
tabulate (double) : 0.0347 seconds
map (double, +1) : 0.0541 seconds
map (char, +1)  : 0.0158 seconds
map (char, isalpha) : 0.0314 seconds
reduce (double, add) : 0.021 seconds
max Index (double) : 0.0266 seconds
scan (double, add, inplace) : 0.0626 seconds
scan (double, add) : 0.076 seconds
scanI (double, add) : 0.0762 seconds
scan (int, max) : 0.0435 seconds
sequential scan (double, add) : 0.639 seconds
sequential scan (int, max) : 0.27 seconds
filter (double, odd) : 0.0748 seconds
pack (double, odd) : 0.0527 seconds
gather (int) : 0.272 seconds
gather (double) : 0.285 seconds
scatter (int) : 0.306 seconds
scatter (double) : 0.289 seconds
scatter contended (10^6) : 0.169 seconds
scatter contended (10^5) : 0.181 seconds
scatter CAS (int) : 1.05 seconds
scatter CAS contended (10^6) : 0.674 seconds
scatter CAS contended conditional (10^6) : 0.202 seconds
scatter CAS contended (10^5) : 0.727 seconds
scatter CAS contended conditional (10^5) : 0.25 seconds
partition : 0.265 seconds

./runtest sequenceTest 100000000 24
tabulate (double) : 0.0345 seconds
map (double, +1) : 0.0534 seconds
map (char, +1)  : 0.0135 seconds
map (char, isalpha) : 0.0257 seconds
reduce (double, add) : 0.0177 seconds
max Index (double) : 0.0215 seconds
scan (double, add, inplace) : 0.056 seconds
scan (double, add) : 0.0738 seconds
scanI (double, add) : 0.072 seconds
scan (int, max) : 0.0387 seconds
sequential scan (double, add) : 0.645 seconds
sequential scan (int, max) : 0.279 seconds
filter (double, odd) : 0.0633 seconds
pack (double, odd) : 0.0515 seconds
gather (int) : 0.189 seconds
gather (double) : 0.203 seconds
scatter (int) : 0.258 seconds
scatter (double) : 0.277 seconds
scatter contended (10^6) : 0.176 seconds
scatter contended (10^5) : 0.19 seconds
scatter CAS (int) : 0.729 seconds
scatter CAS contended (10^6) : 0.493 seconds
scatter CAS contended conditional (10^6) : 0.164 seconds
scatter CAS contended (10^5) : 0.52 seconds
scatter CAS contended conditional (10^5) : 0.212 seconds
partition : 0.269 seconds

./runtest sequenceTest 100000000 28
tabulate (double) : 0.0351 seconds
map (double, +1) : 0.0532 seconds
map (char, +1)  : 0.0108 seconds
map (char, isalpha) : 0.0195 seconds
reduce (double, add) : 0.0178 seconds
max Index (double) : 0.0195 seconds
scan (double, add, inplace) : 0.0525 seconds
scan (double, add) : 0.0684 seconds
scanI (double, add) : 0.0691 seconds
scan (int, max) : 0.0377 seconds
sequential scan (double, add) : 0.64 seconds
sequential scan (int, max) : 0.287 seconds
filter (double, odd) : 0.0634 seconds
pack (double, odd) : 0.0494 seconds
gather (int) : 0.182 seconds
gather (double) : 0.19 seconds
scatter (int) : 0.279 seconds
scatter (double) : 0.286 seconds
scatter contended (10^6) : 0.171 seconds
scatter contended (10^5) : 0.187 seconds
scatter CAS (int) : 0.674 seconds
scatter CAS contended (10^6) : 0.46 seconds
scatter CAS contended conditional (10^6) : 0.162 seconds
scatter CAS contended (10^5) : 0.476 seconds
scatter CAS contended conditional (10^5) : 0.208 seconds
partition : 0.262 seconds

./runtest sequenceTest 100000000 32
tabulate (double) : 0.0394 seconds
map (double, +1) : 0.0564 seconds
map (char, +1)  : 0.0117 seconds
map (char, isalpha) : 0.0226 seconds
reduce (double, add) : 0.0197 seconds
max Index (double) : 0.0194 seconds
scan (double, add, inplace) : 0.055 seconds
scan (double, add) : 0.0725 seconds
scanI (double, add) : 0.0715 seconds
scan (int, max) : 0.0402 seconds
sequential scan (double, add) : 0.644 seconds
sequential scan (int, max) : 0.275 seconds
filter (double, odd) : 0.0642 seconds
pack (double, odd) : 0.0503 seconds
gather (int) : 0.176 seconds
gather (double) : 0.189 seconds
scatter (int) : 0.305 seconds
scatter (double) : 0.301 seconds
scatter contended (10^6) : 0.169 seconds
scatter contended (10^5) : 0.128 seconds
scatter CAS (int) : 0.644 seconds
scatter CAS contended (10^6) : 0.424 seconds
scatter CAS contended conditional (10^6) : 0.166 seconds
scatter CAS contended (10^5) : 0.459 seconds
scatter CAS contended conditional (10^5) : 0.216 seconds
partition : 0.272 seconds

./runtest sequenceTest 100000000 64
tabulate (double) : 0.0345 seconds
map (double, +1) : 0.05 seconds
map (char, +1)  : 0.00839 seconds
map (char, isalpha) : 0.0151 seconds
reduce (double, add) : 0.018 seconds
max Index (double) : 0.0169 seconds
scan (double, add, inplace) : 0.0481 seconds
scan (double, add) : 0.065 seconds
scanI (double, add) : 0.0684 seconds
scan (int, max) : 0.0365 seconds
sequential scan (double, add) : 0.648 seconds
sequential scan (int, max) : 0.26 seconds
filter (double, odd) : 0.0596 seconds
pack (double, odd) : 0.0425 seconds
gather (int) : 0.142 seconds
gather (double) : 0.159 seconds
scatter (int) : 0.251 seconds
scatter (double) : 0.266 seconds
scatter contended (10^6) : 0.116 seconds
scatter contended (10^5) : 0.18 seconds
scatter CAS (int) : 0.523 seconds
scatter CAS contended (10^6) : 0.364 seconds
scatter CAS contended conditional (10^6) : 0.173 seconds
scatter CAS contended (10^5) : 0.379 seconds
scatter CAS contended conditional (10^5) : 0.232 seconds
partition : 0.272 seconds

./runtest sequenceTest 100000000 64
tabulate (double) : 0.037 seconds
map (double, +1) : 0.0512 seconds
map (char, +1)  : 0.00873 seconds
map (char, isalpha) : 0.019 seconds
reduce (double, add) : 0.0186 seconds
max Index (double) : 0.0174 seconds
scan (double, add, inplace) : 0.0545 seconds
scan (double, add) : 0.0743 seconds
scanI (double, add) : 0.0747 seconds
scan (int, max) : 0.04 seconds
sequential scan (double, add) : 0.645 seconds
sequential scan (int, max) : 0.273 seconds
filter (double, odd) : 0.0573 seconds
pack (double, odd) : 0.0446 seconds
gather (int) : 0.148 seconds
gather (double) : 0.163 seconds
scatter (int) : 0.237 seconds
scatter (double) : 0.286 seconds
scatter contended (10^6) : 0.177 seconds
scatter contended (10^5) : 0.195 seconds
scatter CAS (int) : 0.524 seconds
scatter CAS contended (10^6) : 0.367 seconds
scatter CAS contended conditional (10^6) : 0.172 seconds
scatter CAS contended (10^5) : 0.379 seconds
scatter CAS contended conditional (10^5) : 0.232 seconds
partition : 0.269 seconds

./runtest mergeTest 100000000 1
Merging (interleaved) :0.1: 0.734 seconds
Merging (weighted average) : 0.734 seconds

./runtest mergeTest 100000000 2
Merging (interleaved) :0.1: 0.401 seconds
Merging (weighted average) : 0.401 seconds

./runtest mergeTest 100000000 4
Merging (interleaved) :0.1: 0.196 seconds
Merging (weighted average) : 0.196 seconds

./runtest mergeTest 100000000 8
Merging (interleaved) :0.1: 0.101 seconds
Merging (weighted average) : 0.101 seconds

./runtest mergeTest 100000000 16
Merging (interleaved) :0.1: 0.0691 seconds
Merging (weighted average) : 0.0691 seconds

./runtest mergeTest 100000000 24
Merging (interleaved) :0.1: 0.0612 seconds
Merging (weighted average) : 0.0612 seconds

./runtest mergeTest 100000000 28
Merging (interleaved) :0.1: 0.0585 seconds
Merging (weighted average) : 0.0585 seconds

./runtest mergeTest 100000000 32
Merging (interleaved) :0.1: 0.0604 seconds
Merging (weighted average) : 0.0604 seconds

./runtest mergeTest 100000000 64
Merging (interleaved) :0.1: 0.0536 seconds
Merging (weighted average) : 0.0536 seconds

./runtest mergeTest 100000000 64
Merging (interleaved) :0.1: 0.0649 seconds
Merging (weighted average) : 0.0649 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 11.6 seconds
Random Permutation (4 x double) :0.1: 16.5 seconds
Random Permutation (weighted average) : 14.1 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 7.76 seconds
Random Permutation (4 x double) :0.1: 10.9 seconds
Random Permutation (weighted average) : 9.31 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 4.03 seconds
Random Permutation (4 x double) :0.1: 5.84 seconds
Random Permutation (weighted average) : 4.93 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 2.22 seconds
Random Permutation (4 x double) :0.1: 3.59 seconds
Random Permutation (weighted average) : 2.9 seconds

./runtest randPermTest 100000000 16
Random Permutation (int) :0.1: 1.75 seconds
Random Permutation (4 x double) :0.1: 3.01 seconds
Random Permutation (weighted average) : 2.38 seconds

./runtest randPermTest 100000000 24
Random Permutation (int) :0.1: 1.68 seconds
Random Permutation (4 x double) :0.1: 3.13 seconds
Random Permutation (weighted average) : 2.4 seconds

./runtest randPermTest 100000000 28
Random Permutation (int) :0.1: 1.72 seconds
Random Permutation (4 x double) :0.1: 3.25 seconds
Random Permutation (weighted average) : 2.48 seconds

./runtest randPermTest 100000000 32
Random Permutation (int) :0.1: 1.82 seconds
Random Permutation (4 x double) :0.1: 3.39 seconds
Random Permutation (weighted average) : 2.6 seconds

./runtest randPermTest 100000000 64
Random Permutation (int) :0.1: 2.97 seconds
Random Permutation (4 x double) :0.1: 4.71 seconds
Random Permutation (weighted average) : 3.84 seconds

./runtest randPermTest 100000000 64
Random Permutation (int) :0.1: 2.91 seconds
Random Permutation (4 x double) :0.1: 4.47 seconds
Random Permutation (weighted average) : 3.69 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 3.09 seconds
Integer Sort (32 bit, exponential) :0.1: 2.94 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 1.01 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 4.65 seconds
Integer Sort (weighted average) : 3.27 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 1.69 seconds
Integer Sort (32 bit, exponential) :0.1: 1.73 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.621 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.75 seconds
Integer Sort (weighted average) : 1.91 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 0.88 seconds
Integer Sort (32 bit, exponential) :0.1: 0.888 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.326 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.45 seconds
Integer Sort (weighted average) : 0.997 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.446 seconds
Integer Sort (32 bit, exponential) :0.1: 0.455 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.173 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.74 seconds
Integer Sort (weighted average) : 0.511 seconds

./runtest intSortTest 100000000 16
Integer Sort (32 bit, random) :0.1: 0.242 seconds
Integer Sort (32 bit, exponential) :0.1: 0.255 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.103 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.498 seconds
Integer Sort (weighted average) : 0.319 seconds

./runtest intSortTest 100000000 24
Integer Sort (32 bit, random) :0.1: 0.223 seconds
Integer Sort (32 bit, exponential) :0.1: 0.223 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0892 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.48 seconds
Integer Sort (weighted average) : 0.299 seconds

./runtest intSortTest 100000000 28
Integer Sort (32 bit, random) :0.1: 0.21 seconds
Integer Sort (32 bit, exponential) :0.1: 0.206 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0834 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.495 seconds
Integer Sort (weighted average) : 0.298 seconds

./runtest intSortTest 100000000 32
Integer Sort (32 bit, random) :0.1: 0.215 seconds
Integer Sort (32 bit, exponential) :0.1: 0.216 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0859 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.47 seconds
Integer Sort (weighted average) : 0.292 seconds

./runtest intSortTest 100000000 64
Integer Sort (32 bit, random) :0.1: 0.272 seconds
Integer Sort (32 bit, exponential) :0.1: 0.26 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0866 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.48 seconds
Integer Sort (weighted average) : 0.316 seconds

./runtest intSortTest 100000000 64
Integer Sort (32 bit, random) :0.1: 0.255 seconds
Integer Sort (32 bit, exponential) :0.1: 0.237 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0722 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.483 seconds
Integer Sort (weighted average) : 0.306 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 17.9 seconds
Comparison Sort (double, exponential) :0.1: 10.7 seconds
Comparison Sort (double, almost sorted) :0.1: 4.33 seconds
Comparison Sort (trigram strings adjacent) :0.2: 50.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 73 seconds
Comparison Sort (double with 3 x double payload) :0.3: 20.2 seconds
Comparison Sort (weighted average) : 34 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 10 seconds
Comparison Sort (double, exponential) :0.1: 6.65 seconds
Comparison Sort (double, almost sorted) :0.1: 2.72 seconds
Comparison Sort (trigram strings adjacent) :0.2: 31.4 seconds
Comparison Sort (trigram strings, random layout) :0.2: 47.2 seconds
Comparison Sort (double with 3 x double payload) :0.3: 12.4 seconds
Comparison Sort (weighted average) : 21.4 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 5.56 seconds
Comparison Sort (double, exponential) :0.1: 3.82 seconds
Comparison Sort (double, almost sorted) :0.1: 1.62 seconds
Comparison Sort (trigram strings adjacent) :0.2: 16.8 seconds
Comparison Sort (trigram strings, random layout) :0.2: 37.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 7.83 seconds
Comparison Sort (weighted average) : 14.3 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.39 seconds
Comparison Sort (double, exponential) :0.1: 2.57 seconds
Comparison Sort (double, almost sorted) :0.1: 1.27 seconds
Comparison Sort (trigram strings adjacent) :0.2: 10.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 21 seconds
Comparison Sort (double with 3 x double payload) :0.3: 4.56 seconds
Comparison Sort (weighted average) : 8.34 seconds

./runtest quickSortTest 100000000 16
Comparison Sort (double, random) :0.1: 2.56 seconds
Comparison Sort (double, exponential) :0.1: 2.51 seconds
Comparison Sort (double, almost sorted) :0.1: 1.07 seconds
Comparison Sort (trigram strings adjacent) :0.2: 7.43 seconds
Comparison Sort (trigram strings, random layout) :0.2: 22.5 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.46 seconds
Comparison Sort (weighted average) : 7.63 seconds

./runtest quickSortTest 100000000 24
Comparison Sort (double, random) :0.1: 2.52 seconds
Comparison Sort (double, exponential) :0.1: 2.14 seconds
Comparison Sort (double, almost sorted) :0.1: 1.19 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.75 seconds
Comparison Sort (trigram strings, random layout) :0.2: 21.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.07 seconds
Comparison Sort (weighted average) : 7.77 seconds

./runtest quickSortTest 100000000 28
Comparison Sort (double, random) :0.1: 2.19 seconds
Comparison Sort (double, exponential) :0.1: 2.35 seconds
Comparison Sort (double, almost sorted) :0.1: 1.2 seconds
Comparison Sort (trigram strings adjacent) :0.2: 7.73 seconds
Comparison Sort (trigram strings, random layout) :0.2: 22.5 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.41 seconds
Comparison Sort (weighted average) : 7.64 seconds

./runtest quickSortTest 100000000 32
Comparison Sort (double, random) :0.1: 2.24 seconds
Comparison Sort (double, exponential) :0.1: 2.75 seconds
Comparison Sort (double, almost sorted) :0.1: 1.22 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.34 seconds
Comparison Sort (trigram strings, random layout) :0.2: 27.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.42 seconds
Comparison Sort (weighted average) : 8.79 seconds

./runtest quickSortTest 100000000 64
Comparison Sort (double, random) :0.1: 3.55 seconds
Comparison Sort (double, exponential) :0.1: 2.55 seconds
Comparison Sort (double, almost sorted) :0.1: 1.34 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.62 seconds
Comparison Sort (trigram strings, random layout) :0.2: 35.9 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.52 seconds
Comparison Sort (weighted average) : 10.7 seconds

./runtest quickSortTest 100000000 64
Comparison Sort (double, random) :0.1: 2.37 seconds
Comparison Sort (double, exponential) :0.1: 3.38 seconds
Comparison Sort (double, almost sorted) :0.1: 1.35 seconds
Comparison Sort (trigram strings adjacent) :0.2: 10 seconds
Comparison Sort (trigram strings, random layout) :0.2: 36.3 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.56 seconds
Comparison Sort (weighted average) : 11 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 21.7 seconds
Comparison Sort (double, exponential) :0.1: 14.4 seconds
Comparison Sort (double, almost sorted) :0.1: 6.14 seconds
Comparison Sort (trigram strings adjacent) :0.2: 32.8 seconds
Comparison Sort (trigram strings, random layout) :0.2: 51.8 seconds
Comparison Sort (double with 3 x double payload) :0.3: 25.3 seconds
Comparison Sort (weighted average) : 28.7 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 12 seconds
Comparison Sort (double, exponential) :0.1: 8.65 seconds
Comparison Sort (double, almost sorted) :0.1: 3.8 seconds
Comparison Sort (trigram strings adjacent) :0.2: 19.5 seconds
Comparison Sort (trigram strings, random layout) :0.2: 29.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 15.1 seconds
Comparison Sort (weighted average) : 16.8 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 6.12 seconds
Comparison Sort (double, exponential) :0.1: 4.37 seconds
Comparison Sort (double, almost sorted) :0.1: 1.98 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.96 seconds
Comparison Sort (trigram strings, random layout) :0.2: 15.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 7.71 seconds
Comparison Sort (weighted average) : 8.64 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.17 seconds
Comparison Sort (double, exponential) :0.1: 2.26 seconds
Comparison Sort (double, almost sorted) :0.1: 1.07 seconds
Comparison Sort (trigram strings adjacent) :0.2: 5.06 seconds
Comparison Sort (trigram strings, random layout) :0.2: 7.84 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.99 seconds
Comparison Sort (weighted average) : 4.43 seconds

./runtest sampleSortTest 100000000 16
Comparison Sort (double, random) :0.1: 1.87 seconds
Comparison Sort (double, exponential) :0.1: 1.29 seconds
Comparison Sort (double, almost sorted) :0.1: 0.723 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.96 seconds
Comparison Sort (trigram strings, random layout) :0.2: 4.54 seconds
Comparison Sort (double with 3 x double payload) :0.3: 2.7 seconds
Comparison Sort (weighted average) : 2.7 seconds

./runtest sampleSortTest 100000000 24
Comparison Sort (double, random) :0.1: 1.54 seconds
Comparison Sort (double, exponential) :0.1: 1.01 seconds
Comparison Sort (double, almost sorted) :0.1: 0.662 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.27 seconds
Comparison Sort (trigram strings, random layout) :0.2: 3.57 seconds
Comparison Sort (double with 3 x double payload) :0.3: 2.1 seconds
Comparison Sort (weighted average) : 2.12 seconds

./runtest sampleSortTest 100000000 28
Comparison Sort (double, random) :0.1: 1.42 seconds
Comparison Sort (double, exponential) :0.1: 0.882 seconds
Comparison Sort (double, almost sorted) :0.1: 0.579 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.84 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.87 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.89 seconds
Comparison Sort (weighted average) : 1.8 seconds

./runtest sampleSortTest 100000000 32
Comparison Sort (double, random) :0.1: 1.37 seconds
Comparison Sort (double, exponential) :0.1: 0.842 seconds
Comparison Sort (double, almost sorted) :0.1: 0.554 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.66 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.47 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.86 seconds
Comparison Sort (weighted average) : 1.66 seconds

./runtest sampleSortTest 100000000 64
Comparison Sort (double, random) :0.1: 1.17 seconds
Comparison Sort (double, exponential) :0.1: 0.635 seconds
Comparison Sort (double, almost sorted) :0.1: 0.567 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.29 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.07 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.41 seconds
Comparison Sort (weighted average) : 1.33 seconds

./runtest sampleSortTest 100000000 64
Comparison Sort (double, random) :0.1: 1.1 seconds
Comparison Sort (double, exponential) :0.1: 0.597 seconds
Comparison Sort (double, almost sorted) :0.1: 0.567 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.29 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.05 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.4 seconds
Comparison Sort (weighted average) : 1.31 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 15.3 seconds
Comparison Sort (double, exponential) :0.1: 10.7 seconds
Comparison Sort (double, almost sorted) :0.1: 3.22 seconds
Comparison Sort (trigram strings adjacent) :0.2: 64.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 88.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 16.6 seconds
Comparison Sort (weighted average) : 38.4 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.941 seconds
Remove Duplicates (int, exponential) :0.1: 0.661 seconds
Remove Duplicates (trigram strings) :0.2: 1.03 seconds
Remove Duplicates (weighted average) : 0.914 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.539 seconds
Remove Duplicates (int, exponential) :0.1: 0.371 seconds
Remove Duplicates (trigram strings) :0.2: 0.611 seconds
Remove Duplicates (weighted average) : 0.533 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.288 seconds
Remove Duplicates (int, exponential) :0.1: 0.189 seconds
Remove Duplicates (trigram strings) :0.2: 0.321 seconds
Remove Duplicates (weighted average) : 0.28 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.15 seconds
Remove Duplicates (int, exponential) :0.1: 0.111 seconds
Remove Duplicates (trigram strings) :0.2: 0.192 seconds
Remove Duplicates (weighted average) : 0.162 seconds

./runtest remDuplicatesTest 10000000 16
Remove Duplicates (int, random in n) :0.1: 0.0943 seconds
Remove Duplicates (int, exponential) :0.1: 0.0598 seconds
Remove Duplicates (trigram strings) :0.2: 0.135 seconds
Remove Duplicates (weighted average) : 0.106 seconds

./runtest remDuplicatesTest 10000000 24
Remove Duplicates (int, random in n) :0.1: 0.0852 seconds
Remove Duplicates (int, exponential) :0.1: 0.0604 seconds
Remove Duplicates (trigram strings) :0.2: 0.117 seconds
Remove Duplicates (weighted average) : 0.0949 seconds

./runtest remDuplicatesTest 10000000 28
Remove Duplicates (int, random in n) :0.1: 0.0714 seconds
Remove Duplicates (int, exponential) :0.1: 0.0498 seconds
Remove Duplicates (trigram strings) :0.2: 0.115 seconds
Remove Duplicates (weighted average) : 0.0878 seconds

./runtest remDuplicatesTest 10000000 32
Remove Duplicates (int, random in n) :0.1: 0.0594 seconds
Remove Duplicates (int, exponential) :0.1: 0.0464 seconds
Remove Duplicates (trigram strings) :0.2: 0.115 seconds
Remove Duplicates (weighted average) : 0.0839 seconds

./runtest remDuplicatesTest 10000000 64
Remove Duplicates (int, random in n) :0.1: 0.052 seconds
Remove Duplicates (int, exponential) :0.1: 0.0347 seconds
Remove Duplicates (trigram strings) :0.2: 0.101 seconds
Remove Duplicates (weighted average) : 0.0724 seconds

./runtest remDuplicatesTest 10000000 64
Remove Duplicates (int, random in n) :0.1: 0.0591 seconds
Remove Duplicates (int, exponential) :0.1: 0.0526 seconds
Remove Duplicates (trigram strings) :0.2: 0.098 seconds
Remove Duplicates (weighted average) : 0.0769 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 1.26 seconds
Table (trigram words, insert and find) :0.2: 1.49 seconds
Table (weighted average) : 1.42 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.737 seconds
Table (trigram words, insert and find) :0.2: 0.868 seconds
Table (weighted average) : 0.825 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.383 seconds
Table (trigram words, insert and find) :0.2: 0.438 seconds
Table (weighted average) : 0.419 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.201 seconds
Table (trigram words, insert and find) :0.2: 0.227 seconds
Table (weighted average) : 0.218 seconds

./runtest tableTest 10000000 16
Table (random in n, insert and find) :0.1: 0.141 seconds
Table (trigram words, insert and find) :0.2: 0.151 seconds
Table (weighted average) : 0.148 seconds

./runtest tableTest 10000000 24
Table (random in n, insert and find) :0.1: 0.107 seconds
Table (trigram words, insert and find) :0.2: 0.107 seconds
Table (weighted average) : 0.107 seconds

./runtest tableTest 10000000 28
Table (random in n, insert and find) :0.1: 0.106 seconds
Table (trigram words, insert and find) :0.2: 0.0869 seconds
Table (weighted average) : 0.0933 seconds

./runtest tableTest 10000000 32
Table (random in n, insert and find) :0.1: 0.0825 seconds
Table (trigram words, insert and find) :0.2: 0.0792 seconds
Table (weighted average) : 0.0803 seconds

./runtest tableTest 10000000 64
Table (random in n, insert and find) :0.1: 0.0899 seconds
Table (trigram words, insert and find) :0.2: 0.0672 seconds
Table (weighted average) : 0.0748 seconds

./runtest tableTest 10000000 64
Table (random in n, insert and find) :0.1: 0.0864 seconds
Table (trigram words, insert and find) :0.2: 0.0693 seconds
Table (weighted average) : 0.075 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.56 seconds
Maximal Independent Set (2d grid) :0.2: 0.772 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 3.62 seconds
Maximal Independent Set (weighted average) : 1.68 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.958 seconds
Maximal Independent Set (2d grid) :0.2: 0.483 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 2.2 seconds
Maximal Independent Set (weighted average) : 1.03 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.493 seconds
Maximal Independent Set (2d grid) :0.2: 0.245 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 1.1 seconds
Maximal Independent Set (weighted average) : 0.521 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.252 seconds
Maximal Independent Set (2d grid) :0.2: 0.125 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.56 seconds
Maximal Independent Set (weighted average) : 0.265 seconds

./runtest maxIndSetTest 10000000 16
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.138 seconds
Maximal Independent Set (2d grid) :0.2: 0.0742 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.301 seconds
Maximal Independent Set (weighted average) : 0.147 seconds

./runtest maxIndSetTest 10000000 24
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.109 seconds
Maximal Independent Set (2d grid) :0.2: 0.0609 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.227 seconds
Maximal Independent Set (weighted average) : 0.114 seconds

./runtest maxIndSetTest 10000000 28
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0917 seconds
Maximal Independent Set (2d grid) :0.2: 0.0534 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.193 seconds
Maximal Independent Set (weighted average) : 0.098 seconds

./runtest maxIndSetTest 10000000 32
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0948 seconds
Maximal Independent Set (2d grid) :0.2: 0.0629 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.18 seconds
Maximal Independent Set (weighted average) : 0.1 seconds

./runtest maxIndSetTest 10000000 64
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0913 seconds
Maximal Independent Set (2d grid) :0.2: 0.0564 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.167 seconds
Maximal Independent Set (weighted average) : 0.0928 seconds

./runtest maxIndSetTest 10000000 64
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0929 seconds
Maximal Independent Set (2d grid) :0.2: 0.0509 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.171 seconds
Maximal Independent Set (weighted average) : 0.0914 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 6.04 seconds
Color Graph (2d grid) :0.1: 1.76 seconds
Color Graph (weighted average) : 3.9 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 3.93 seconds
Color Graph (2d grid) :0.1: 1.1 seconds
Color Graph (weighted average) : 2.52 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.93 seconds
Color Graph (2d grid) :0.1: 0.576 seconds
Color Graph (weighted average) : 1.25 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 1.05 seconds
Color Graph (2d grid) :0.1: 0.313 seconds
Color Graph (weighted average) : 0.682 seconds

./runtest colorGraphTest 10000000 16
Color Graph (rand dim=2, m=n*10) :0.1: 0.533 seconds
Color Graph (2d grid) :0.1: 0.173 seconds
Color Graph (weighted average) : 0.353 seconds

./runtest colorGraphTest 10000000 24
Color Graph (rand dim=2, m=n*10) :0.1: 0.391 seconds
Color Graph (2d grid) :0.1: 0.145 seconds
Color Graph (weighted average) : 0.268 seconds

./runtest colorGraphTest 10000000 28
Color Graph (rand dim=2, m=n*10) :0.1: 0.405 seconds
Color Graph (2d grid) :0.1: 0.153 seconds
Color Graph (weighted average) : 0.279 seconds

./runtest colorGraphTest 10000000 32
Color Graph (rand dim=2, m=n*10) :0.1: 0.357 seconds
Color Graph (2d grid) :0.1: 0.148 seconds
Color Graph (weighted average) : 0.252 seconds

./runtest colorGraphTest 10000000 64
Color Graph (rand dim=2, m=n*10) :0.1: 0.364 seconds
Color Graph (2d grid) :0.1: 0.153 seconds
Color Graph (weighted average) : 0.259 seconds

./runtest colorGraphTest 10000000 64
Color Graph (rand dim=2, m=n*10) :0.1: 0.361 seconds
Color Graph (2d grid) :0.1: 0.146 seconds
Color Graph (weighted average) : 0.253 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 1.26 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 2.21 seconds
Maximal Matching (2d mesh) :0.1: 1.79 seconds
Maximal Matching (weighted average) : 1.75 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.924 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.53 seconds
Maximal Matching (2d mesh) :0.1: 1.23 seconds
Maximal Matching (weighted average) : 1.23 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.468 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.905 seconds
Maximal Matching (2d mesh) :0.1: 0.647 seconds
Maximal Matching (weighted average) : 0.673 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.222 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.416 seconds
Maximal Matching (2d mesh) :0.1: 0.342 seconds
Maximal Matching (weighted average) : 0.327 seconds

./runtest maxMatchingTest 10000000 16
Maximal Matching (tree rand parent) :0.1: 0.16 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.303 seconds
Maximal Matching (2d mesh) :0.1: 0.251 seconds
Maximal Matching (weighted average) : 0.238 seconds

./runtest maxMatchingTest 10000000 24
Maximal Matching (tree rand parent) :0.1: 0.162 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.228 seconds
Maximal Matching (2d mesh) :0.1: 0.197 seconds
Maximal Matching (weighted average) : 0.195 seconds

./runtest maxMatchingTest 10000000 28
Maximal Matching (tree rand parent) :0.1: 0.147 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.248 seconds
Maximal Matching (2d mesh) :0.1: 0.212 seconds
Maximal Matching (weighted average) : 0.202 seconds

./runtest maxMatchingTest 10000000 32
Maximal Matching (tree rand parent) :0.1: 0.168 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.234 seconds
Maximal Matching (2d mesh) :0.1: 0.2 seconds
Maximal Matching (weighted average) : 0.201 seconds

./runtest maxMatchingTest 10000000 64
Maximal Matching (tree rand parent) :0.1: 0.199 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.314 seconds
Maximal Matching (2d mesh) :0.1: 0.254 seconds
Maximal Matching (weighted average) : 0.256 seconds

./runtest maxMatchingTest 10000000 64
Maximal Matching (tree rand parent) :0.1: 0.186 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.337 seconds
Maximal Matching (2d mesh) :0.1: 0.265 seconds
Maximal Matching (weighted average) : 0.263 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 19.8 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 58.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 39.2 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 12.8 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 36.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 24.7 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 6.58 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 18.1 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 12.4 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 3.57 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 9.51 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 6.54 seconds

./runtest separatorTest 10000000 16
Separator (2d mesh) :0.1: 2.25 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 5.17 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 3.71 seconds

./runtest separatorTest 10000000 24
Separator (2d mesh) :0.1: 1.81 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.84 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.82 seconds

./runtest separatorTest 10000000 28
Separator (2d mesh) :0.1: 1.81 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.72 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.76 seconds

./runtest separatorTest 10000000 32
Separator (2d mesh) :0.1: 1.78 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.49 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.64 seconds

./runtest separatorTest 10000000 64
Separator (2d mesh) :0.1: 1.91 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.21 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.56 seconds

./runtest separatorTest 10000000 64
Separator (2d mesh) :0.1: 1.92 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.21 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.56 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 3.7 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.91 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 8.91 seconds
BFS (weighted average) : 4.81 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 2.41 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.7 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 5.57 seconds
BFS (weighted average) : 3.27 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.22 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.57 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 2.87 seconds
BFS (weighted average) : 1.72 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.616 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.886 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.43 seconds
BFS (weighted average) : 0.888 seconds

./runtest bfsTest 10000000 16
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.351 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.683 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.752 seconds
BFS (weighted average) : 0.534 seconds

./runtest bfsTest 10000000 24
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.256 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.674 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.535 seconds
BFS (weighted average) : 0.43 seconds

./runtest bfsTest 10000000 28
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.227 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.677 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.504 seconds
BFS (weighted average) : 0.409 seconds

./runtest bfsTest 10000000 32
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.231 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.75 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.482 seconds
BFS (weighted average) : 0.424 seconds

./runtest bfsTest 10000000 64
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.214 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.16 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.425 seconds
BFS (weighted average) : 0.504 seconds

./runtest bfsTest 10000000 64
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.248 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.13 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.365 seconds
BFS (weighted average) : 0.498 seconds

./runtest buildTreeTest 10000000 1
build tree (random 2d) :0.1: 2.68 seconds
build tree (kuzmin 2d) :0.1: 5.42 seconds
build tree (random 3d) :0.1: 3.01 seconds
build tree (plummer 3d) :0.1: 5.6 seconds
build tree (weighted average) : 4.18 seconds

./runtest buildTreeTest 10000000 2
build tree (random 2d) :0.1: 1.48 seconds
build tree (kuzmin 2d) :0.1: 3.47 seconds
build tree (random 3d) :0.1: 1.88 seconds
build tree (plummer 3d) :0.1: 3.5 seconds
build tree (weighted average) : 2.58 seconds

./runtest buildTreeTest 10000000 4
build tree (random 2d) :0.1: 0.808 seconds
build tree (kuzmin 2d) :0.1: 1.93 seconds
build tree (random 3d) :0.1: 0.958 seconds
build tree (plummer 3d) :0.1: 1.81 seconds
build tree (weighted average) : 1.38 seconds

./runtest buildTreeTest 10000000 8
build tree (random 2d) :0.1: 0.469 seconds
build tree (kuzmin 2d) :0.1: 1.17 seconds
build tree (random 3d) :0.1: 0.555 seconds
build tree (plummer 3d) :0.1: 1.13 seconds
build tree (weighted average) : 0.831 seconds

./runtest buildTreeTest 10000000 16
build tree (random 2d) :0.1: 0.333 seconds
build tree (kuzmin 2d) :0.1: 0.873 seconds
build tree (random 3d) :0.1: 0.375 seconds
build tree (plummer 3d) :0.1: 0.723 seconds
build tree (weighted average) : 0.576 seconds

./runtest buildTreeTest 10000000 24
build tree (random 2d) :0.1: 0.278 seconds
build tree (kuzmin 2d) :0.1: 0.83 seconds
build tree (random 3d) :0.1: 0.332 seconds
build tree (plummer 3d) :0.1: 0.762 seconds
build tree (weighted average) : 0.551 seconds

./runtest buildTreeTest 10000000 28
build tree (random 2d) :0.1: 0.295 seconds
build tree (kuzmin 2d) :0.1: 0.913 seconds
build tree (random 3d) :0.1: 0.364 seconds
build tree (plummer 3d) :0.1: 0.786 seconds
build tree (weighted average) : 0.59 seconds

./runtest buildTreeTest 10000000 32
build tree (random 2d) :0.1: 0.298 seconds
build tree (kuzmin 2d) :0.1: 0.891 seconds
build tree (random 3d) :0.1: 0.323 seconds
build tree (plummer 3d) :0.1: 0.792 seconds
build tree (weighted average) : 0.576 seconds

./runtest buildTreeTest 10000000 64
build tree (random 2d) :0.1: 0.344 seconds
build tree (kuzmin 2d) :0.1: 1.02 seconds
build tree (random 3d) :0.1: 0.375 seconds
build tree (plummer 3d) :0.1: 0.82 seconds
build tree (weighted average) : 0.64 seconds

./runtest buildTreeTest 10000000 64
build tree (random 2d) :0.1: 0.508 seconds
build tree (kuzmin 2d) :0.1: 1.08 seconds
build tree (random 3d) :0.1: 0.354 seconds
build tree (plummer 3d) :0.1: 0.958 seconds
build tree (weighted average) : 0.725 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 76.5 seconds
Delaunay (random points in kuzmin distribution) :0.1: 79 seconds
Delaunay (weighted average) : 77.7 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 49.4 seconds
Delaunay (random points in kuzmin distribution) :0.1: 51.2 seconds
Delaunay (weighted average) : 50.3 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 25.3 seconds
Delaunay (random points in kuzmin distribution) :0.1: 26.1 seconds
Delaunay (weighted average) : 25.7 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 13.6 seconds
Delaunay (random points in kuzmin distribution) :0.1: 13.7 seconds
Delaunay (weighted average) : 13.7 seconds

./runtest delaunayTest 10000000 16
Delaunay (random points in square) :0.1: 7.89 seconds
Delaunay (random points in kuzmin distribution) :0.1: 8.01 seconds
Delaunay (weighted average) : 7.95 seconds

./runtest delaunayTest 10000000 24
Delaunay (random points in square) :0.1: 6.81 seconds
Delaunay (random points in kuzmin distribution) :0.1: 6.74 seconds
Delaunay (weighted average) : 6.78 seconds

./runtest delaunayTest 10000000 28
Delaunay (random points in square) :0.1: 6.57 seconds
Delaunay (random points in kuzmin distribution) :0.1: 6.74 seconds
Delaunay (weighted average) : 6.65 seconds

./runtest delaunayTest 10000000 32
Delaunay (random points in square) :0.1: 6.3 seconds
Delaunay (random points in kuzmin distribution) :0.1: 6.67 seconds
Delaunay (weighted average) : 6.48 seconds

./runtest delaunayTest 10000000 64
Delaunay (random points in square) :0.1: 7.75 seconds
Delaunay (random points in kuzmin distribution) :0.1: 8.33 seconds
Delaunay (weighted average) : 8.04 seconds

./runtest delaunayTest 10000000 64
Delaunay (random points in square) :0.1: 8.01 seconds
Delaunay (random points in kuzmin distribution) :0.1: 8.38 seconds
Delaunay (weighted average) : 8.2 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 2d, k=1) :0.1: 9.37 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 15.4 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 27.7 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 22.8 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 39 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 40.3 seconds
k-nearest neighbors (weighted average) : 25.7 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 2d, k=1) :0.1: 5.57 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 9.25 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 16.1 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 13.5 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 23.3 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 22.2 seconds
k-nearest neighbors (weighted average) : 15 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 2d, k=1) :0.1: 2.98 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 4.8 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 8.61 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 6.98 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 12.6 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 12 seconds
k-nearest neighbors (weighted average) : 7.98 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 2d, k=1) :0.1: 1.71 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 2.57 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 4.53 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 3.55 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 6.57 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 6.17 seconds
k-nearest neighbors (weighted average) : 4.18 seconds

./runtest nearestNeighborTest 10000000 16
k-nearest neighbors (random 2d, k=1) :0.1: 1.19 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.76 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 2.83 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.07 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.26 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 3.25 seconds
k-nearest neighbors (weighted average) : 2.56 seconds

./runtest nearestNeighborTest 10000000 24
k-nearest neighbors (random 2d, k=1) :0.1: 0.716 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.31 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 2.13 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.38 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 3.79 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.3 seconds
k-nearest neighbors (weighted average) : 1.94 seconds

./runtest nearestNeighborTest 10000000 28
k-nearest neighbors (random 2d, k=1) :0.1: 0.857 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.1 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 1.94 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.27 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 3.8 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.04 seconds
k-nearest neighbors (weighted average) : 1.84 seconds

./runtest nearestNeighborTest 10000000 32
k-nearest neighbors (random 2d, k=1) :0.1: 0.797 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.14 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 1.9 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.07 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.25 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 1.91 seconds
k-nearest neighbors (weighted average) : 1.84 seconds

./runtest nearestNeighborTest 10000000 64
k-nearest neighbors (random 2d, k=1) :0.1: 0.688 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.26 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 1.76 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 0.907 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 3.99 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 1.62 seconds
k-nearest neighbors (weighted average) : 1.7 seconds

./runtest nearestNeighborTest 10000000 64
k-nearest neighbors (random 2d, k=1) :0.1: 0.947 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.05 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 1.9 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 0.921 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.36 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 1.54 seconds
k-nearest neighbors (weighted average) : 1.79 seconds

./runtest spmvTest 1000000 1
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0898 seconds
sparse VM (rMat m = n*20)  :0.1: 0.123 seconds
sparse VM (weighted average) : 0.106 seconds

./runtest spmvTest 1000000 2
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0558 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0747 seconds
sparse VM (weighted average) : 0.0652 seconds

./runtest spmvTest 1000000 4
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0293 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0387 seconds
sparse VM (weighted average) : 0.034 seconds

./runtest spmvTest 1000000 8
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0163 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0218 seconds
sparse VM (weighted average) : 0.019 seconds

./runtest spmvTest 1000000 16
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0161 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0149 seconds
sparse VM (weighted average) : 0.0155 seconds

./runtest spmvTest 1000000 24
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00849 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00949 seconds
sparse VM (weighted average) : 0.00899 seconds

./runtest spmvTest 1000000 28
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00936 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00942 seconds
sparse VM (weighted average) : 0.00939 seconds

./runtest spmvTest 1000000 32
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00986 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00894 seconds
sparse VM (weighted average) : 0.0094 seconds

./runtest spmvTest 1000000 64
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0139 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0181 seconds
sparse VM (weighted average) : 0.016 seconds

./runtest spmvTest 1000000 64
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0234 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0177 seconds
sparse VM (weighted average) : 0.0205 seconds

./runtest nbodyTest 1000000 1
Nbody (Random 3d points) :0.1: 292 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 292 seconds

./runtest nbodyTest 1000000 2
Nbody (Random 3d points) :0.1: 147 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 147 seconds

./runtest nbodyTest 1000000 4
Nbody (Random 3d points) :0.1: 74.5 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 74.5 seconds

./runtest nbodyTest 1000000 8
Nbody (Random 3d points) :0.1: 40.7 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 40.7 seconds

./runtest nbodyTest 1000000 16
Nbody (Random 3d points) :0.1: 23.8 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 23.8 seconds

./runtest nbodyTest 1000000 24
Nbody (Random 3d points) :0.1: 16.6 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 16.6 seconds

./runtest nbodyTest 1000000 28
Nbody (Random 3d points) :0.1: 17.1 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 17.1 seconds

./runtest nbodyTest 1000000 32
Nbody (Random 3d points) :0.1: 14.8 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 14.8 seconds

./runtest nbodyTest 1000000 64
Nbody (Random 3d points) :0.1: 12 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 12 seconds

./runtest nbodyTest 1000000 64
Nbody (Random 3d points) :0.1: 12.6 seconds
  Sampled RMS Error = 0.00208
Nbody (weighted average) : 12.6 seconds

./runtest suffixArrayTest 10000000 1
Radix sort time: 1.69441
Merge time: 1.69029
LCP time: 0
Suffix Array (trigram string) :0.3: 5.19 seconds
Radix sort time: 0.437
Merge time: 0.384
LCP time: 0
Suffix Array (equal string) :0.1: 1.71 seconds
Radix sort time: 0.741
Merge time: 1.07
LCP time: 0
Suffix Array (repeated string) :0.1: 3.4 seconds
Suffix Array (weighted average) : 4.14 seconds

./runtest suffixArrayTest 10000000 2
Radix sort time: 0.980225
Merge time: 0.949837
LCP time: 0
Suffix Array (trigram string) :0.3: 2.96 seconds
Radix sort time: 0.322
Merge time: 0.223
LCP time: 0
Suffix Array (equal string) :0.1: 1.15 seconds
Radix sort time: 0.465
Merge time: 0.761
LCP time: 0
Suffix Array (repeated string) :0.1: 2.34 seconds
Suffix Array (weighted average) : 2.48 seconds

./runtest suffixArrayTest 10000000 4
Radix sort time: 0.48727
Merge time: 0.448534
LCP time: 0
Suffix Array (trigram string) :0.3: 1.46 seconds
Radix sort time: 0.181
Merge time: 0.11
LCP time: 0
Suffix Array (equal string) :0.1: 0.59 seconds
Radix sort time: 0.252
Merge time: 0.45
LCP time: 0
Suffix Array (repeated string) :0.1: 1.33 seconds
Suffix Array (weighted average) : 1.26 seconds

./runtest suffixArrayTest 10000000 8
Radix sort time: 0.255522
Merge time: 0.218487
LCP time: 0
Suffix Array (trigram string) :0.3: 0.749 seconds
Radix sort time: 0.118
Merge time: 0.052
LCP time: 0
Suffix Array (equal string) :0.1: 0.319 seconds
Radix sort time: 0.14
Merge time: 0.234
LCP time: 0
Suffix Array (repeated string) :0.1: 0.764 seconds
Suffix Array (weighted average) : 0.666 seconds

./runtest suffixArrayTest 10000000 16
Radix sort time: 0.204946
Merge time: 0.14038
LCP time: 0
Suffix Array (trigram string) :0.3: 0.562 seconds
Radix sort time: 0.136
Merge time: 0.0349
LCP time: 0
Suffix Array (equal string) :0.1: 0.302 seconds
Radix sort time: 0.134
Merge time: 0.13
LCP time: 0
Suffix Array (repeated string) :0.1: 0.531 seconds
Suffix Array (weighted average) : 0.504 seconds

./runtest suffixArrayTest 10000000 24
Radix sort time: 0.235218
Merge time: 0.0991905
LCP time: 0
Suffix Array (trigram string) :0.3: 0.555 seconds
Radix sort time: 0.129
Merge time: 0.0326
LCP time: 0
Suffix Array (equal string) :0.1: 0.273 seconds
Radix sort time: 0.15
Merge time: 0.12
LCP time: 0
Suffix Array (repeated string) :0.1: 0.557 seconds
Suffix Array (weighted average) : 0.499 seconds

./runtest suffixArrayTest 10000000 28
Radix sort time: 0.178499
Merge time: 0.0764883
LCP time: 0
Suffix Array (trigram string) :0.3: 0.457 seconds
Radix sort time: 0.131
Merge time: 0.0229
LCP time: 0
Suffix Array (equal string) :0.1: 0.264 seconds
Radix sort time: 0.132
Merge time: 0.0817
LCP time: 0
Suffix Array (repeated string) :0.1: 0.438 seconds
Suffix Array (weighted average) : 0.415 seconds

./runtest suffixArrayTest 10000000 32
Radix sort time: 0.171267
Merge time: 0.067965
LCP time: 0
Suffix Array (trigram string) :0.3: 0.435 seconds
Radix sort time: 0.132
Merge time: 0.0214
LCP time: 0
Suffix Array (equal string) :0.1: 0.259 seconds
Radix sort time: 0.126
Merge time: 0.0634
LCP time: 0
Suffix Array (repeated string) :0.1: 0.382 seconds
Suffix Array (weighted average) : 0.389 seconds

./runtest suffixArrayTest 10000000 64
Radix sort time: 0.243097
Merge time: 0.0773082
LCP time: 0
Suffix Array (trigram string) :0.3: 0.651 seconds
Radix sort time: 0.278
Merge time: 0.036
LCP time: 0
Suffix Array (equal string) :0.1: 0.565 seconds
Radix sort time: 0.252
Merge time: 0.0769
LCP time: 0
Suffix Array (repeated string) :0.1: 0.758 seconds
Suffix Array (weighted average) : 0.655 seconds

./runtest suffixArrayTest 10000000 64
Radix sort time: 0.186641
Merge time: 0.079143
LCP time: 0
Suffix Array (trigram string) :0.3: 0.491 seconds
Radix sort time: 0.232
Merge time: 0.024
LCP time: 0
Suffix Array (equal string) :0.1: 0.396 seconds
Radix sort time: 0.212
Merge time: 0.0725
LCP time: 0
Suffix Array (repeated string) :0.1: 0.547 seconds
Suffix Array (weighted average) : 0.483 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 6.94 seconds
Convex Hull (random in unit circle) :0.3: 0.703 seconds
Convex Hull (random projected Parabola) :0.3: 0.623 seconds
Convex Hull (weighted average) : 1.56 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 3.62 seconds
Convex Hull (random in unit circle) :0.3: 0.427 seconds
Convex Hull (random projected Parabola) :0.3: 0.392 seconds
Convex Hull (weighted average) : 0.868 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 1.8 seconds
Convex Hull (random in unit circle) :0.3: 0.218 seconds
Convex Hull (random projected Parabola) :0.3: 0.201 seconds
Convex Hull (weighted average) : 0.437 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 0.997 seconds
Convex Hull (random in unit circle) :0.3: 0.126 seconds
Convex Hull (random projected Parabola) :0.3: 0.117 seconds
Convex Hull (weighted average) : 0.247 seconds

./runtest hullTest 10000000 16
Convex Hull (random on unit circle) :0.1: 0.756 seconds
Convex Hull (random in unit circle) :0.3: 0.112 seconds
Convex Hull (random projected Parabola) :0.3: 0.108 seconds
Convex Hull (weighted average) : 0.202 seconds

./runtest hullTest 10000000 24
Convex Hull (random on unit circle) :0.1: 0.627 seconds
Convex Hull (random in unit circle) :0.3: 0.115 seconds
Convex Hull (random projected Parabola) :0.3: 0.116 seconds
Convex Hull (weighted average) : 0.189 seconds

./runtest hullTest 10000000 28
Convex Hull (random on unit circle) :0.1: 0.643 seconds
Convex Hull (random in unit circle) :0.3: 0.117 seconds
Convex Hull (random projected Parabola) :0.3: 0.0991 seconds
Convex Hull (weighted average) : 0.184 seconds

./runtest hullTest 10000000 32
Convex Hull (random on unit circle) :0.1: 0.643 seconds
Convex Hull (random in unit circle) :0.3: 0.127 seconds
Convex Hull (random projected Parabola) :0.3: 0.106 seconds
Convex Hull (weighted average) : 0.192 seconds

./runtest hullTest 10000000 64
Convex Hull (random on unit circle) :0.1: 0.706 seconds
Convex Hull (random in unit circle) :0.3: 0.115 seconds
Convex Hull (random projected Parabola) :0.3: 0.105 seconds
Convex Hull (weighted average) : 0.195 seconds

./runtest hullTest 10000000 64
Convex Hull (random on unit circle) :0.1: 0.661 seconds
Convex Hull (random in unit circle) :0.3: 0.14 seconds
Convex Hull (random projected Parabola) :0.3: 0.116 seconds
Convex Hull (weighted average) : 0.204 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 7.85 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 14.8 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 11.7 seconds
Minimum Spanning Tree (weighted average) : 11.5 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.49 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 9.1 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 7.21 seconds
Minimum Spanning Tree (weighted average) : 6.93 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 2.32 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 4.74 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 3.71 seconds
Minimum Spanning Tree (weighted average) : 3.59 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.26 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 2.58 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.93 seconds
Minimum Spanning Tree (weighted average) : 1.92 seconds

./runtest mstTest 10000000 16
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.991 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.96 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.38 seconds
Minimum Spanning Tree (weighted average) : 1.44 seconds

./runtest mstTest 10000000 24
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.717 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.61 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.988 seconds
Minimum Spanning Tree (weighted average) : 1.11 seconds

./runtest mstTest 10000000 28
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.708 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.59 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.951 seconds
Minimum Spanning Tree (weighted average) : 1.08 seconds

./runtest mstTest 10000000 32
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.736 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.21 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.87 seconds
Minimum Spanning Tree (weighted average) : 0.939 seconds

./runtest mstTest 10000000 64
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.811 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.28 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.918 seconds
Minimum Spanning Tree (weighted average) : 1 seconds

./runtest mstTest 10000000 64
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.796 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.15 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.922 seconds
Minimum Spanning Tree (weighted average) : 0.957 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.39 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 9.38 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 7.74 seconds
Minimum Spanning Tree (weighted average) : 7.17 seconds
