HOSTNAME: monster
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 81
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 80
Last Changed Date: 2010-08-31 01:02:32 -0400 (Tue, 31 Aug 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.211 seconds
map (double, +1) : 0.35 seconds
map (char, +1)  : 0.2 seconds
map (char, isalpha) : 0.468 seconds
reduce (double, add) : 0.244 seconds
map reduce (char, add) : 0.226 seconds
max Index (double) : 0.232 seconds
scan (double, add, inplace) : 0.545 seconds
scan (double, add) : 0.598 seconds
scanI (double, add) : 0.725 seconds
scan (int, max) : 0.426 seconds
sequential scan (double, add) : 0.344 seconds
sequential scan (int, max) : 0.222 seconds
filter (double, odd) : 0.583 seconds
pack (double, odd) : 0.448 seconds
gather (int) : 2.72 seconds
gather (double) : 2.9 seconds
scatter (int) : 2.88 seconds
scatter (double) : 3.05 seconds
scatter contended (10^6) : 0.875 seconds
scatter contended (10^5) : 0.666 seconds
scatter CAS (int) : 14.4 seconds
scatter CAS contended (10^6) : 2.48 seconds
scatter CAS contended conditional (10^6) : 0.927 seconds
scatter CAS contended (10^5) : 1.72 seconds
scatter CAS contended conditional (10^5) : 0.794 seconds
partition : 0.211 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.14 seconds
map (double, +1) : 0.194 seconds
map (char, +1)  : 0.102 seconds
map (char, isalpha) : 0.346 seconds
reduce (double, add) : 0.123 seconds
map reduce (char, add) : 0.113 seconds
max Index (double) : 0.12 seconds
scan (double, add, inplace) : 0.334 seconds
scan (double, add) : 0.366 seconds
scanI (double, add) : 0.404 seconds
scan (int, max) : 0.228 seconds
sequential scan (double, add) : 0.4 seconds
sequential scan (int, max) : 0.258 seconds
filter (double, odd) : 0.314 seconds
pack (double, odd) : 0.287 seconds
gather (int) : 1.51 seconds
gather (double) : 1.47 seconds
scatter (int) : 1.54 seconds
scatter (double) : 1.56 seconds
scatter contended (10^6) : 0.732 seconds
scatter contended (10^5) : 0.793 seconds
scatter CAS (int) : 7.85 seconds
scatter CAS contended (10^6) : 3.39 seconds
scatter CAS contended conditional (10^6) : 1.04 seconds
scatter CAS contended (10^5) : 3.55 seconds
scatter CAS contended conditional (10^5) : 1.12 seconds
partition : 0.249 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.0684 seconds
map (double, +1) : 0.113 seconds
map (char, +1)  : 0.0511 seconds
map (char, isalpha) : 0.173 seconds
reduce (double, add) : 0.0899 seconds
map reduce (char, add) : 0.0565 seconds
max Index (double) : 0.0748 seconds
scan (double, add, inplace) : 0.163 seconds
scan (double, add) : 0.205 seconds
scanI (double, add) : 0.231 seconds
scan (int, max) : 0.121 seconds
sequential scan (double, add) : 0.441 seconds
sequential scan (int, max) : 0.264 seconds
filter (double, odd) : 0.189 seconds
pack (double, odd) : 0.157 seconds
gather (int) : 0.761 seconds
gather (double) : 0.816 seconds
scatter (int) : 0.828 seconds
scatter (double) : 0.855 seconds
scatter contended (10^6) : 0.414 seconds
scatter contended (10^5) : 0.464 seconds
scatter CAS (int) : 4.21 seconds
scatter CAS contended (10^6) : 2.32 seconds
scatter CAS contended conditional (10^6) : 0.587 seconds
scatter CAS contended (10^5) : 2.59 seconds
scatter CAS contended conditional (10^5) : 0.654 seconds
partition : 0.268 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0422 seconds
map (double, +1) : 0.0702 seconds
map (char, +1)  : 0.0267 seconds
map (char, isalpha) : 0.0608 seconds
reduce (double, add) : 0.0427 seconds

./runtest sequenceTest 100000000 16
tabulate (double) : 0.036 seconds
map (double, +1) : 0.0582 seconds
map (char, +1)  : 0.0137 seconds
map (char, isalpha) : 0.031 seconds
reduce (double, add) : 0.0252 seconds
map reduce (char, add) : 0.0143 seconds
max Index (double) : 0.0246 seconds
scan (double, add, inplace) : 0.0669 seconds
scan (double, add) : 0.0771 seconds
scanI (double, add) : 0.0837 seconds
scan (int, max) : 0.0465 seconds
sequential scan (double, add) : 0.531 seconds
sequential scan (int, max) : 0.283 seconds
filter (double, odd) : 0.0693 seconds
pack (double, odd) : 0.0551 seconds
gather (int) : 0.198 seconds
gather (double) : 0.214 seconds
scatter (int) : 0.292 seconds
scatter (double) : 0.288 seconds
scatter contended (10^6) : 0.171 seconds
scatter contended (10^5) : 0.184 seconds
scatter CAS (int) : 1.04 seconds
scatter CAS contended (10^6) : 0.678 seconds
scatter CAS contended conditional (10^6) : 0.181 seconds
scatter CAS contended (10^5) : 0.734 seconds
scatter CAS contended conditional (10^5) : 0.242 seconds
partition : 0.277 seconds

./runtest sequenceTest 100000000 24
tabulate (double) : 0.0342 seconds
map (double, +1) : 0.0521 seconds
map (char, +1)  : 0.00961 seconds
map (char, isalpha) : 0.0202 seconds
reduce (double, add) : 0.0201 seconds
map reduce (char, add) : 0.00966 seconds
max Index (double) : 0.0196 seconds
scan (double, add, inplace) : 0.0535 seconds
scan (double, add) : 0.0711 seconds
scanI (double, add) : 0.0707 seconds
scan (int, max) : 0.0384 seconds
sequential scan (double, add) : 0.443 seconds
sequential scan (int, max) : 0.268 seconds
filter (double, odd) : 0.0634 seconds
pack (double, odd) : 0.0473 seconds
gather (int) : 0.146 seconds
gather (double) : 0.161 seconds
scatter (int) : 0.258 seconds
scatter (double) : 0.272 seconds
scatter contended (10^6) : 0.173 seconds
scatter contended (10^5) : 0.188 seconds
scatter CAS (int) : 0.695 seconds
scatter CAS contended (10^6) : 0.473 seconds
scatter CAS contended conditional (10^6) : 0.17 seconds
scatter CAS contended (10^5) : 0.498 seconds
scatter CAS contended conditional (10^5) : 0.225 seconds
partition : 0.274 seconds

./runtest sequenceTest 100000000 28
tabulate (double) : 0.0339 seconds
map (double, +1) : 0.0497 seconds
map (char, +1)  : 0.0114 seconds
map (char, isalpha) : 0.0176 seconds
reduce (double, add) : 0.0187 seconds
map reduce (char, add) : 0.00835 seconds
max Index (double) : 0.0183 seconds
scan (double, add, inplace) : 0.053 seconds
scan (double, add) : 0.072 seconds
scanI (double, add) : 0.0733 seconds
scan (int, max) : 0.037 seconds
sequential scan (double, add) : 0.437 seconds
sequential scan (int, max) : 0.636 seconds
filter (double, odd) : 0.0745 seconds
pack (double, odd) : 0.0435 seconds
gather (int) : 0.135 seconds
gather (double) : 0.152 seconds
scatter (int) : 0.234 seconds
scatter (double) : 0.267 seconds
scatter contended (10^6) : 0.175 seconds
scatter contended (10^5) : 0.191 seconds
scatter CAS (int) : 0.599 seconds
scatter CAS contended (10^6) : 0.412 seconds
scatter CAS contended conditional (10^6) : 0.171 seconds
scatter CAS contended (10^5) : 0.43 seconds
scatter CAS contended conditional (10^5) : 0.23 seconds
partition : 0.277 seconds

./runtest sequenceTest 100000000 32
tabulate (double) : 0.0334 seconds
map (double, +1) : 0.0494 seconds
map (char, +1)  : 0.00819 seconds
map (char, isalpha) : 0.0155 seconds
reduce (double, add) : 0.0181 seconds
map reduce (char, add) : 0.0075 seconds
max Index (double) : 0.0184 seconds
scan (double, add, inplace) : 0.0504 seconds
scan (double, add) : 0.0677 seconds
scanI (double, add) : 0.0694 seconds
scan (int, max) : 0.0366 seconds
sequential scan (double, add) : 0.442 seconds
sequential scan (int, max) : 0.269 seconds
filter (double, odd) : 0.0585 seconds
pack (double, odd) : 0.042 seconds
gather (int) : 0.13 seconds
gather (double) : 0.153 seconds
scatter (int) : 0.262 seconds
scatter (double) : 0.265 seconds
scatter contended (10^6) : 0.179 seconds
scatter contended (10^5) : 0.195 seconds
scatter CAS (int) : 0.529 seconds
scatter CAS contended (10^6) : 0.364 seconds
scatter CAS contended conditional (10^6) : 0.174 seconds
scatter CAS contended (10^5) : 0.378 seconds
scatter CAS contended conditional (10^5) : 0.242 seconds
partition : 0.275 seconds

./runtest mergeTest 100000000 1
Merge : 0.298 seconds

./runtest mergeTest 100000000 2
Merge : 0.209 seconds

./runtest mergeTest 100000000 4
Merge : 0.183 seconds

./runtest mergeTest 100000000 8
Merge : 0.179 seconds

./runtest mergeTest 100000000 16
Merge : 0.18 seconds

./runtest mergeTest 100000000 24
Merge : 0.181 seconds

./runtest mergeTest 100000000 28
Merge : 0.183 seconds

./runtest mergeTest 100000000 32
Merge : 0.184 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 11.5 seconds
Random Permutation (4 x double) :0.1: 16.4 seconds
Random Permutation (weighted average) : 13.9 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 6.68 seconds
Random Permutation (4 x double) :0.1: 9.16 seconds
Random Permutation (weighted average) : 7.92 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 3.58 seconds
Random Permutation (4 x double) :0.1: 4.96 seconds
Random Permutation (weighted average) : 4.27 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 1.94 seconds
Random Permutation (4 x double) :0.1: 3.52 seconds
Random Permutation (weighted average) : 2.73 seconds

./runtest randPermTest 100000000 16
Random Permutation (int) :0.1: 1.16 seconds
Random Permutation (4 x double) :0.1: 2.87 seconds
Random Permutation (weighted average) : 2.02 seconds

./runtest randPermTest 100000000 24
Random Permutation (int) :0.1: 0.987 seconds
Random Permutation (4 x double) :0.1: 2.78 seconds
Random Permutation (weighted average) : 1.88 seconds

./runtest randPermTest 100000000 28
Random Permutation (int) :0.1: 0.953 seconds
Random Permutation (4 x double) :0.1: 2.81 seconds
Random Permutation (weighted average) : 1.88 seconds

./runtest randPermTest 100000000 32
Random Permutation (int) :0.1: 0.935 seconds
Random Permutation (4 x double) :0.1: 2.8 seconds
Random Permutation (weighted average) : 1.87 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 4.91 seconds
Integer Sort (32 bit, exponential) :0.1: 4.18 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 1.06 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 7.4 seconds
Integer Sort (weighted average) : 4.99 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 2.78 seconds
Integer Sort (32 bit, exponential) :0.1: 2.47 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.608 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 4.46 seconds
Integer Sort (weighted average) : 2.96 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 1.52 seconds
Integer Sort (32 bit, exponential) :0.1: 1.39 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.365 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.5 seconds
Integer Sort (weighted average) : 1.66 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.767 seconds
Integer Sort (32 bit, exponential) :0.1: 0.721 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.183 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.28 seconds
Integer Sort (weighted average) : 0.848 seconds

./runtest intSortTest 100000000 16
Integer Sort (32 bit, random) :0.1: 0.453 seconds
Integer Sort (32 bit, exponential) :0.1: 0.425 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.11 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.752 seconds
Integer Sort (weighted average) : 0.498 seconds

./runtest intSortTest 100000000 24
Integer Sort (32 bit, random) :0.1: 0.419 seconds
Integer Sort (32 bit, exponential) :0.1: 0.42 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.108 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.629 seconds
Integer Sort (weighted average) : 0.441 seconds

./runtest intSortTest 100000000 28
Integer Sort (32 bit, random) :0.1: 0.337 seconds
Integer Sort (32 bit, exponential) :0.1: 0.307 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0797 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.984 seconds
Integer Sort (weighted average) : 0.539 seconds

./runtest intSortTest 100000000 32
Integer Sort (32 bit, random) :0.1: 0.322 seconds
Integer Sort (32 bit, exponential) :0.1: 0.319 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0811 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.612 seconds
Integer Sort (weighted average) : 0.389 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 16.7 seconds
Comparison Sort (double, exponential) :0.1: 10.2 seconds
Comparison Sort (double, almost sorted) :0.1: 3.88 seconds
Comparison Sort (trigram strings adjacent) :0.2: 57.1 seconds
randPerm : 12.1 seconds
Comparison Sort (trigram strings, random layout) :0.2: 77.9 seconds
Comparison Sort (double with 4 x double payload) :0.3: 24.4 seconds
Comparison Sort (weighted average) : 49.5 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 9.26 seconds
Comparison Sort (double, exponential) :0.1: 5.39 seconds
Comparison Sort (double, almost sorted) :0.1: 2.34 seconds
Comparison Sort (trigram strings adjacent) :0.2: 33.4 seconds
randPerm : 6.85 seconds
Comparison Sort (trigram strings, random layout) :0.2: 48 seconds
Comparison Sort (double with 4 x double payload) :0.3: 13.5 seconds
Comparison Sort (weighted average) : 28.9 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 5.23 seconds
Comparison Sort (double, exponential) :0.1: 3.13 seconds
Comparison Sort (double, almost sorted) :0.1: 1.49 seconds
Comparison Sort (trigram strings adjacent) :0.2: 18.2 seconds
randPerm : 3.66 seconds
Comparison Sort (trigram strings, random layout) :0.2: 28.6 seconds
Comparison Sort (double with 4 x double payload) :0.3: 8.34 seconds
Comparison Sort (weighted average) : 16.5 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.18 seconds
Comparison Sort (double, exponential) :0.1: 2.22 seconds
Comparison Sort (double, almost sorted) :0.1: 1.07 seconds
Comparison Sort (trigram strings adjacent) :0.2: 11.8 seconds
randPerm : 2.19 seconds
Comparison Sort (trigram strings, random layout) :0.2: 24.7 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.49 seconds
Comparison Sort (weighted average) : 12.1 seconds

./runtest quickSortTest 100000000 16
Comparison Sort (double, random) :0.1: 2.29 seconds
Comparison Sort (double, exponential) :0.1: 2.05 seconds
Comparison Sort (double, almost sorted) :0.1: 1.02 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.1 seconds
randPerm : 1.9 seconds
Comparison Sort (trigram strings, random layout) :0.2: 21.6 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.04 seconds
Comparison Sort (weighted average) : 10.4 seconds

./runtest quickSortTest 100000000 24
Comparison Sort (double, random) :0.1: 2.02 seconds
Comparison Sort (double, exponential) :0.1: 2.07 seconds
Comparison Sort (double, almost sorted) :0.1: 1.16 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.53 seconds
randPerm : 1.84 seconds
Comparison Sort (trigram strings, random layout) :0.2: 21.5 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.53 seconds
Comparison Sort (weighted average) : 10.5 seconds

./runtest quickSortTest 100000000 28
Comparison Sort (double, random) :0.1: 2 seconds
Comparison Sort (double, exponential) :0.1: 2.09 seconds
Comparison Sort (double, almost sorted) :0.1: 1.07 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.31 seconds
randPerm : 1.86 seconds
Comparison Sort (trigram strings, random layout) :0.2: 22.5 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.59 seconds
Comparison Sort (weighted average) : 10.7 seconds

./runtest quickSortTest 100000000 32
Comparison Sort (double, random) :0.1: 1.99 seconds
Comparison Sort (double, exponential) :0.1: 2.05 seconds
Comparison Sort (double, almost sorted) :0.1: 1.19 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.51 seconds
randPerm : 1.87 seconds
Comparison Sort (trigram strings, random layout) :0.2: 20.6 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.62 seconds
Comparison Sort (weighted average) : 10.4 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 20.2 seconds
Comparison Sort (double, exponential) :0.1: 13.8 seconds
Comparison Sort (double, almost sorted) :0.1: 5.61 seconds
Comparison Sort (trigram strings adjacent) :0.2: 34.1 seconds
randPerm : 11.6 seconds
Comparison Sort (trigram strings, random layout) :0.2: 53.4 seconds
Comparison Sort (double with 4 x double payload) :0.3: 29 seconds
Comparison Sort (weighted average) : 41.7 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 10.9 seconds
Comparison Sort (double, exponential) :0.1: 7.24 seconds
Comparison Sort (double, almost sorted) :0.1: 3.11 seconds
Comparison Sort (trigram strings adjacent) :0.2: 17.7 seconds
randPerm : 6.58 seconds
Comparison Sort (trigram strings, random layout) :0.2: 27.8 seconds
Comparison Sort (double with 4 x double payload) :0.3: 15.4 seconds
Comparison Sort (weighted average) : 22.4 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 5.77 seconds
Comparison Sort (double, exponential) :0.1: 3.73 seconds
Comparison Sort (double, almost sorted) :0.1: 1.65 seconds
Comparison Sort (trigram strings adjacent) :0.2: 9.1 seconds
randPerm : 3.39 seconds
Comparison Sort (trigram strings, random layout) :0.2: 14 seconds
Comparison Sort (double with 4 x double payload) :0.3: 7.93 seconds
Comparison Sort (weighted average) : 11.5 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.02 seconds
Comparison Sort (double, exponential) :0.1: 2.14 seconds
Comparison Sort (double, almost sorted) :0.1: 0.957 seconds
Comparison Sort (trigram strings adjacent) :0.2: 4.66 seconds
randPerm : 1.83 seconds
Comparison Sort (trigram strings, random layout) :0.2: 7.07 seconds
Comparison Sort (double with 4 x double payload) :0.3: 4.3 seconds
Comparison Sort (weighted average) : 6.07 seconds

./runtest sampleSortTest 100000000 16
Comparison Sort (double, random) :0.1: 1.69 seconds
Comparison Sort (double, exponential) :0.1: 1.19 seconds
Comparison Sort (double, almost sorted) :0.1: 0.65 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.53 seconds
randPerm : 1.14 seconds
Comparison Sort (trigram strings, random layout) :0.2: 3.68 seconds
Comparison Sort (double with 4 x double payload) :0.3: 2.88 seconds
Comparison Sort (weighted average) : 3.6 seconds

./runtest sampleSortTest 100000000 24
Comparison Sort (double, random) :0.1: 1.28 seconds
Comparison Sort (double, exponential) :0.1: 0.853 seconds
Comparison Sort (double, almost sorted) :0.1: 0.387 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.89 seconds
randPerm : 0.999 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.74 seconds
Comparison Sort (double with 4 x double payload) :0.3: 2.43 seconds
Comparison Sort (weighted average) : 2.91 seconds

./runtest sampleSortTest 100000000 28
Comparison Sort (double, random) :0.1: 1.16 seconds
Comparison Sort (double, exponential) :0.1: 0.771 seconds
Comparison Sort (double, almost sorted) :0.1: 0.535 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.75 seconds
randPerm : 0.971 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.51 seconds
Comparison Sort (double with 4 x double payload) :0.3: 2.37 seconds
Comparison Sort (weighted average) : 2.78 seconds

./runtest sampleSortTest 100000000 32
Comparison Sort (double, random) :0.1: 1.08 seconds
Comparison Sort (double, exponential) :0.1: 0.727 seconds
Comparison Sort (double, almost sorted) :0.1: 0.529 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.59 seconds
randPerm : 2.04 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.79 seconds
Comparison Sort (double with 4 x double payload) :0.3: 2.25 seconds
Comparison Sort (weighted average) : 3.82 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 15.8 seconds
Comparison Sort (double, exponential) :0.1: 10.8 seconds
Comparison Sort (double, almost sorted) :0.1: 3.31 seconds
Comparison Sort (trigram strings adjacent) :0.2: 73.4 seconds
randPerm : 11.8 seconds
Comparison Sort (trigram strings, random layout) :0.2: 102 seconds
Comparison Sort (double with 4 x double payload) :0.3: 19.3 seconds
Comparison Sort (weighted average) : 55.6 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.946 seconds
Remove Duplicates (int, exponential) :0.1: 0.69 seconds
Remove Duplicates (trigram strings) :0.2: 1.29 seconds
Remove Duplicates (weighted average) : 1.05 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.544 seconds
Remove Duplicates (int, exponential) :0.1: 0.377 seconds
Remove Duplicates (trigram strings) :0.2: 0.724 seconds
Remove Duplicates (weighted average) : 0.592 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.293 seconds
Remove Duplicates (int, exponential) :0.1: 0.193 seconds
Remove Duplicates (trigram strings) :0.2: 0.383 seconds
Remove Duplicates (weighted average) : 0.313 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.148 seconds
Remove Duplicates (int, exponential) :0.1: 0.132 seconds
Remove Duplicates (trigram strings) :0.2: 0.225 seconds
Remove Duplicates (weighted average) : 0.182 seconds

./runtest remDuplicatesTest 10000000 16
Remove Duplicates (int, random in n) :0.1: 0.079 seconds
Remove Duplicates (int, exponential) :0.1: 0.0529 seconds
Remove Duplicates (trigram strings) :0.2: 0.161 seconds
Remove Duplicates (weighted average) : 0.113 seconds

./runtest remDuplicatesTest 10000000 24
Remove Duplicates (int, random in n) :0.1: 0.0593 seconds
Remove Duplicates (int, exponential) :0.1: 0.0854 seconds
Remove Duplicates (trigram strings) :0.2: 0.136 seconds
Remove Duplicates (weighted average) : 0.104 seconds

./runtest remDuplicatesTest 10000000 28
Remove Duplicates (int, random in n) :0.1: 0.0594 seconds
Remove Duplicates (int, exponential) :0.1: 0.0396 seconds
Remove Duplicates (trigram strings) :0.2: 0.129 seconds
Remove Duplicates (weighted average) : 0.0894 seconds

./runtest remDuplicatesTest 10000000 32
Remove Duplicates (int, random in n) :0.1: 0.0566 seconds
Remove Duplicates (int, exponential) :0.1: 0.0369 seconds
Remove Duplicates (trigram strings) :0.2: 0.126 seconds
Remove Duplicates (weighted average) : 0.0865 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 1.12 seconds
Table (trigram words, insert and find) :0.2: 1.74 seconds
Table (weighted average) : 1.53 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.645 seconds
Table (trigram words, insert and find) :0.2: 0.95 seconds
Table (weighted average) : 0.848 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.34 seconds
Table (trigram words, insert and find) :0.2: 0.478 seconds
Table (weighted average) : 0.432 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.169 seconds
Table (trigram words, insert and find) :0.2: 0.246 seconds
Table (weighted average) : 0.22 seconds

./runtest tableTest 10000000 16
Table (random in n, insert and find) :0.1: 0.103 seconds
Table (trigram words, insert and find) :0.2: 0.137 seconds
Table (weighted average) : 0.126 seconds

./runtest tableTest 10000000 24
Table (random in n, insert and find) :0.1: 0.0601 seconds
Table (trigram words, insert and find) :0.2: 0.102 seconds
Table (weighted average) : 0.0882 seconds

./runtest tableTest 10000000 28
Table (random in n, insert and find) :0.1: 0.0701 seconds
Table (trigram words, insert and find) :0.2: 0.0969 seconds
Table (weighted average) : 0.0879 seconds

./runtest tableTest 10000000 32
Table (random in n, insert and find) :0.1: 0.0652 seconds
Table (trigram words, insert and find) :0.2: 0.0918 seconds
Table (weighted average) : 0.0829 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 2.13 seconds
Maximal Independent Set (2d grid) :0.2: 0.914 seconds
Maximal Independent Set (weighted average) : 1.32 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.899 seconds
Maximal Independent Set (2d grid) :0.2: 0.466 seconds
Maximal Independent Set (weighted average) : 0.61 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.526 seconds
Maximal Independent Set (2d grid) :0.2: 0.265 seconds
Maximal Independent Set (weighted average) : 0.352 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.271 seconds
Maximal Independent Set (2d grid) :0.2: 0.154 seconds
Maximal Independent Set (weighted average) : 0.193 seconds

./runtest maxIndSetTest 10000000 16
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.16 seconds
Maximal Independent Set (2d grid) :0.2: 0.0807 seconds
Maximal Independent Set (weighted average) : 0.107 seconds

./runtest maxIndSetTest 10000000 24
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.115 seconds
Maximal Independent Set (2d grid) :0.2: 0.0814 seconds
Maximal Independent Set (weighted average) : 0.0924 seconds

./runtest maxIndSetTest 10000000 28
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.116 seconds
Maximal Independent Set (2d grid) :0.2: 0.0715 seconds
Maximal Independent Set (weighted average) : 0.0862 seconds

./runtest maxIndSetTest 10000000 32
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.11 seconds
Maximal Independent Set (2d grid) :0.2: 0.0779 seconds
Maximal Independent Set (weighted average) : 0.0884 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 7.86 seconds
Color Graph (2d grid) :0.1: 2.17 seconds
Color Graph (weighted average) : 5.01 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 3.61 seconds
Color Graph (2d grid) :0.1: 1.04 seconds
Color Graph (weighted average) : 2.33 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.96 seconds
Color Graph (2d grid) :0.1: 0.577 seconds
Color Graph (weighted average) : 1.27 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 1.04 seconds
Color Graph (2d grid) :0.1: 0.318 seconds
Color Graph (weighted average) : 0.677 seconds

./runtest colorGraphTest 10000000 16
Color Graph (rand dim=2, m=n*10) :0.1: 0.571 seconds
Color Graph (2d grid) :0.1: 0.188 seconds
Color Graph (weighted average) : 0.38 seconds

./runtest colorGraphTest 10000000 24
Color Graph (rand dim=2, m=n*10) :0.1: 0.444 seconds
Color Graph (2d grid) :0.1: 0.182 seconds
Color Graph (weighted average) : 0.313 seconds

./runtest colorGraphTest 10000000 28
Color Graph (rand dim=2, m=n*10) :0.1: 0.408 seconds
Color Graph (2d grid) :0.1: 0.145 seconds
Color Graph (weighted average) : 0.276 seconds

./runtest colorGraphTest 10000000 32
Color Graph (rand dim=2, m=n*10) :0.1: 0.385 seconds
Color Graph (2d grid) :0.1: 0.165 seconds
Color Graph (weighted average) : 0.275 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 1.2 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 2.22 seconds
Maximal Matching (2d mesh) :0.1: 1.81 seconds
Maximal Matching (weighted average) : 1.74 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.709 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.37 seconds
Maximal Matching (2d mesh) :0.1: 1.14 seconds
Maximal Matching (weighted average) : 1.07 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.391 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.81 seconds
Maximal Matching (2d mesh) :0.1: 0.648 seconds
Maximal Matching (weighted average) : 0.616 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.215 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.455 seconds
Maximal Matching (2d mesh) :0.1: 0.381 seconds
Maximal Matching (weighted average) : 0.35 seconds

./runtest maxMatchingTest 10000000 16
Maximal Matching (tree rand parent) :0.1: 0.145 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.284 seconds
Maximal Matching (2d mesh) :0.1: 0.266 seconds
Maximal Matching (weighted average) : 0.232 seconds

./runtest maxMatchingTest 10000000 24
Maximal Matching (tree rand parent) :0.1: 0.122 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.273 seconds
Maximal Matching (2d mesh) :0.1: 0.248 seconds
Maximal Matching (weighted average) : 0.214 seconds

./runtest maxMatchingTest 10000000 28
Maximal Matching (tree rand parent) :0.1: 0.117 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.262 seconds
Maximal Matching (2d mesh) :0.1: 0.244 seconds
Maximal Matching (weighted average) : 0.208 seconds

./runtest maxMatchingTest 10000000 32
Maximal Matching (tree rand parent) :0.1: 0.129 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.261 seconds
Maximal Matching (2d mesh) :0.1: 0.244 seconds
Maximal Matching (weighted average) : 0.211 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 17.8 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 50.5 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 34.2 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 10.6 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 28.1 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 19.3 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 5.88 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 15 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 10.4 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 3.26 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 7.9 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 5.58 seconds

./runtest separatorTest 10000000 16
Separator (2d mesh) :0.1: 2.12 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 4.37 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 3.25 seconds

./runtest separatorTest 10000000 24
Separator (2d mesh) :0.1: 1.82 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.64 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.73 seconds

./runtest separatorTest 10000000 28
Separator (2d mesh) :0.1: 1.75 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.29 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.52 seconds

./runtest separatorTest 10000000 32
Separator (2d mesh) :0.1: 1.82 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.34 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.58 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 4.06 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.99 seconds
BFS (weighted average) : 3.71 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 2.44 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.24 seconds
BFS (weighted average) : 2.37 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.3 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.48 seconds
BFS (weighted average) : 1.36 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.662 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.802 seconds
BFS (weighted average) : 0.709 seconds

./runtest bfsTest 10000000 16
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.368 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.502 seconds
BFS (weighted average) : 0.413 seconds

./runtest bfsTest 10000000 24
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.266 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.409 seconds
BFS (weighted average) : 0.314 seconds

./runtest bfsTest 10000000 28
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.227 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.385 seconds
BFS (weighted average) : 0.279 seconds

./runtest bfsTest 10000000 32
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.222 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.365 seconds
BFS (weighted average) : 0.269 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 87.3 seconds
Delaunay (random points in kuzmin distribution) :0.1: 94.3 seconds
Delaunay (weighted average) : 90.8 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 51.5 seconds
Delaunay (random points in kuzmin distribution) :0.1: 56.8 seconds
Delaunay (weighted average) : 54.1 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 27.9 seconds
Delaunay (random points in kuzmin distribution) :0.1: 30.7 seconds
Delaunay (weighted average) : 29.3 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 14.2 seconds
Delaunay (random points in kuzmin distribution) :0.1: 14.9 seconds
Delaunay (weighted average) : 14.5 seconds

./runtest delaunayTest 10000000 16
Delaunay (random points in square) :0.1: 7.6 seconds
Delaunay (random points in kuzmin distribution) :0.1: 8.01 seconds
Delaunay (weighted average) : 7.81 seconds

./runtest delaunayTest 10000000 24
Delaunay (random points in square) :0.1: 5.58 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.97 seconds
Delaunay (weighted average) : 5.77 seconds

./runtest delaunayTest 10000000 28
Delaunay (random points in square) :0.1: 4.95 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.48 seconds
Delaunay (weighted average) : 5.21 seconds

./runtest delaunayTest 10000000 32
Delaunay (random points in square) :0.1: 4.63 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.22 seconds
Delaunay (weighted average) : 4.92 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 3d, k=10) :0.1: 52.3 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 78.3 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 30.7 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 55.5 seconds
k-nearest neighbors (weighted average) : 54.2 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 3d, k=10) :0.1: 28.3 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 42.5 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 16.7 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 35.1 seconds
k-nearest neighbors (weighted average) : 30.6 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 3d, k=10) :0.1: 15.9 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 23.2 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 8.84 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 26.1 seconds
k-nearest neighbors (weighted average) : 18.5 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 3d, k=10) :0.1: 8.98 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 13.9 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 5.03 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 13.5 seconds
k-nearest neighbors (weighted average) : 10.3 seconds

./runtest nearestNeighborTest 10000000 16
k-nearest neighbors (random 3d, k=10) :0.1: 6.09 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 8.06 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.74 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 7.82 seconds
k-nearest neighbors (weighted average) : 6.18 seconds

./runtest nearestNeighborTest 10000000 24
k-nearest neighbors (random 3d, k=10) :0.1: 4.55 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 6.08 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.3 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 5.52 seconds
k-nearest neighbors (weighted average) : 4.61 seconds

./runtest nearestNeighborTest 10000000 28
k-nearest neighbors (random 3d, k=10) :0.1: 3.74 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 5.63 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.05 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 5.24 seconds
k-nearest neighbors (weighted average) : 4.17 seconds

./runtest nearestNeighborTest 10000000 32
k-nearest neighbors (random 3d, k=10) :0.1: 5.72 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 6.31 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.84 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.69 seconds
k-nearest neighbors (weighted average) : 4.64 seconds

./runtest mvMultiply 5000000 1
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.424 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.415 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.304 seconds

./runtest mvMultiply 5000000 2
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.249 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.519 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.167 seconds

./runtest mvMultiply 5000000 4
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.133 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.527 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0986 seconds

./runtest mvMultiply 5000000 8
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0715 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.577 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0524 seconds

./runtest mvMultiply 5000000 16
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0385 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.569 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0364 seconds

./runtest mvMultiply 5000000 24
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0334 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.61 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0335 seconds

./runtest mvMultiply 5000000 28
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0313 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.582 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0337 seconds

./runtest mvMultiply 5000000 32
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0309 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.576 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0342 seconds

./runtest nbodyTest 1000000 1
Barnes Hut (Random 3d points) :0.1: 37.5 seconds
Barnes Hut (weighted average) : 37.5 seconds

./runtest nbodyTest 1000000 2
Barnes Hut (Random 3d points) :0.1: 21.3 seconds
Barnes Hut (weighted average) : 21.3 seconds

./runtest nbodyTest 1000000 4
Barnes Hut (Random 3d points) :0.1: 10.6 seconds
Barnes Hut (weighted average) : 10.6 seconds

./runtest nbodyTest 1000000 8
Barnes Hut (Random 3d points) :0.1: 5.55 seconds
Barnes Hut (weighted average) : 5.55 seconds

./runtest nbodyTest 1000000 16
Barnes Hut (Random 3d points) :0.1: 2.9 seconds
Barnes Hut (weighted average) : 2.9 seconds

./runtest nbodyTest 1000000 24
Barnes Hut (Random 3d points) :0.1: 2.04 seconds
Barnes Hut (weighted average) : 2.04 seconds

./runtest nbodyTest 1000000 28
Barnes Hut (Random 3d points) :0.1: 1.77 seconds
Barnes Hut (weighted average) : 1.77 seconds

./runtest nbodyTest 1000000 32
Barnes Hut (Random 3d points) :0.1: 1.59 seconds
Barnes Hut (weighted average) : 1.59 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 5.37 seconds
Suffix Array (equal string) :0.1: 2.05 seconds
Suffix Array (repeated string) :0.1: 3.47 seconds
Suffix Array (weighted average) : 4.33 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.94 seconds
Suffix Array (equal string) :0.1: 1.14 seconds
Suffix Array (repeated string) :0.1: 2.26 seconds
Suffix Array (weighted average) : 2.44 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.44 seconds
Suffix Array (equal string) :0.1: 0.598 seconds
Suffix Array (repeated string) :0.1: 1.42 seconds
Suffix Array (weighted average) : 1.27 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.762 seconds
Suffix Array (equal string) :0.1: 0.348 seconds
Suffix Array (repeated string) :0.1: 0.938 seconds
Suffix Array (weighted average) : 0.715 seconds

./runtest suffixArrayTest 10000000 16
Suffix Array (trigram string) :0.3: 0.453 seconds
Suffix Array (equal string) :0.1: 0.241 seconds
Suffix Array (repeated string) :0.1: 0.586 seconds
Suffix Array (weighted average) : 0.437 seconds

./runtest suffixArrayTest 10000000 24
Suffix Array (trigram string) :0.3: 0.389 seconds
Suffix Array (equal string) :0.1: 0.237 seconds
Suffix Array (repeated string) :0.1: 0.521 seconds
Suffix Array (weighted average) : 0.385 seconds

./runtest suffixArrayTest 10000000 28
Suffix Array (trigram string) :0.3: 0.345 seconds
Suffix Array (equal string) :0.1: 0.221 seconds
Suffix Array (repeated string) :0.1: 0.466 seconds
Suffix Array (weighted average) : 0.344 seconds

./runtest suffixArrayTest 10000000 32
Suffix Array (trigram string) :0.3: 0.326 seconds
Suffix Array (equal string) :0.1: 0.214 seconds
Suffix Array (repeated string) :0.1: 0.428 seconds
Suffix Array (weighted average) : 0.324 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 9.02 seconds
Convex Hull (random in unit circle) :0.3: 0.747 seconds
Convex Hull (random projected Parabola) :0.3: 0.679 seconds
Convex Hull (weighted average) : 1.9 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 4.65 seconds
Convex Hull (random in unit circle) :0.3: 0.45 seconds
Convex Hull (random projected Parabola) :0.3: 0.415 seconds
Convex Hull (weighted average) : 1.03 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 2.36 seconds
Convex Hull (random in unit circle) :0.3: 0.237 seconds
Convex Hull (random projected Parabola) :0.3: 0.218 seconds
Convex Hull (weighted average) : 0.533 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 1.25 seconds
Convex Hull (random in unit circle) :0.3: 0.136 seconds
Convex Hull (random projected Parabola) :0.3: 0.127 seconds
Convex Hull (weighted average) : 0.292 seconds

./runtest hullTest 10000000 16
Convex Hull (random on unit circle) :0.1: 0.752 seconds
Convex Hull (random in unit circle) :0.3: 0.103 seconds
Convex Hull (random projected Parabola) :0.3: 0.0962 seconds
Convex Hull (weighted average) : 0.193 seconds

./runtest hullTest 10000000 24
Convex Hull (random on unit circle) :0.1: 0.616 seconds
Convex Hull (random in unit circle) :0.3: 0.0956 seconds
Convex Hull (random projected Parabola) :0.3: 0.089 seconds
Convex Hull (weighted average) : 0.167 seconds

./runtest hullTest 10000000 28
Convex Hull (random on unit circle) :0.1: 0.569 seconds
Convex Hull (random in unit circle) :0.3: 0.0921 seconds
Convex Hull (random projected Parabola) :0.3: 0.0874 seconds
Convex Hull (weighted average) : 0.158 seconds

./runtest hullTest 10000000 32
Convex Hull (random on unit circle) :0.1: 0.547 seconds
Convex Hull (random in unit circle) :0.3: 0.114 seconds
Convex Hull (random projected Parabola) :0.3: 0.117 seconds
Convex Hull (weighted average) : 0.177 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 8.66 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 19.9 seconds
Minimum Spanning Tree (weighted average) : 14.3 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.84 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 11 seconds
Minimum Spanning Tree (weighted average) : 7.92 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 2.69 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 6.02 seconds
Minimum Spanning Tree (weighted average) : 4.36 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.45 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 3.15 seconds
Minimum Spanning Tree (weighted average) : 2.3 seconds

./runtest mstTest 10000000 16
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.843 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.81 seconds
Minimum Spanning Tree (weighted average) : 1.33 seconds

./runtest mstTest 10000000 24
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.639 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.32 seconds
Minimum Spanning Tree (weighted average) : 0.982 seconds

./runtest mstTest 10000000 28
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.581 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.24 seconds
Minimum Spanning Tree (weighted average) : 0.908 seconds

./runtest mstTest 10000000 32
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.585 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.18 seconds
Minimum Spanning Tree (weighted average) : 0.885 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 7.21 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 19.3 seconds
Minimum Spanning Tree (weighted average) : 13.2 seconds
