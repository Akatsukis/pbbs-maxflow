HOSTNAME: monster
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 90
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 90
Last Changed Date: 2010-09-08 13:54:59 -0400 (Wed, 08 Sep 2010)

cilk++ -O2 -DCILK -Wno-cilk-for -c mst.C
cilk++  -o mstTest graphGen.o mst.o mstTest.o

./runtest sequenceTest 100000000 1
tabulate (double) : 0.211 seconds
map (double, +1) : 0.35 seconds
map (char, +1)  : 0.2 seconds
map (char, isalpha) : 0.471 seconds
reduce (double, add) : 0.244 seconds
map reduce (char, add) : 0.226 seconds
max Index (double) : 0.233 seconds
scan (double, add, inplace) : 0.543 seconds
scan (double, add) : 0.601 seconds
scanI (double, add) : 0.726 seconds
scan (int, max) : 0.427 seconds
sequential scan (double, add) : 0.343 seconds
sequential scan (int, max) : 0.206 seconds
filter (double, odd) : 0.586 seconds
pack (double, odd) : 0.448 seconds
gather (int) : 2.72 seconds
gather (double) : 2.9 seconds
scatter (int) : 2.88 seconds
scatter (double) : 3.05 seconds
scatter contended (10^6) : 0.866 seconds
scatter contended (10^5) : 0.667 seconds
scatter CAS (int) : 14.4 seconds
scatter CAS contended (10^6) : 2.48 seconds
scatter CAS contended conditional (10^6) : 0.928 seconds
scatter CAS contended (10^5) : 1.72 seconds
scatter CAS contended conditional (10^5) : 0.796 seconds
partition : 0.211 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.106 seconds
map (double, +1) : 0.233 seconds
map (char, +1)  : 0.102 seconds
map (char, isalpha) : 0.237 seconds
reduce (double, add) : 0.123 seconds
map reduce (char, add) : 0.113 seconds
max Index (double) : 0.119 seconds
scan (double, add, inplace) : 0.318 seconds
scan (double, add) : 0.408 seconds
scanI (double, add) : 0.427 seconds
scan (int, max) : 0.239 seconds
sequential scan (double, add) : 0.403 seconds
sequential scan (int, max) : 0.244 seconds
filter (double, odd) : 0.417 seconds
pack (double, odd) : 0.292 seconds
gather (int) : 1.51 seconds
gather (double) : 1.48 seconds
scatter (int) : 1.55 seconds
scatter (double) : 1.58 seconds
scatter contended (10^6) : 0.772 seconds
scatter contended (10^5) : 0.802 seconds
scatter CAS (int) : 7.91 seconds
scatter CAS contended (10^6) : 3.44 seconds
scatter CAS contended conditional (10^6) : 1.05 seconds
scatter CAS contended (10^5) : 3.6 seconds
scatter CAS contended conditional (10^5) : 1.14 seconds
partition : 0.255 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.07 seconds
map (double, +1) : 0.115 seconds
map (char, +1)  : 0.0516 seconds
map (char, isalpha) : 0.119 seconds
reduce (double, add) : 0.0625 seconds
map reduce (char, add) : 0.0566 seconds
max Index (double) : 0.0844 seconds
scan (double, add, inplace) : 0.186 seconds
scan (double, add) : 0.187 seconds
scanI (double, add) : 0.219 seconds
scan (int, max) : 0.121 seconds
sequential scan (double, add) : 0.427 seconds
sequential scan (int, max) : 0.299 seconds
filter (double, odd) : 0.213 seconds
pack (double, odd) : 0.149 seconds
gather (int) : 0.762 seconds
gather (double) : 0.814 seconds
scatter (int) : 0.823 seconds
scatter (double) : 0.859 seconds
scatter contended (10^6) : 0.421 seconds
scatter contended (10^5) : 0.472 seconds
scatter CAS (int) : 4.2 seconds
scatter CAS contended (10^6) : 2.32 seconds
scatter CAS contended conditional (10^6) : 0.589 seconds
scatter CAS contended (10^5) : 2.6 seconds
scatter CAS contended conditional (10^5) : 0.655 seconds
partition : 0.259 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0431 seconds
map (double, +1) : 0.073 seconds
map (char, +1)  : 0.0269 seconds
map (char, isalpha) : 0.0609 seconds
reduce (double, add) : 0.0432 seconds
map reduce (char, add) : 0.0284 seconds
max Index (double) : 0.043 seconds
scan (double, add, inplace) : 0.0981 seconds
scan (double, add) : 0.119 seconds
scanI (double, add) : 0.125 seconds
scan (int, max) : 0.069 seconds
sequential scan (double, add) : 0.448 seconds
sequential scan (int, max) : 0.283 seconds
filter (double, odd) : 0.116 seconds
pack (double, odd) : 0.0812 seconds
gather (int) : 0.383 seconds
gather (double) : 0.41 seconds
scatter (int) : 0.419 seconds
scatter (double) : 0.442 seconds
scatter contended (10^6) : 0.227 seconds
scatter contended (10^5) : 0.257 seconds
scatter CAS (int) : 2.12 seconds
scatter CAS contended (10^6) : 1.25 seconds
scatter CAS contended conditional (10^6) : 0.325 seconds
scatter CAS contended (10^5) : 1.38 seconds
scatter CAS contended conditional (10^5) : 0.363 seconds
partition : 0.262 seconds

./runtest sequenceTest 100000000 16
tabulate (double) : 0.0361 seconds
map (double, +1) : 0.055 seconds
map (char, +1)  : 0.0142 seconds
map (char, isalpha) : 0.0305 seconds
reduce (double, add) : 0.0253 seconds
map reduce (char, add) : 0.0143 seconds
max Index (double) : 0.025 seconds
scan (double, add, inplace) : 0.0657 seconds
scan (double, add) : 0.0803 seconds
scanI (double, add) : 0.078 seconds
scan (int, max) : 0.0443 seconds
sequential scan (double, add) : 0.442 seconds
sequential scan (int, max) : 0.497 seconds
filter (double, odd) : 0.0663 seconds
pack (double, odd) : 0.0541 seconds
gather (int) : 0.198 seconds
gather (double) : 0.212 seconds
scatter (int) : 0.31 seconds
scatter (double) : 0.288 seconds
scatter contended (10^6) : 0.17 seconds
scatter contended (10^5) : 0.184 seconds
scatter CAS (int) : 1.04 seconds
scatter CAS contended (10^6) : 0.678 seconds
scatter CAS contended conditional (10^6) : 0.182 seconds
scatter CAS contended (10^5) : 0.734 seconds
scatter CAS contended conditional (10^5) : 0.243 seconds
partition : 0.266 seconds

./runtest sequenceTest 100000000 24
tabulate (double) : 0.0334 seconds
map (double, +1) : 0.0556 seconds
map (char, +1)  : 0.0095 seconds
map (char, isalpha) : 0.0203 seconds
reduce (double, add) : 0.0194 seconds
map reduce (char, add) : 0.00972 seconds
max Index (double) : 0.0218 seconds
scan (double, add, inplace) : 0.0582 seconds
scan (double, add) : 0.0719 seconds
scanI (double, add) : 0.0703 seconds
scan (int, max) : 0.0441 seconds
sequential scan (double, add) : 0.435 seconds
sequential scan (int, max) : 0.252 seconds
filter (double, odd) : 0.0663 seconds
pack (double, odd) : 0.0471 seconds
gather (int) : 0.156 seconds
gather (double) : 0.16 seconds
scatter (int) : 0.297 seconds
scatter (double) : 0.271 seconds
scatter contended (10^6) : 0.18 seconds
scatter contended (10^5) : 0.195 seconds
scatter CAS (int) : 0.697 seconds
scatter CAS contended (10^6) : 0.473 seconds
scatter CAS contended conditional (10^6) : 0.171 seconds
scatter CAS contended (10^5) : 0.498 seconds
scatter CAS contended conditional (10^5) : 0.225 seconds
partition : 0.272 seconds

./runtest sequenceTest 100000000 28
tabulate (double) : 0.0334 seconds
map (double, +1) : 0.0489 seconds
map (char, +1)  : 0.00936 seconds
map (char, isalpha) : 0.0178 seconds
reduce (double, add) : 0.0184 seconds
map reduce (char, add) : 0.0083 seconds
max Index (double) : 0.0182 seconds
scan (double, add, inplace) : 0.0503 seconds
scan (double, add) : 0.0697 seconds
scanI (double, add) : 0.0685 seconds
scan (int, max) : 0.0393 seconds
sequential scan (double, add) : 0.472 seconds
sequential scan (int, max) : 0.256 seconds
filter (double, odd) : 0.0615 seconds
pack (double, odd) : 0.0483 seconds
gather (int) : 0.165 seconds
gather (double) : 0.156 seconds
scatter (int) : 0.243 seconds
scatter (double) : 0.27 seconds
scatter contended (10^6) : 0.174 seconds
scatter contended (10^5) : 0.19 seconds
scatter CAS (int) : 0.599 seconds
scatter CAS contended (10^6) : 0.412 seconds
scatter CAS contended conditional (10^6) : 0.168 seconds
scatter CAS contended (10^5) : 0.43 seconds
scatter CAS contended conditional (10^5) : 0.229 seconds
partition : 0.276 seconds

./runtest sequenceTest 100000000 32
tabulate (double) : 0.0331 seconds
map (double, +1) : 0.0512 seconds
map (char, +1)  : 0.00824 seconds
map (char, isalpha) : 0.0154 seconds
reduce (double, add) : 0.0186 seconds
map reduce (char, add) : 0.00728 seconds
max Index (double) : 0.0173 seconds
scan (double, add, inplace) : 0.0507 seconds
scan (double, add) : 0.0715 seconds
scanI (double, add) : 0.0694 seconds
scan (int, max) : 0.0364 seconds
sequential scan (double, add) : 0.44 seconds
sequential scan (int, max) : 0.274 seconds
filter (double, odd) : 0.0598 seconds
pack (double, odd) : 0.0423 seconds
gather (int) : 0.135 seconds
gather (double) : 0.15 seconds
scatter (int) : 0.25 seconds
scatter (double) : 0.267 seconds
scatter contended (10^6) : 0.177 seconds
scatter contended (10^5) : 0.194 seconds
scatter CAS (int) : 0.529 seconds
scatter CAS contended (10^6) : 0.364 seconds
scatter CAS contended conditional (10^6) : 0.173 seconds
scatter CAS contended (10^5) : 0.378 seconds
scatter CAS contended conditional (10^5) : 0.242 seconds
partition : 0.273 seconds

./runtest mergeTest 100000000 1
Merge : 0.299 seconds

./runtest mergeTest 100000000 2
Merge : 0.21 seconds

./runtest mergeTest 100000000 4
Merge : 0.183 seconds

./runtest mergeTest 100000000 8
Merge : 0.179 seconds

./runtest mergeTest 100000000 16
Merge : 0.18 seconds

./runtest mergeTest 100000000 24
Merge : 0.181 seconds

./runtest mergeTest 100000000 28
Merge : 0.183 seconds

./runtest mergeTest 100000000 32
Merge : 0.183 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 11.5 seconds
Random Permutation (4 x double) :0.1: 15 seconds
Random Permutation (weighted average) : 13.2 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 6.69 seconds
Random Permutation (4 x double) :0.1: 8.38 seconds
Random Permutation (weighted average) : 7.53 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 3.58 seconds
Random Permutation (4 x double) :0.1: 4.55 seconds
Random Permutation (weighted average) : 4.07 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 2.39 seconds
Random Permutation (4 x double) :0.1: 2.67 seconds
Random Permutation (weighted average) : 2.53 seconds

./runtest randPermTest 100000000 16
Random Permutation (int) :0.1: 1.16 seconds
Random Permutation (4 x double) :0.1: 2.62 seconds
Random Permutation (weighted average) : 1.89 seconds

./runtest randPermTest 100000000 24
Random Permutation (int) :0.1: 0.979 seconds
Random Permutation (4 x double) :0.1: 2.53 seconds
Random Permutation (weighted average) : 1.76 seconds

./runtest randPermTest 100000000 28
Random Permutation (int) :0.1: 2.52 seconds
Random Permutation (4 x double) :0.1: 1.74 seconds
Random Permutation (weighted average) : 2.13 seconds

./runtest randPermTest 100000000 32
Random Permutation (int) :0.1: 0.919 seconds
Random Permutation (4 x double) :0.1: 2.57 seconds
Random Permutation (weighted average) : 1.74 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 4.91 seconds
Integer Sort (32 bit, exponential) :0.1: 4.18 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 1.06 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 7.41 seconds
Integer Sort (weighted average) : 4.99 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 2.77 seconds
Integer Sort (32 bit, exponential) :0.1: 2.47 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.603 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 4.47 seconds
Integer Sort (weighted average) : 2.95 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 1.52 seconds
Integer Sort (32 bit, exponential) :0.1: 1.4 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.366 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.49 seconds
Integer Sort (weighted average) : 1.65 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.748 seconds
Integer Sort (32 bit, exponential) :0.1: 0.699 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.179 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.28 seconds
Integer Sort (weighted average) : 0.835 seconds

./runtest intSortTest 100000000 16
Integer Sort (32 bit, random) :0.1: 0.506 seconds
Integer Sort (32 bit, exponential) :0.1: 0.487 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.124 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.741 seconds
Integer Sort (weighted average) : 0.52 seconds

./runtest intSortTest 100000000 24
Integer Sort (32 bit, random) :0.1: 0.355 seconds
Integer Sort (32 bit, exponential) :0.1: 0.356 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0867 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.598 seconds
Integer Sort (weighted average) : 0.398 seconds

./runtest intSortTest 100000000 28
Integer Sort (32 bit, random) :0.1: 0.31 seconds
Integer Sort (32 bit, exponential) :0.1: 0.292 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0742 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.56 seconds
Integer Sort (weighted average) : 0.359 seconds

./runtest intSortTest 100000000 32
Integer Sort (32 bit, random) :0.1: 0.292 seconds
Integer Sort (32 bit, exponential) :0.1: 0.293 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0712 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.888 seconds
Integer Sort (weighted average) : 0.487 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 16.5 seconds
Comparison Sort (double, exponential) :0.1: 10.1 seconds
Comparison Sort (double, almost sorted) :0.1: 3.89 seconds
Comparison Sort (trigram strings adjacent) :0.2: 45.8 seconds
Comparison Sort (trigram strings, random layout) :0.2: 65 seconds
Comparison Sort (double with 3 x double payload) :0.3: 21.9 seconds
Comparison Sort (weighted average) : 31.8 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 9.18 seconds
Comparison Sort (double, exponential) :0.1: 5.36 seconds
Comparison Sort (double, almost sorted) :0.1: 2.33 seconds
Comparison Sort (trigram strings adjacent) :0.2: 25.5 seconds
Comparison Sort (trigram strings, random layout) :0.2: 37.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 12.1 seconds
Comparison Sort (weighted average) : 17.9 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 5.18 seconds
Comparison Sort (double, exponential) :0.1: 3.11 seconds
Comparison Sort (double, almost sorted) :0.1: 1.5 seconds
Comparison Sort (trigram strings adjacent) :0.2: 13.8 seconds
Comparison Sort (trigram strings, random layout) :0.2: 23.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 6.9 seconds
Comparison Sort (weighted average) : 10.6 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.16 seconds
Comparison Sort (double, exponential) :0.1: 2.27 seconds
Comparison Sort (double, almost sorted) :0.1: 1.22 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.49 seconds
Comparison Sort (trigram strings, random layout) :0.2: 17.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 4.38 seconds
Comparison Sort (weighted average) : 7.21 seconds

./runtest quickSortTest 100000000 16
Comparison Sort (double, random) :0.1: 2.25 seconds
Comparison Sort (double, exponential) :0.1: 2.04 seconds
Comparison Sort (double, almost sorted) :0.1: 1.17 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 19.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.31 seconds
Comparison Sort (weighted average) : 6.69 seconds

./runtest quickSortTest 100000000 24
Comparison Sort (double, random) :0.1: 2.01 seconds
Comparison Sort (double, exponential) :0.1: 2.01 seconds
Comparison Sort (double, almost sorted) :0.1: 1.18 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.61 seconds
Comparison Sort (trigram strings, random layout) :0.2: 16.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.26 seconds
Comparison Sort (weighted average) : 6.17 seconds

./runtest quickSortTest 100000000 28
Comparison Sort (double, random) :0.1: 1.99 seconds
Comparison Sort (double, exponential) :0.1: 2.05 seconds
Comparison Sort (double, almost sorted) :0.1: 1.05 seconds
Comparison Sort (trigram strings adjacent) :0.2: 5.65 seconds
Comparison Sort (trigram strings, random layout) :0.2: 19.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.99 seconds
Comparison Sort (weighted average) : 6.71 seconds

./runtest quickSortTest 100000000 32
Comparison Sort (double, random) :0.1: 1.98 seconds
Comparison Sort (double, exponential) :0.1: 2.07 seconds
Comparison Sort (double, almost sorted) :0.1: 1.23 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.5 seconds
Comparison Sort (trigram strings, random layout) :0.2: 18.2 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.25 seconds
Comparison Sort (weighted average) : 6.44 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 20.2 seconds
Comparison Sort (double, exponential) :0.1: 13.7 seconds
Comparison Sort (double, almost sorted) :0.1: 5.58 seconds
Comparison Sort (trigram strings adjacent) :0.2: 30.6 seconds
Comparison Sort (trigram strings, random layout) :0.2: 49 seconds
Comparison Sort (double with 3 x double payload) :0.3: 26.2 seconds
Comparison Sort (weighted average) : 27.7 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 10.9 seconds
Comparison Sort (double, exponential) :0.1: 7.21 seconds
Comparison Sort (double, almost sorted) :0.1: 3.06 seconds
Comparison Sort (trigram strings adjacent) :0.2: 16.1 seconds
Comparison Sort (trigram strings, random layout) :0.2: 25.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 13.8 seconds
Comparison Sort (weighted average) : 14.6 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 5.8 seconds
Comparison Sort (double, exponential) :0.1: 3.72 seconds
Comparison Sort (double, almost sorted) :0.1: 1.65 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.14 seconds
Comparison Sort (trigram strings, random layout) :0.2: 13 seconds
Comparison Sort (double with 3 x double payload) :0.3: 7.12 seconds
Comparison Sort (weighted average) : 7.48 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.01 seconds
Comparison Sort (double, exponential) :0.1: 2.14 seconds
Comparison Sort (double, almost sorted) :0.1: 0.955 seconds
Comparison Sort (trigram strings adjacent) :0.2: 4.17 seconds
Comparison Sort (trigram strings, random layout) :0.2: 6.47 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.79 seconds
Comparison Sort (weighted average) : 3.88 seconds

./runtest sampleSortTest 100000000 16
Comparison Sort (double, random) :0.1: 1.69 seconds
Comparison Sort (double, exponential) :0.1: 1.19 seconds
Comparison Sort (double, almost sorted) :0.1: 0.655 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.18 seconds
Comparison Sort (trigram strings, random layout) :0.2: 3.41 seconds
Comparison Sort (double with 3 x double payload) :0.3: 2.43 seconds
Comparison Sort (weighted average) : 2.2 seconds

./runtest sampleSortTest 100000000 24
Comparison Sort (double, random) :0.1: 1.28 seconds
Comparison Sort (double, exponential) :0.1: 0.873 seconds
Comparison Sort (double, almost sorted) :0.1: 0.696 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.59 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.52 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.95 seconds
Comparison Sort (weighted average) : 1.69 seconds

./runtest sampleSortTest 100000000 28
Comparison Sort (double, random) :0.1: 1.16 seconds
Comparison Sort (double, exponential) :0.1: 0.772 seconds
Comparison Sort (double, almost sorted) :0.1: 0.343 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.4 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.23 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.86 seconds
Comparison Sort (weighted average) : 1.51 seconds

./runtest sampleSortTest 100000000 32
Comparison Sort (double, random) :0.1: 1.07 seconds
Comparison Sort (double, exponential) :0.1: 0.726 seconds
Comparison Sort (double, almost sorted) :0.1: 0.527 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.36 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.15 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.8 seconds
Comparison Sort (weighted average) : 1.47 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 15.9 seconds
Comparison Sort (double, exponential) :0.1: 10.9 seconds
Comparison Sort (double, almost sorted) :0.1: 3.3 seconds
Comparison Sort (trigram strings adjacent) :0.2: 58.9 seconds
Comparison Sort (trigram strings, random layout) :0.2: 83.5 seconds
Comparison Sort (double with 3 x double payload) :0.3: 17.5 seconds
Comparison Sort (weighted average) : 36.7 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.932 seconds
Remove Duplicates (int, exponential) :0.1: 0.681 seconds
Remove Duplicates (trigram strings) :0.2: 1.06 seconds
Remove Duplicates (weighted average) : 0.933 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.538 seconds
Remove Duplicates (int, exponential) :0.1: 0.375 seconds
Remove Duplicates (trigram strings) :0.2: 0.63 seconds
Remove Duplicates (weighted average) : 0.543 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.286 seconds
Remove Duplicates (int, exponential) :0.1: 0.192 seconds
Remove Duplicates (trigram strings) :0.2: 0.338 seconds
Remove Duplicates (weighted average) : 0.288 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.147 seconds
Remove Duplicates (int, exponential) :0.1: 0.0975 seconds
Remove Duplicates (trigram strings) :0.2: 0.195 seconds
Remove Duplicates (weighted average) : 0.159 seconds

./runtest remDuplicatesTest 10000000 16
Remove Duplicates (int, random in n) :0.1: 0.113 seconds
Remove Duplicates (int, exponential) :0.1: 0.0977 seconds
Remove Duplicates (trigram strings) :0.2: 0.101 seconds
Remove Duplicates (weighted average) : 0.103 seconds

./runtest remDuplicatesTest 10000000 24
Remove Duplicates (int, random in n) :0.1: 0.0598 seconds
Remove Duplicates (int, exponential) :0.1: 0.0406 seconds
Remove Duplicates (trigram strings) :0.2: 0.119 seconds
Remove Duplicates (weighted average) : 0.0845 seconds

./runtest remDuplicatesTest 10000000 28
Remove Duplicates (int, random in n) :0.1: 0.0565 seconds
Remove Duplicates (int, exponential) :0.1: 0.0374 seconds
Remove Duplicates (trigram strings) :0.2: 0.116 seconds
Remove Duplicates (weighted average) : 0.0816 seconds

./runtest remDuplicatesTest 10000000 32
Remove Duplicates (int, random in n) :0.1: 0.0871 seconds
Remove Duplicates (int, exponential) :0.1: 0.0297 seconds
Remove Duplicates (trigram strings) :0.2: 0.0741 seconds
Remove Duplicates (weighted average) : 0.0663 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 1.11 seconds
Table (trigram words, insert and find) :0.2: 1.42 seconds
Table (weighted average) : 1.32 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.638 seconds
Table (trigram words, insert and find) :0.2: 0.796 seconds
Table (weighted average) : 0.743 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.341 seconds
Table (trigram words, insert and find) :0.2: 0.409 seconds
Table (weighted average) : 0.386 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.169 seconds
Table (trigram words, insert and find) :0.2: 0.204 seconds
Table (weighted average) : 0.192 seconds

./runtest tableTest 10000000 16
Table (random in n, insert and find) :0.1: 0.0863 seconds
Table (trigram words, insert and find) :0.2: 0.103 seconds
Table (weighted average) : 0.0974 seconds

./runtest tableTest 10000000 24
Table (random in n, insert and find) :0.1: 0.0597 seconds
Table (trigram words, insert and find) :0.2: 0.0692 seconds
Table (weighted average) : 0.066 seconds

./runtest tableTest 10000000 28
Table (random in n, insert and find) :0.1: 0.0521 seconds
Table (trigram words, insert and find) :0.2: 0.0596 seconds
Table (weighted average) : 0.0571 seconds

./runtest tableTest 10000000 32
Table (random in n, insert and find) :0.1: 0.0468 seconds
Table (trigram words, insert and find) :0.2: 0.0527 seconds
Table (weighted average) : 0.0508 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.59 seconds
Maximal Independent Set (2d grid) :0.2: 0.804 seconds
Maximal Independent Set (rMat) :0.1: 3.71 seconds
Maximal Independent Set (weighted average) : 1.73 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.905 seconds
Maximal Independent Set (2d grid) :0.2: 0.432 seconds
Maximal Independent Set (rMat) :0.1: 2.09 seconds
Maximal Independent Set (weighted average) : 0.964 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.471 seconds
Maximal Independent Set (2d grid) :0.2: 0.225 seconds
Maximal Independent Set (rMat) :0.1: 1.07 seconds
Maximal Independent Set (weighted average) : 0.497 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.252 seconds
Maximal Independent Set (2d grid) :0.2: 0.127 seconds
Maximal Independent Set (rMat) :0.1: 0.541 seconds
Maximal Independent Set (weighted average) : 0.262 seconds

./runtest maxIndSetTest 10000000 16
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.133 seconds
Maximal Independent Set (2d grid) :0.2: 0.0692 seconds
Maximal Independent Set (rMat) :0.1: 0.293 seconds
Maximal Independent Set (weighted average) : 0.141 seconds

./runtest maxIndSetTest 10000000 24
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0943 seconds
Maximal Independent Set (2d grid) :0.2: 0.0528 seconds
Maximal Independent Set (rMat) :0.1: 0.252 seconds
Maximal Independent Set (weighted average) : 0.113 seconds

./runtest maxIndSetTest 10000000 28
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.087 seconds
Maximal Independent Set (2d grid) :0.2: 0.0505 seconds
Maximal Independent Set (rMat) :0.1: 0.187 seconds
Maximal Independent Set (weighted average) : 0.0938 seconds

./runtest maxIndSetTest 10000000 32
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0801 seconds
Maximal Independent Set (2d grid) :0.2: 0.0569 seconds
Maximal Independent Set (rMat) :0.1: 0.17 seconds
Maximal Independent Set (weighted average) : 0.091 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 7.89 seconds
Color Graph (2d grid) :0.1: 2.18 seconds
Color Graph (weighted average) : 5.03 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 3.54 seconds
Color Graph (2d grid) :0.1: 1.02 seconds
Color Graph (weighted average) : 2.28 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.87 seconds
Color Graph (2d grid) :0.1: 0.541 seconds
Color Graph (weighted average) : 1.21 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 0.99 seconds
Color Graph (2d grid) :0.1: 0.3 seconds
Color Graph (weighted average) : 0.645 seconds

./runtest colorGraphTest 10000000 16
Color Graph (rand dim=2, m=n*10) :0.1: 0.523 seconds
Color Graph (2d grid) :0.1: 0.17 seconds
Color Graph (weighted average) : 0.346 seconds

./runtest colorGraphTest 10000000 24
Color Graph (rand dim=2, m=n*10) :0.1: 0.375 seconds
Color Graph (2d grid) :0.1: 0.134 seconds
Color Graph (weighted average) : 0.255 seconds

./runtest colorGraphTest 10000000 28
Color Graph (rand dim=2, m=n*10) :0.1: 0.342 seconds
Color Graph (2d grid) :0.1: 0.123 seconds
Color Graph (weighted average) : 0.233 seconds

./runtest colorGraphTest 10000000 32
Color Graph (rand dim=2, m=n*10) :0.1: 0.347 seconds
Color Graph (2d grid) :0.1: 0.123 seconds
Color Graph (weighted average) : 0.235 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 1.21 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 2.25 seconds
Maximal Matching (2d mesh) :0.1: 1.83 seconds
Maximal Matching (weighted average) : 1.76 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.743 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.34 seconds
Maximal Matching (2d mesh) :0.1: 1.09 seconds
Maximal Matching (weighted average) : 1.06 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.39 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.74 seconds
Maximal Matching (2d mesh) :0.1: 0.601 seconds
Maximal Matching (weighted average) : 0.577 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.217 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.427 seconds
Maximal Matching (2d mesh) :0.1: 0.322 seconds
Maximal Matching (weighted average) : 0.322 seconds

./runtest maxMatchingTest 10000000 16
Maximal Matching (tree rand parent) :0.1: 0.152 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.241 seconds
Maximal Matching (2d mesh) :0.1: 0.189 seconds
Maximal Matching (weighted average) : 0.194 seconds

./runtest maxMatchingTest 10000000 24
Maximal Matching (tree rand parent) :0.1: 0.123 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.178 seconds
Maximal Matching (2d mesh) :0.1: 0.151 seconds
Maximal Matching (weighted average) : 0.151 seconds

./runtest maxMatchingTest 10000000 28
Maximal Matching (tree rand parent) :0.1: 0.119 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.172 seconds
Maximal Matching (2d mesh) :0.1: 0.137 seconds
Maximal Matching (weighted average) : 0.142 seconds

./runtest maxMatchingTest 10000000 32
Maximal Matching (tree rand parent) :0.1: 0.114 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.156 seconds
Maximal Matching (2d mesh) :0.1: 0.133 seconds
Maximal Matching (weighted average) : 0.134 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 17.8 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 61.7 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 39.8 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 10.1 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 27.5 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 18.8 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 5.54 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 14.4 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 9.99 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 3.04 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 7.52 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 5.28 seconds

./runtest separatorTest 10000000 16
Separator (2d mesh) :0.1: 1.95 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 4.29 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 3.12 seconds

./runtest separatorTest 10000000 24
Separator (2d mesh) :0.1: 1.52 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.23 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.37 seconds

./runtest separatorTest 10000000 28
Separator (2d mesh) :0.1: 1.47 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 2.93 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.2 seconds

./runtest separatorTest 10000000 32
Separator (2d mesh) :0.1: 1.38 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 2.78 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.08 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 4.07 seconds
BFS (return BFS tree) (3d grid) :0.1: 3.01 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 9.01 seconds
BFS (weighted average) : 5.04 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 2.41 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.25 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 5.52 seconds
BFS (weighted average) : 3.15 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.27 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.44 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 2.81 seconds
BFS (weighted average) : 1.7 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.65 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.807 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.38 seconds
BFS (weighted average) : 0.871 seconds

./runtest bfsTest 10000000 16
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.341 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.499 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.733 seconds
BFS (weighted average) : 0.479 seconds

./runtest bfsTest 10000000 24
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.241 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.396 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.513 seconds
BFS (weighted average) : 0.348 seconds

./runtest bfsTest 10000000 28
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.232 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.386 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.451 seconds
BFS (weighted average) : 0.325 seconds

./runtest bfsTest 10000000 32
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.2 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.356 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.412 seconds
BFS (weighted average) : 0.292 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 87 seconds
Delaunay (random points in kuzmin distribution) :0.1: 94.3 seconds
Delaunay (weighted average) : 90.6 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 51.5 seconds
Delaunay (random points in kuzmin distribution) :0.1: 57.1 seconds
Delaunay (weighted average) : 54.3 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 27.8 seconds
Delaunay (random points in kuzmin distribution) :0.1: 30.9 seconds
Delaunay (weighted average) : 29.3 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 14.2 seconds
Delaunay (random points in kuzmin distribution) :0.1: 15.1 seconds
Delaunay (weighted average) : 14.6 seconds

./runtest delaunayTest 10000000 16
Delaunay (random points in square) :0.1: 7.61 seconds
Delaunay (random points in kuzmin distribution) :0.1: 8.17 seconds
Delaunay (weighted average) : 7.89 seconds

./runtest delaunayTest 10000000 24
Delaunay (random points in square) :0.1: 5.57 seconds
Delaunay (random points in kuzmin distribution) :0.1: 6.12 seconds
Delaunay (weighted average) : 5.84 seconds

./runtest delaunayTest 10000000 28
Delaunay (random points in square) :0.1: 4.96 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.57 seconds
Delaunay (weighted average) : 5.27 seconds

./runtest delaunayTest 10000000 32
Delaunay (random points in square) :0.1: 4.63 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.18 seconds
Delaunay (weighted average) : 4.9 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 2d, k=1) :0.1: 16.2 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 20.4 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 30.4 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 54.3 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 51 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 76.8 seconds
k-nearest neighbors (weighted average) : 41.5 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 2d, k=1) :0.1: 9.27 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 13.1 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 16.1 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 31.9 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 26.7 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 42.8 seconds
k-nearest neighbors (weighted average) : 23.3 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 2d, k=1) :0.1: 5.64 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 7.04 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 10.2 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 20.3 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 15.4 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 24.8 seconds
k-nearest neighbors (weighted average) : 13.9 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 2d, k=1) :0.1: 2.9 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 4.06 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 5.23 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 12 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 8.04 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 12.9 seconds
k-nearest neighbors (weighted average) : 7.51 seconds

./runtest nearestNeighborTest 10000000 16
k-nearest neighbors (random 2d, k=1) :0.1: 2.02 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 2.57 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.92 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 7.81 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 4.48 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 7.28 seconds
k-nearest neighbors (weighted average) : 4.51 seconds

./runtest nearestNeighborTest 10000000 24
k-nearest neighbors (random 2d, k=1) :0.1: 1.61 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 2.05 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.12 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 5.05 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 3.42 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 6.2 seconds
k-nearest neighbors (weighted average) : 3.41 seconds

./runtest nearestNeighborTest 10000000 28
k-nearest neighbors (random 2d, k=1) :0.1: 1.54 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.95 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.94 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.95 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.85 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 5.57 seconds
k-nearest neighbors (weighted average) : 3.13 seconds

./runtest nearestNeighborTest 10000000 32
k-nearest neighbors (random 2d, k=1) :0.1: 1.54 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.94 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.73 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.72 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.6 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 4.79 seconds
k-nearest neighbors (weighted average) : 2.89 seconds

./runtest mvMultiply 5000000 1
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.422 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.411 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.301 seconds

./runtest mvMultiply 5000000 2
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.273 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.513 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.168 seconds

./runtest mvMultiply 5000000 4
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.139 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.543 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0963 seconds

./runtest mvMultiply 5000000 8
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0734 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.6 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.051 seconds

./runtest mvMultiply 5000000 16
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0388 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.563 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0275 seconds

./runtest mvMultiply 5000000 24
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0294 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.594 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0208 seconds

./runtest mvMultiply 5000000 28
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0279 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.591 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0186 seconds

./runtest mvMultiply 5000000 32
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0271 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.584 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0188 seconds

./runtest nbodyTest 1000000 1
Nbody (Random 3d points) :0.1: 314 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 314 seconds

./runtest nbodyTest 1000000 2
Nbody (Random 3d points) :0.1: 160 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 160 seconds

./runtest nbodyTest 1000000 4
Nbody (Random 3d points) :0.1: 80.6 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 80.6 seconds

./runtest nbodyTest 1000000 8
Nbody (Random 3d points) :0.1: 41.7 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 41.7 seconds

./runtest nbodyTest 1000000 16
Nbody (Random 3d points) :0.1: 21.7 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 21.7 seconds

./runtest nbodyTest 1000000 24
Nbody (Random 3d points) :0.1: 15.3 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 15.3 seconds

./runtest nbodyTest 1000000 28
Nbody (Random 3d points) :0.1: 13.4 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 13.4 seconds

./runtest nbodyTest 1000000 32
Nbody (Random 3d points) :0.1: 12 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 12 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 5.49 seconds
Suffix Array (equal string) :0.1: 2.08 seconds
Suffix Array (repeated string) :0.1: 3.53 seconds
Suffix Array (weighted average) : 4.41 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 3.02 seconds
Suffix Array (equal string) :0.1: 1.17 seconds
Suffix Array (repeated string) :0.1: 2.32 seconds
Suffix Array (weighted average) : 2.51 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.46 seconds
Suffix Array (equal string) :0.1: 0.622 seconds
Suffix Array (repeated string) :0.1: 1.51 seconds
Suffix Array (weighted average) : 1.3 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.775 seconds
Suffix Array (equal string) :0.1: 0.355 seconds
Suffix Array (repeated string) :0.1: 0.994 seconds
Suffix Array (weighted average) : 0.735 seconds

./runtest suffixArrayTest 10000000 16
Suffix Array (trigram string) :0.3: 0.461 seconds
Suffix Array (equal string) :0.1: 0.242 seconds
Suffix Array (repeated string) :0.1: 0.574 seconds
Suffix Array (weighted average) : 0.439 seconds

./runtest suffixArrayTest 10000000 24
Suffix Array (trigram string) :0.3: 0.373 seconds
Suffix Array (equal string) :0.1: 0.236 seconds
Suffix Array (repeated string) :0.1: 0.512 seconds
Suffix Array (weighted average) : 0.374 seconds

./runtest suffixArrayTest 10000000 28
Suffix Array (trigram string) :0.3: 0.355 seconds
Suffix Array (equal string) :0.1: 0.205 seconds
Suffix Array (repeated string) :0.1: 0.415 seconds
Suffix Array (weighted average) : 0.337 seconds

./runtest suffixArrayTest 10000000 32
Suffix Array (trigram string) :0.3: 0.379 seconds
Suffix Array (equal string) :0.1: 0.226 seconds
Suffix Array (repeated string) :0.1: 0.396 seconds
Suffix Array (weighted average) : 0.352 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 8.96 seconds
Convex Hull (random in unit circle) :0.3: 0.751 seconds
Convex Hull (random projected Parabola) :0.3: 0.677 seconds
Convex Hull (weighted average) : 1.89 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 4.63 seconds
Convex Hull (random in unit circle) :0.3: 0.457 seconds
Convex Hull (random projected Parabola) :0.3: 0.41 seconds
Convex Hull (weighted average) : 1.03 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 2.35 seconds
Convex Hull (random in unit circle) :0.3: 0.237 seconds
Convex Hull (random projected Parabola) :0.3: 0.22 seconds
Convex Hull (weighted average) : 0.532 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 1.25 seconds
Convex Hull (random in unit circle) :0.3: 0.137 seconds
Convex Hull (random projected Parabola) :0.3: 0.127 seconds
Convex Hull (weighted average) : 0.292 seconds

./runtest hullTest 10000000 16
Convex Hull (random on unit circle) :0.1: 0.759 seconds
Convex Hull (random in unit circle) :0.3: 0.101 seconds
Convex Hull (random projected Parabola) :0.3: 0.0966 seconds
Convex Hull (weighted average) : 0.193 seconds

./runtest hullTest 10000000 24
Convex Hull (random on unit circle) :0.1: 0.617 seconds
Convex Hull (random in unit circle) :0.3: 0.0941 seconds
Convex Hull (random projected Parabola) :0.3: 0.0879 seconds
Convex Hull (weighted average) : 0.166 seconds

./runtest hullTest 10000000 28
Convex Hull (random on unit circle) :0.1: 0.572 seconds
Convex Hull (random in unit circle) :0.3: 0.114 seconds
Convex Hull (random projected Parabola) :0.3: 0.0863 seconds
Convex Hull (weighted average) : 0.167 seconds

./runtest hullTest 10000000 32
Convex Hull (random on unit circle) :0.1: 0.545 seconds
Convex Hull (random in unit circle) :0.3: 0.0924 seconds
Convex Hull (random projected Parabola) :0.3: 0.0868 seconds
Convex Hull (weighted average) : 0.155 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 8.24 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 14.1 seconds
Minimum Spanning Tree (weighted average) : 11.2 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.54 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 8.14 seconds
Minimum Spanning Tree (weighted average) : 6.34 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 2.5 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 4.44 seconds
Minimum Spanning Tree (weighted average) : 3.47 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.4 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 2.43 seconds
Minimum Spanning Tree (weighted average) : 1.92 seconds

./runtest mstTest 10000000 16
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.867 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.39 seconds
Minimum Spanning Tree (weighted average) : 1.13 seconds

./runtest mstTest 10000000 24
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.748 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.14 seconds
Minimum Spanning Tree (weighted average) : 0.945 seconds

./runtest mstTest 10000000 28
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.691 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.18 seconds
Minimum Spanning Tree (weighted average) : 0.936 seconds

./runtest mstTest 10000000 32
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.647 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.31 seconds
Minimum Spanning Tree (weighted average) : 0.981 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 5.77 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 14 seconds
Minimum Spanning Tree (weighted average) : 9.9 seconds
