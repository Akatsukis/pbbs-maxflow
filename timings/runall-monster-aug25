HOSTNAME: monster
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 72
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 72
Last Changed Date: 2010-08-25 17:21:29 -0400 (Wed, 25 Aug 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.212 seconds
map (double, +1) : 0.35 seconds
map (char, +1)  : 0.199 seconds
map (char, isalpha) : 0.469 seconds
reduce (double, add) : 0.244 seconds
map reduce (char, add) : 0.226 seconds
max Index (double) : 0.233 seconds
scan (double, add, inplace) : 0.541 seconds
scan (double, add) : 0.6 seconds
scanI (double, add) : 0.726 seconds
scan (int, max) : 0.426 seconds
sequential scan (double, add) : 0.343 seconds
sequential scan (int, max) : 0.207 seconds
filter (double, odd) : 0.584 seconds
pack (double, odd) : 0.448 seconds
gather (int) : 2.72 seconds
gather (double) : 3.18 seconds
scatter (int) : 3.14 seconds
scatter (double) : 3.09 seconds
scatter contended (10^6) : 0.868 seconds
scatter contended (10^5) : 0.668 seconds
scatter CAS (int) : 14.5 seconds
scatter CAS contended (10^6) : 2.47 seconds
scatter CAS contended conditional (10^6) : 0.928 seconds
scatter CAS contended (10^5) : 1.72 seconds
scatter CAS contended conditional (10^5) : 0.796 seconds
partition : 0.21 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.107 seconds
map (double, +1) : 0.196 seconds
map (char, +1)  : 0.1 seconds
map (char, isalpha) : 0.237 seconds
reduce (double, add) : 0.123 seconds
map reduce (char, add) : 0.113 seconds
max Index (double) : 0.176 seconds
scan (double, add, inplace) : 0.333 seconds
scan (double, add) : 0.37 seconds
scanI (double, add) : 0.412 seconds
scan (int, max) : 0.23 seconds
sequential scan (double, add) : 0.404 seconds
sequential scan (int, max) : 0.31 seconds
filter (double, odd) : 0.317 seconds
pack (double, odd) : 0.25 seconds
gather (int) : 1.51 seconds
gather (double) : 1.49 seconds
scatter (int) : 1.55 seconds
scatter (double) : 1.56 seconds
scatter contended (10^6) : 0.739 seconds
scatter contended (10^5) : 0.826 seconds
scatter CAS (int) : 7.91 seconds
scatter CAS contended (10^6) : 3.44 seconds
scatter CAS contended conditional (10^6) : 1.05 seconds
scatter CAS contended (10^5) : 3.6 seconds
scatter CAS contended conditional (10^5) : 1.14 seconds
partition : 0.254 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.0673 seconds
map (double, +1) : 0.116 seconds
map (char, +1)  : 0.0507 seconds
map (char, isalpha) : 0.118 seconds
reduce (double, add) : 0.0818 seconds
map reduce (char, add) : 0.0565 seconds
max Index (double) : 0.0798 seconds
scan (double, add, inplace) : 0.18 seconds
scan (double, add) : 0.197 seconds
scanI (double, add) : 0.223 seconds
scan (int, max) : 0.118 seconds
sequential scan (double, add) : 0.437 seconds
sequential scan (int, max) : 0.306 seconds
filter (double, odd) : 0.209 seconds
pack (double, odd) : 0.152 seconds
gather (int) : 0.76 seconds
gather (double) : 0.813 seconds
scatter (int) : 0.815 seconds
scatter (double) : 0.857 seconds
scatter contended (10^6) : 0.422 seconds
scatter contended (10^5) : 0.471 seconds
scatter CAS (int) : 4.27 seconds
scatter CAS contended (10^6) : 2.32 seconds
scatter CAS contended conditional (10^6) : 0.589 seconds
scatter CAS contended (10^5) : 2.6 seconds
scatter CAS contended conditional (10^5) : 0.654 seconds
partition : 0.268 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0452 seconds
map (double, +1) : 0.0671 seconds
map (char, +1)  : 0.0275 seconds
map (char, isalpha) : 0.0605 seconds
reduce (double, add) : 0.0431 seconds
map reduce (char, add) : 0.0286 seconds
max Index (double) : 0.0443 seconds
scan (double, add, inplace) : 0.0987 seconds
scan (double, add) : 0.114 seconds
scanI (double, add) : 0.125 seconds
scan (int, max) : 0.0696 seconds
sequential scan (double, add) : 0.443 seconds
sequential scan (int, max) : 0.412 seconds
filter (double, odd) : 0.107 seconds
pack (double, odd) : 0.0803 seconds
gather (int) : 0.382 seconds
gather (double) : 0.41 seconds
scatter (int) : 0.465 seconds
scatter (double) : 0.444 seconds
scatter contended (10^6) : 0.228 seconds
scatter contended (10^5) : 0.256 seconds
scatter CAS (int) : 2.08 seconds
scatter CAS contended (10^6) : 1.25 seconds
scatter CAS contended conditional (10^6) : 0.324 seconds
scatter CAS contended (10^5) : 1.38 seconds
scatter CAS contended conditional (10^5) : 0.363 seconds
partition : 0.265 seconds

./runtest sequenceTest 100000000 16
tabulate (double) : 0.0381 seconds
map (double, +1) : 0.056 seconds
map (char, +1)  : 0.0142 seconds
map (char, isalpha) : 0.0309 seconds
reduce (double, add) : 0.025 seconds
map reduce (char, add) : 0.0143 seconds
max Index (double) : 0.0241 seconds
scan (double, add, inplace) : 0.0682 seconds
scan (double, add) : 0.0808 seconds
scanI (double, add) : 0.083 seconds
scan (int, max) : 0.046 seconds
sequential scan (double, add) : 0.466 seconds
sequential scan (int, max) : 0.284 seconds
filter (double, odd) : 0.0732 seconds
pack (double, odd) : 0.0528 seconds
gather (int) : 0.2 seconds
gather (double) : 0.213 seconds
scatter (int) : 0.29 seconds
scatter (double) : 0.289 seconds
scatter contended (10^6) : 0.17 seconds
scatter contended (10^5) : 0.184 seconds
scatter CAS (int) : 1.04 seconds
scatter CAS contended (10^6) : 0.679 seconds
scatter CAS contended conditional (10^6) : 0.182 seconds
scatter CAS contended (10^5) : 0.734 seconds
scatter CAS contended conditional (10^5) : 0.244 seconds
partition : 0.272 seconds

./runtest sequenceTest 100000000 24
tabulate (double) : 0.0337 seconds
map (double, +1) : 0.05 seconds
map (char, +1)  : 0.00946 seconds
map (char, isalpha) : 0.0203 seconds
reduce (double, add) : 0.02 seconds
map reduce (char, add) : 0.00969 seconds
max Index (double) : 0.02 seconds
scan (double, add, inplace) : 0.0567 seconds
scan (double, add) : 0.0712 seconds
scanI (double, add) : 0.0735 seconds
scan (int, max) : 0.0424 seconds
sequential scan (double, add) : 0.439 seconds
sequential scan (int, max) : 0.291 seconds
filter (double, odd) : 0.0596 seconds
pack (double, odd) : 0.0472 seconds
gather (int) : 0.14 seconds
gather (double) : 0.161 seconds
scatter (int) : 0.275 seconds
scatter (double) : 0.279 seconds
scatter contended (10^6) : 0.177 seconds
scatter contended (10^5) : 0.192 seconds
scatter CAS (int) : 0.695 seconds
scatter CAS contended (10^6) : 0.473 seconds
scatter CAS contended conditional (10^6) : 0.17 seconds
scatter CAS contended (10^5) : 0.498 seconds
scatter CAS contended conditional (10^5) : 0.225 seconds
partition : 0.28 seconds

./runtest sequenceTest 100000000 28
tabulate (double) : 0.0346 seconds
map (double, +1) : 0.0502 seconds
map (char, +1)  : 0.00864 seconds
map (char, isalpha) : 0.0176 seconds
reduce (double, add) : 0.0182 seconds
map reduce (char, add) : 0.00826 seconds
max Index (double) : 0.0186 seconds
scan (double, add, inplace) : 0.051 seconds
scan (double, add) : 0.0695 seconds
scanI (double, add) : 0.069 seconds
scan (int, max) : 0.0378 seconds
sequential scan (double, add) : 0.444 seconds
sequential scan (int, max) : 0.272 seconds
filter (double, odd) : 0.0567 seconds
pack (double, odd) : 0.0436 seconds
gather (int) : 0.132 seconds
gather (double) : 0.154 seconds
scatter (int) : 0.254 seconds
scatter (double) : 0.269 seconds
scatter contended (10^6) : 0.178 seconds
scatter contended (10^5) : 0.194 seconds
scatter CAS (int) : 0.599 seconds
scatter CAS contended (10^6) : 0.412 seconds
scatter CAS contended conditional (10^6) : 0.168 seconds
scatter CAS contended (10^5) : 0.43 seconds
scatter CAS contended conditional (10^5) : 0.229 seconds
partition : 0.275 seconds

./runtest sequenceTest 100000000 32
tabulate (double) : 0.0355 seconds
map (double, +1) : 0.0502 seconds
map (char, +1)  : 0.00809 seconds
map (char, isalpha) : 0.0156 seconds
reduce (double, add) : 0.0176 seconds
map reduce (char, add) : 0.00733 seconds
max Index (double) : 0.0188 seconds
scan (double, add, inplace) : 0.0492 seconds
scan (double, add) : 0.0687 seconds
scanI (double, add) : 0.0708 seconds
scan (int, max) : 0.0345 seconds
sequential scan (double, add) : 0.44 seconds
sequential scan (int, max) : 0.278 seconds
filter (double, odd) : 0.0599 seconds
pack (double, odd) : 0.0458 seconds
gather (int) : 0.128 seconds
gather (double) : 0.153 seconds
scatter (int) : 0.243 seconds
scatter (double) : 0.265 seconds
scatter contended (10^6) : 0.176 seconds
scatter contended (10^5) : 0.192 seconds
scatter CAS (int) : 0.528 seconds
scatter CAS contended (10^6) : 0.364 seconds
scatter CAS contended conditional (10^6) : 0.172 seconds
scatter CAS contended (10^5) : 0.378 seconds
scatter CAS contended conditional (10^5) : 0.241 seconds
partition : 0.276 seconds

./runtest mergeTest 100000000 1
Merge : 0.299 seconds

./runtest mergeTest 100000000 2
Merge : 0.209 seconds

./runtest mergeTest 100000000 4
Merge : 0.183 seconds

./runtest mergeTest 100000000 8
Merge : 0.179 seconds

./runtest mergeTest 100000000 16
Merge : 0.18 seconds

./runtest mergeTest 100000000 24
Merge : 0.181 seconds

./runtest mergeTest 100000000 28
Merge : 0.184 seconds

./runtest mergeTest 100000000 32
Merge : 0.183 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 4.93 seconds
Integer Sort (32 bit, exponential) :0.1: 4.2 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 1.07 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 7.45 seconds
Integer Sort (weighted average) : 5.02 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 2.79 seconds
Integer Sort (32 bit, exponential) :0.1: 2.48 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.614 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 4.59 seconds
Integer Sort (weighted average) : 3.01 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 1.53 seconds
Integer Sort (32 bit, exponential) :0.1: 1.41 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.368 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.51 seconds
Integer Sort (weighted average) : 1.66 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.901 seconds
Integer Sort (32 bit, exponential) :0.1: 0.855 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.219 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.39 seconds
Integer Sort (weighted average) : 0.951 seconds

./runtest intSortTest 100000000 16
Integer Sort (32 bit, random) :0.1: 0.433 seconds
Integer Sort (32 bit, exponential) :0.1: 0.4 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.106 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.749 seconds
Integer Sort (weighted average) : 0.488 seconds

./runtest intSortTest 100000000 24
Integer Sort (32 bit, random) :0.1: 0.332 seconds
Integer Sort (32 bit, exponential) :0.1: 0.311 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0764 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.577 seconds
Integer Sort (weighted average) : 0.375 seconds

./runtest intSortTest 100000000 28
Integer Sort (32 bit, random) :0.1: 0.333 seconds
Integer Sort (32 bit, exponential) :0.1: 0.325 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0814 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.583 seconds
Integer Sort (weighted average) : 0.381 seconds

./runtest intSortTest 100000000 32
Integer Sort (32 bit, random) :0.1: 0.313 seconds
Integer Sort (32 bit, exponential) :0.1: 0.308 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0757 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.587 seconds
Integer Sort (weighted average) : 0.374 seconds

./runtest quickSortTest 10000000 1
Comparison Sort (double, random) :0.1: 1.55 seconds
Comparison Sort (double, exponential) :0.1: 1.05 seconds
Comparison Sort (double, almost sorted) :0.1: 0.357 seconds
Comparison Sort (trigram strings adjacent) :0.2: 4.26 seconds
Comparison Sort (trigram strings, random layout) :0.2: 5.53 seconds
Comparison Sort (double with 4 x double payload) :0.3: 2.1 seconds
Comparison Sort (weighted average) : 2.88 seconds

./runtest quickSortTest 10000000 2
Comparison Sort (double, random) :0.1: 0.802 seconds
Comparison Sort (double, exponential) :0.1: 0.564 seconds
Comparison Sort (double, almost sorted) :0.1: 0.197 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.57 seconds
Comparison Sort (trigram strings, random layout) :0.2: 3.3 seconds
Comparison Sort (double with 4 x double payload) :0.3: 1.16 seconds
Comparison Sort (weighted average) : 1.68 seconds

./runtest quickSortTest 10000000 4
Comparison Sort (double, random) :0.1: 0.438 seconds
Comparison Sort (double, exponential) :0.1: 0.337 seconds
Comparison Sort (double, almost sorted) :0.1: 0.124 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.43 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.16 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.711 seconds
Comparison Sort (weighted average) : 1.02 seconds

./runtest quickSortTest 10000000 8
Comparison Sort (double, random) :0.1: 0.269 seconds
Comparison Sort (double, exponential) :0.1: 0.236 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0867 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.906 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.67 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.532 seconds
Comparison Sort (weighted average) : 0.735 seconds

./runtest quickSortTest 10000000 16
Comparison Sort (double, random) :0.1: 0.207 seconds
Comparison Sort (double, exponential) :0.1: 0.198 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0676 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.807 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.68 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.452 seconds
Comparison Sort (weighted average) : 0.681 seconds

./runtest quickSortTest 10000000 24
Comparison Sort (double, random) :0.1: 0.194 seconds
Comparison Sort (double, exponential) :0.1: 0.19 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0706 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.953 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.76 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.532 seconds
Comparison Sort (weighted average) : 0.747 seconds

./runtest quickSortTest 10000000 28
Comparison Sort (double, random) :0.1: 0.193 seconds
Comparison Sort (double, exponential) :0.1: 0.192 seconds
Comparison Sort (double, almost sorted) :0.1: 0.079 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.959 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.78 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.477 seconds
Comparison Sort (weighted average) : 0.737 seconds

./runtest quickSortTest 10000000 32
Comparison Sort (double, random) :0.1: 0.194 seconds
Comparison Sort (double, exponential) :0.1: 0.192 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0651 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.826 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.62 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.508 seconds
Comparison Sort (weighted average) : 0.686 seconds

./runtest sampleSortTest 10000000 1
Comparison Sort (double, random) :0.1: 1.96 seconds
Comparison Sort (double, exponential) :0.1: 1.46 seconds
Comparison Sort (double, almost sorted) :0.1: 0.585 seconds
Comparison Sort (trigram strings adjacent) :0.2: 3.11 seconds
Comparison Sort (trigram strings, random layout) :0.2: 4.42 seconds
Comparison Sort (double with 4 x double payload) :0.3: 2.59 seconds
Comparison Sort (weighted average) : 2.68 seconds

./runtest sampleSortTest 10000000 2
Comparison Sort (double, random) :0.1: 1.02 seconds
Comparison Sort (double, exponential) :0.1: 0.773 seconds
Comparison Sort (double, almost sorted) :0.1: 0.345 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.87 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.33 seconds
Comparison Sort (double with 4 x double payload) :0.3: 1.41 seconds
Comparison Sort (weighted average) : 1.48 seconds

./runtest sampleSortTest 10000000 4
Comparison Sort (double, random) :0.1: 0.522 seconds
Comparison Sort (double, exponential) :0.1: 0.395 seconds
Comparison Sort (double, almost sorted) :0.1: 0.17 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.959 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.2 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.737 seconds
Comparison Sort (weighted average) : 0.761 seconds

./runtest sampleSortTest 10000000 8
Comparison Sort (double, random) :0.1: 0.275 seconds
Comparison Sort (double, exponential) :0.1: 0.205 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0946 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.493 seconds
Comparison Sort (trigram strings, random layout) :0.2: 0.599 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.404 seconds
Comparison Sort (weighted average) : 0.397 seconds

./runtest sampleSortTest 10000000 16
Comparison Sort (double, random) :0.1: 0.16 seconds
Comparison Sort (double, exponential) :0.1: 0.11 seconds
Comparison Sort (double, almost sorted) :0.1: 0.059 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.264 seconds
Comparison Sort (trigram strings, random layout) :0.2: 0.314 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.272 seconds
Comparison Sort (weighted average) : 0.23 seconds

./runtest sampleSortTest 10000000 24
Comparison Sort (double, random) :0.1: 0.129 seconds
Comparison Sort (double, exponential) :0.1: 0.0832 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0363 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.194 seconds
Comparison Sort (trigram strings, random layout) :0.2: 0.218 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.215 seconds
Comparison Sort (weighted average) : 0.172 seconds

./runtest sampleSortTest 10000000 28
Comparison Sort (double, random) :0.1: 0.123 seconds
Comparison Sort (double, exponential) :0.1: 0.0823 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0453 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.177 seconds
Comparison Sort (trigram strings, random layout) :0.2: 0.199 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.224 seconds
Comparison Sort (weighted average) : 0.167 seconds

./runtest sampleSortTest 10000000 32
Comparison Sort (double, random) :0.1: 0.115 seconds
Comparison Sort (double, exponential) :0.1: 0.0689 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0444 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.163 seconds
Comparison Sort (trigram strings, random layout) :0.2: 0.178 seconds
Comparison Sort (double with 4 x double payload) :0.3: 0.215 seconds
Comparison Sort (weighted average) : 0.156 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 1.05 seconds
Remove Duplicates (int, exponential) :0.1: 0.697 seconds
Remove Duplicates (trigram strings) :0.2: 1.24 seconds
Remove Duplicates (weighted average) : 1.05 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.605 seconds
Remove Duplicates (int, exponential) :0.1: 0.394 seconds
Remove Duplicates (trigram strings) :0.2: 0.708 seconds
Remove Duplicates (weighted average) : 0.604 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.323 seconds
Remove Duplicates (int, exponential) :0.1: 0.194 seconds
Remove Duplicates (trigram strings) :0.2: 0.374 seconds
Remove Duplicates (weighted average) : 0.316 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.174 seconds
Remove Duplicates (int, exponential) :0.1: 0.0982 seconds
Remove Duplicates (trigram strings) :0.2: 0.218 seconds
Remove Duplicates (weighted average) : 0.177 seconds

./runtest remDuplicatesTest 10000000 16
Remove Duplicates (int, random in n) :0.1: 0.129 seconds
Remove Duplicates (int, exponential) :0.1: 0.102 seconds
Remove Duplicates (trigram strings) :0.2: 0.155 seconds
Remove Duplicates (weighted average) : 0.136 seconds

./runtest remDuplicatesTest 10000000 24
Remove Duplicates (int, random in n) :0.1: 0.0956 seconds
Remove Duplicates (int, exponential) :0.1: 0.0376 seconds
Remove Duplicates (trigram strings) :0.2: 0.134 seconds
Remove Duplicates (weighted average) : 0.1 seconds

./runtest remDuplicatesTest 10000000 28
Remove Duplicates (int, random in n) :0.1: 0.0923 seconds
Remove Duplicates (int, exponential) :0.1: 0.0342 seconds
Remove Duplicates (trigram strings) :0.2: 0.132 seconds
Remove Duplicates (weighted average) : 0.0977 seconds

./runtest remDuplicatesTest 10000000 32
Remove Duplicates (int, random in n) :0.1: 0.126 seconds
Remove Duplicates (int, exponential) :0.1: 0.0666 seconds
Remove Duplicates (trigram strings) :0.2: 0.127 seconds
Remove Duplicates (weighted average) : 0.112 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 1.15 seconds
Table (trigram words, insert and find) :0.2: 1.74 seconds
Table (weighted average) : 1.54 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.667 seconds
Table (trigram words, insert and find) :0.2: 0.952 seconds
Table (weighted average) : 0.857 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.354 seconds
Table (trigram words, insert and find) :0.2: 0.476 seconds
Table (weighted average) : 0.435 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.182 seconds
Table (trigram words, insert and find) :0.2: 0.245 seconds
Table (weighted average) : 0.224 seconds

./runtest tableTest 10000000 16
Table (random in n, insert and find) :0.1: 0.104 seconds
Table (trigram words, insert and find) :0.2: 0.137 seconds
Table (weighted average) : 0.126 seconds

./runtest tableTest 10000000 24
Table (random in n, insert and find) :0.1: 0.0778 seconds
Table (trigram words, insert and find) :0.2: 0.104 seconds
Table (weighted average) : 0.0956 seconds

./runtest tableTest 10000000 28
Table (random in n, insert and find) :0.1: 0.0708 seconds
Table (trigram words, insert and find) :0.2: 0.0963 seconds
Table (weighted average) : 0.0878 seconds

./runtest tableTest 10000000 32
Table (random in n, insert and find) :0.1: 0.0653 seconds
Table (trigram words, insert and find) :0.2: 0.088 seconds
Table (weighted average) : 0.0805 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.99 seconds
Maximal Independent Set (2d grid) :0.2: 0.914 seconds
Maximal Independent Set (weighted average) : 1.27 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.937 seconds
Maximal Independent Set (2d grid) :0.2: 0.463 seconds
Maximal Independent Set (weighted average) : 0.621 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.515 seconds
Maximal Independent Set (2d grid) :0.2: 0.262 seconds
Maximal Independent Set (weighted average) : 0.346 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.272 seconds
Maximal Independent Set (2d grid) :0.2: 0.151 seconds
Maximal Independent Set (weighted average) : 0.191 seconds

./runtest maxIndSetTest 10000000 16
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.146 seconds
Maximal Independent Set (2d grid) :0.2: 0.0989 seconds
Maximal Independent Set (weighted average) : 0.115 seconds

./runtest maxIndSetTest 10000000 24
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.109 seconds
Maximal Independent Set (2d grid) :0.2: 0.0773 seconds
Maximal Independent Set (weighted average) : 0.088 seconds

./runtest maxIndSetTest 10000000 28
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.112 seconds
Maximal Independent Set (2d grid) :0.2: 0.0758 seconds
Maximal Independent Set (weighted average) : 0.0878 seconds

./runtest maxIndSetTest 10000000 32
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.106 seconds
Maximal Independent Set (2d grid) :0.2: 0.0789 seconds
Maximal Independent Set (weighted average) : 0.088 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 6.06 seconds
Color Graph (2d grid) :0.1: 1.81 seconds
Color Graph (weighted average) : 3.94 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 3.55 seconds
Color Graph (2d grid) :0.1: 1.03 seconds
Color Graph (weighted average) : 2.29 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.94 seconds
Color Graph (2d grid) :0.1: 0.6 seconds
Color Graph (weighted average) : 1.27 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 1.04 seconds
Color Graph (2d grid) :0.1: 0.338 seconds
Color Graph (weighted average) : 0.688 seconds

./runtest colorGraphTest 10000000 16
Color Graph (rand dim=2, m=n*10) :0.1: 0.559 seconds
Color Graph (2d grid) :0.1: 0.193 seconds
Color Graph (weighted average) : 0.376 seconds

./runtest colorGraphTest 10000000 24
Color Graph (rand dim=2, m=n*10) :0.1: 0.424 seconds
Color Graph (2d grid) :0.1: 0.17 seconds
Color Graph (weighted average) : 0.297 seconds

./runtest colorGraphTest 10000000 28
Color Graph (rand dim=2, m=n*10) :0.1: 0.407 seconds
Color Graph (2d grid) :0.1: 0.169 seconds
Color Graph (weighted average) : 0.288 seconds

./runtest colorGraphTest 10000000 32
Color Graph (rand dim=2, m=n*10) :0.1: 0.417 seconds
Color Graph (2d grid) :0.1: 0.176 seconds
Color Graph (weighted average) : 0.297 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 1.2 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 2.22 seconds
Maximal Matching (2d mesh) :0.1: 1.81 seconds
Maximal Matching (weighted average) : 1.74 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.719 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.39 seconds
Maximal Matching (2d mesh) :0.1: 1.15 seconds
Maximal Matching (weighted average) : 1.09 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.404 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.789 seconds
Maximal Matching (2d mesh) :0.1: 0.633 seconds
Maximal Matching (weighted average) : 0.609 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.216 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.414 seconds
Maximal Matching (2d mesh) :0.1: 0.384 seconds
Maximal Matching (weighted average) : 0.338 seconds

./runtest maxMatchingTest 10000000 16
Maximal Matching (tree rand parent) :0.1: 0.145 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.301 seconds
Maximal Matching (2d mesh) :0.1: 0.274 seconds
Maximal Matching (weighted average) : 0.24 seconds

./runtest maxMatchingTest 10000000 24
Maximal Matching (tree rand parent) :0.1: 0.123 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.232 seconds
Maximal Matching (2d mesh) :0.1: 0.243 seconds
Maximal Matching (weighted average) : 0.199 seconds

./runtest maxMatchingTest 10000000 28
Maximal Matching (tree rand parent) :0.1: 0.118 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.266 seconds
Maximal Matching (2d mesh) :0.1: 0.243 seconds
Maximal Matching (weighted average) : 0.209 seconds

./runtest maxMatchingTest 10000000 32
Maximal Matching (tree rand parent) :0.1: 0.114 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.264 seconds
Maximal Matching (2d mesh) :0.1: 0.232 seconds
Maximal Matching (weighted average) : 0.203 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 17.7 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 49.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 33.7 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 10.4 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 27.7 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 19.1 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 5.94 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 14.9 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 10.4 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 3.19 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 7.84 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 5.52 seconds

./runtest separatorTest 10000000 16
Separator (2d mesh) :0.1: 2.16 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 4.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 3.38 seconds

./runtest separatorTest 10000000 24
Separator (2d mesh) :0.1: 1.86 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.63 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.75 seconds

./runtest separatorTest 10000000 28
Separator (2d mesh) :0.1: 1.74 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.39 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.57 seconds

./runtest separatorTest 10000000 32
Separator (2d mesh) :0.1: 1.67 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.21 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.44 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 4.04 seconds
BFS (return BFS tree) (3d grid) :0.1: 3 seconds
BFS (weighted average) : 3.69 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 2.4 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.19 seconds
BFS (weighted average) : 2.33 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.3 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.49 seconds
BFS (weighted average) : 1.37 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.672 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.805 seconds
BFS (weighted average) : 0.716 seconds

./runtest bfsTest 10000000 16
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.356 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.513 seconds
BFS (weighted average) : 0.408 seconds

./runtest bfsTest 10000000 24
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.265 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.409 seconds
BFS (weighted average) : 0.313 seconds

./runtest bfsTest 10000000 28
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.244 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.385 seconds
BFS (weighted average) : 0.291 seconds

./runtest bfsTest 10000000 32
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.226 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.376 seconds
BFS (weighted average) : 0.276 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 86.6 seconds
Delaunay (random points in kuzmin distribution) :0.1: 96.3 seconds
Delaunay (weighted average) : 91.4 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 51.5 seconds
Delaunay (random points in kuzmin distribution) :0.1: 59 seconds
Delaunay (weighted average) : 55.2 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 27.9 seconds
Delaunay (random points in kuzmin distribution) :0.1: 31.5 seconds
Delaunay (weighted average) : 29.7 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 14 seconds
Delaunay (random points in kuzmin distribution) :0.1: 15.9 seconds
Delaunay (weighted average) : 14.9 seconds

./runtest delaunayTest 10000000 16
Delaunay (random points in square) :0.1: 7.56 seconds
Delaunay (random points in kuzmin distribution) :0.1: 9.1 seconds
Delaunay (weighted average) : 8.33 seconds

./runtest delaunayTest 10000000 24
Delaunay (random points in square) :0.1: 5.56 seconds
Delaunay (random points in kuzmin distribution) :0.1: 7.15 seconds
Delaunay (weighted average) : 6.36 seconds

./runtest delaunayTest 10000000 28
Delaunay (random points in square) :0.1: 4.94 seconds
Delaunay (random points in kuzmin distribution) :0.1: 6.65 seconds
Delaunay (weighted average) : 5.8 seconds

./runtest delaunayTest 10000000 32
Delaunay (random points in square) :0.1: 4.62 seconds
Delaunay (random points in kuzmin distribution) :0.1: 6.34 seconds
Delaunay (weighted average) : 5.48 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 3d, k=1) build tree : 5.66 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 13.9 seconds
k-nearest neighbors (random 2d, k=1) build tree : 5.75 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 8.63 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 3d, k=1) build tree : 3.6 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 8.76 seconds
k-nearest neighbors (random 2d, k=1) build tree : 3.51 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 5.06 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 3d, k=1) build tree : 2.03 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 4.14 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.89 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 2.65 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 3d, k=1) build tree : 1.92 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 2.34 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.17 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 1.31 seconds

./runtest nearestNeighborTest 10000000 16
k-nearest neighbors (random 3d, k=1) build tree : 1.91 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 1.04 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.07 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.667 seconds

./runtest nearestNeighborTest 10000000 24
k-nearest neighbors (random 3d, k=1) build tree : 1.85 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 0.699 seconds
k-nearest neighbors (random 2d, k=1) build tree : 0.84 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.463 seconds

./runtest nearestNeighborTest 10000000 28
k-nearest neighbors (random 3d, k=1) build tree : 1.55 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 0.615 seconds
k-nearest neighbors (random 2d, k=1) build tree : 0.737 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.405 seconds

./runtest nearestNeighborTest 10000000 32
k-nearest neighbors (random 3d, k=1) build tree : 3.33 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 0.677 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.34 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.396 seconds

./runtest mvMultiply 5000000 1
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.424 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.414 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.304 seconds

./runtest mvMultiply 5000000 2
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.267 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.463 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.169 seconds

./runtest mvMultiply 5000000 4
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.135 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.577 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.101 seconds

./runtest mvMultiply 5000000 8
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0708 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.586 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0534 seconds

./runtest mvMultiply 5000000 16
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0408 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.601 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0342 seconds

./runtest mvMultiply 5000000 24
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.032 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.558 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0444 seconds

./runtest mvMultiply 5000000 28
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0316 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.585 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0338 seconds

./runtest mvMultiply 5000000 32
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0309 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.579 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0337 seconds

./runtest barnesHut 1000000 1
Barnes Hut (build tree) : 0.434 seconds
Barnes Hut (calculate forces) : 35.5 seconds

./runtest barnesHut 1000000 2
Barnes Hut (build tree) : 0.249 seconds
Barnes Hut (calculate forces) : 18.7 seconds

./runtest barnesHut 1000000 4
Barnes Hut (build tree) : 0.173 seconds
Barnes Hut (calculate forces) : 10.5 seconds

./runtest barnesHut 1000000 8
Barnes Hut (build tree) : 0.173 seconds
Barnes Hut (calculate forces) : 5.18 seconds

./runtest barnesHut 1000000 16
Barnes Hut (build tree) : 0.165 seconds
Barnes Hut (calculate forces) : 2.63 seconds

./runtest barnesHut 1000000 24
Barnes Hut (build tree) : 0.169 seconds
Barnes Hut (calculate forces) : 1.78 seconds

./runtest barnesHut 1000000 28
Barnes Hut (build tree) : 0.161 seconds
Barnes Hut (calculate forces) : 1.55 seconds

./runtest barnesHut 1000000 32
Barnes Hut (build tree) : 0.18 seconds
Barnes Hut (calculate forces) : 1.39 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 5.39 seconds
Suffix Array (equal string) :0.1: 2.05 seconds
Suffix Array (repeated string) :0.1: 3.46 seconds
Suffix Array (weighted average) : 4.33 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.88 seconds
Suffix Array (equal string) :0.1: 1.13 seconds
Suffix Array (repeated string) :0.1: 2.26 seconds
Suffix Array (weighted average) : 2.4 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.48 seconds
Suffix Array (equal string) :0.1: 0.618 seconds
Suffix Array (repeated string) :0.1: 1.38 seconds
Suffix Array (weighted average) : 1.29 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.803 seconds
Suffix Array (equal string) :0.1: 0.383 seconds
Suffix Array (repeated string) :0.1: 0.953 seconds
Suffix Array (weighted average) : 0.749 seconds

./runtest suffixArrayTest 10000000 16
Suffix Array (trigram string) :0.3: 0.509 seconds
Suffix Array (equal string) :0.1: 0.28 seconds
Suffix Array (repeated string) :0.1: 0.63 seconds
Suffix Array (weighted average) : 0.487 seconds

./runtest suffixArrayTest 10000000 24
Suffix Array (trigram string) :0.3: 0.376 seconds
Suffix Array (equal string) :0.1: 0.225 seconds
Suffix Array (repeated string) :0.1: 0.525 seconds
Suffix Array (weighted average) : 0.376 seconds

./runtest suffixArrayTest 10000000 28
Suffix Array (trigram string) :0.3: 0.363 seconds
Suffix Array (equal string) :0.1: 0.235 seconds
Suffix Array (repeated string) :0.1: 0.419 seconds
Suffix Array (weighted average) : 0.349 seconds

./runtest suffixArrayTest 10000000 32
Suffix Array (trigram string) :0.3: 0.332 seconds
Suffix Array (equal string) :0.1: 0.242 seconds
Suffix Array (repeated string) :0.1: 0.366 seconds
Suffix Array (weighted average) : 0.321 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 9.3 seconds
Convex Hull (random in unit circle) :0.3: 0.752 seconds
Convex Hull (random projected Parabola) :0.3: 0.952 seconds
Convex Hull (weighted average) : 2.06 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 4.79 seconds
Convex Hull (random in unit circle) :0.3: 0.458 seconds
Convex Hull (random projected Parabola) :0.3: 0.578 seconds
Convex Hull (weighted average) : 1.13 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 2.44 seconds
Convex Hull (random in unit circle) :0.3: 0.239 seconds
Convex Hull (random projected Parabola) :0.3: 0.301 seconds
Convex Hull (weighted average) : 0.58 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 1.35 seconds
Convex Hull (random in unit circle) :0.3: 0.151 seconds
Convex Hull (random projected Parabola) :0.3: 0.175 seconds
Convex Hull (weighted average) : 0.333 seconds

./runtest hullTest 10000000 16
Convex Hull (random on unit circle) :0.1: 0.849 seconds
Convex Hull (random in unit circle) :0.3: 0.101 seconds
Convex Hull (random projected Parabola) :0.3: 0.136 seconds
Convex Hull (weighted average) : 0.223 seconds

./runtest hullTest 10000000 24
Convex Hull (random on unit circle) :0.1: 0.74 seconds
Convex Hull (random in unit circle) :0.3: 0.0937 seconds
Convex Hull (random projected Parabola) :0.3: 0.123 seconds
Convex Hull (weighted average) : 0.199 seconds

./runtest hullTest 10000000 28
Convex Hull (random on unit circle) :0.1: 0.703 seconds
Convex Hull (random in unit circle) :0.3: 0.113 seconds
Convex Hull (random projected Parabola) :0.3: 0.123 seconds
Convex Hull (weighted average) : 0.202 seconds

./runtest hullTest 10000000 32
Convex Hull (random on unit circle) :0.1: 0.699 seconds
Convex Hull (random in unit circle) :0.3: 0.0938 seconds
Convex Hull (random projected Parabola) :0.3: 0.154 seconds
Convex Hull (weighted average) : 0.206 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 8.71 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 20 seconds
Minimum Spanning Tree (weighted average) : 14.4 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.99 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 11.3 seconds
Minimum Spanning Tree (weighted average) : 8.14 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 2.72 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 6.13 seconds
Minimum Spanning Tree (weighted average) : 4.42 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.44 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 3.22 seconds
Minimum Spanning Tree (weighted average) : 2.33 seconds

./runtest mstTest 10000000 16
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.855 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.8 seconds
Minimum Spanning Tree (weighted average) : 1.33 seconds

./runtest mstTest 10000000 24
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.66 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.58 seconds
Minimum Spanning Tree (weighted average) : 1.12 seconds

./runtest mstTest 10000000 28
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.607 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.26 seconds
Minimum Spanning Tree (weighted average) : 0.936 seconds

./runtest mstTest 10000000 32
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.571 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.16 seconds
Minimum Spanning Tree (weighted average) : 0.867 seconds
