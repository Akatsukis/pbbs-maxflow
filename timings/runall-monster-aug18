hostname: monster

./sequenceTest 100000000 -cilk_set_worker_count 1
tabulate (double) : 0.214 seconds
map (double, +1) : 0.35 seconds
map (char, +1)  : 0.2 seconds
map (char, isalpha) : 0.469 seconds
reduce (double, add) : 0.244 seconds
map reduce (char, add) : 0.226 seconds
max Index (double) : 0.233 seconds
scan (double, add, inplace) : 0.547 seconds
scan (double, add) : 0.604 seconds
scanI (double, add) : 0.729 seconds
scan (int, max) : 0.428 seconds
sequential scan (double, add) : 0.343 seconds
sequential scan (int, max) : 0.216 seconds
filter (double, odd) : 0.613 seconds
pack (double, odd) : 0.472 seconds
gather (int) : 2.72 seconds
gather (double) : 2.9 seconds
scatter (int) : 2.88 seconds
scatter (double) : 3.05 seconds
scatter contended (10^6) : 0.87 seconds
scatter contended (10^5) : 0.66 seconds
scatter CAS (int) : 14.4 seconds
scatter CAS contended (10^6) : 2.48 seconds
scatter CAS contended conditional (10^6) : 0.699 seconds
scatter CAS contended (10^5) : 1.72 seconds
scatter CAS contended conditional (10^5) : 0.444 seconds

./sequenceTest 100000000 -cilk_set_worker_count 2
tabulate (double) : 0.107 seconds
map (double, +1) : 0.251 seconds
map (char, +1)  : 0.101 seconds
map (char, isalpha) : 0.236 seconds
reduce (double, add) : 0.178 seconds
map reduce (char, add) : 0.113 seconds
max Index (double) : 0.16 seconds
scan (double, add, inplace) : 0.332 seconds
scan (double, add) : 0.374 seconds
scanI (double, add) : 0.403 seconds
scan (int, max) : 0.232 seconds
sequential scan (double, add) : 0.405 seconds
sequential scan (int, max) : 0.268 seconds
filter (double, odd) : 0.394 seconds
pack (double, odd) : 0.294 seconds
gather (int) : 1.51 seconds
gather (double) : 1.59 seconds
scatter (int) : 1.5 seconds
scatter (double) : 1.58 seconds
scatter contended (10^6) : 0.735 seconds
scatter contended (10^5) : 0.795 seconds
scatter CAS (int) : 8.26 seconds
scatter CAS contended (10^6) : 3.39 seconds
scatter CAS contended conditional (10^6) : 0.365 seconds
scatter CAS contended (10^5) : 3.56 seconds
scatter CAS contended conditional (10^5) : 0.229 seconds

./sequenceTest 100000000 -cilk_set_worker_count 4
tabulate (double) : 0.0712 seconds
map (double, +1) : 0.122 seconds
map (char, +1)  : 0.0507 seconds
map (char, isalpha) : 0.118 seconds
reduce (double, add) : 0.0897 seconds
map reduce (char, add) : 0.0569 seconds
max Index (double) : 0.0761 seconds
scan (double, add, inplace) : 0.178 seconds
scan (double, add) : 0.211 seconds
scanI (double, add) : 0.221 seconds
scan (int, max) : 0.129 seconds
sequential scan (double, add) : 0.404 seconds
sequential scan (int, max) : 0.256 seconds
filter (double, odd) : 0.209 seconds
pack (double, odd) : 0.213 seconds
gather (int) : 0.761 seconds
gather (double) : 0.811 seconds
scatter (int) : 0.824 seconds
scatter (double) : 0.867 seconds
scatter contended (10^6) : 0.405 seconds
scatter contended (10^5) : 0.453 seconds
scatter CAS (int) : 4.11 seconds
scatter CAS contended (10^6) : 1.89 seconds
scatter CAS contended conditional (10^6) : 0.221 seconds
scatter CAS contended (10^5) : 2.17 seconds
scatter CAS contended conditional (10^5) : 0.112 seconds

./sequenceTest 100000000 -cilk_set_worker_count 8
tabulate (double) : 0.0463 seconds
map (double, +1) : 0.0821 seconds
map (char, +1)  : 0.0367 seconds
map (char, isalpha) : 0.0592 seconds
reduce (double, add) : 0.0442 seconds
map reduce (char, add) : 0.028 seconds
max Index (double) : 0.0436 seconds
scan (double, add, inplace) : 0.104 seconds
scan (double, add) : 0.12 seconds
scanI (double, add) : 0.123 seconds
scan (int, max) : 0.0724 seconds
sequential scan (double, add) : 0.437 seconds
sequential scan (int, max) : 0.286 seconds
filter (double, odd) : 0.114 seconds
pack (double, odd) : 0.0848 seconds
gather (int) : 0.38 seconds
gather (double) : 0.407 seconds
scatter (int) : 0.491 seconds
scatter (double) : 0.447 seconds
scatter contended (10^6) : 0.229 seconds
scatter contended (10^5) : 0.255 seconds
scatter CAS (int) : 2.08 seconds
scatter CAS contended (10^6) : 1.2 seconds
scatter CAS contended conditional (10^6) : 0.101 seconds
scatter CAS contended (10^5) : 1.35 seconds
scatter CAS contended conditional (10^5) : 0.0601 seconds

./sequenceTest 100000000 -cilk_set_worker_count 16
tabulate (double) : 0.234 seconds
map (double, +1) : 0.231 seconds
map (char, +1)  : 0.0137 seconds
map (char, isalpha) : 0.035 seconds
reduce (double, add) : 0.0249 seconds
map reduce (char, add) : 0.0143 seconds
max Index (double) : 0.0244 seconds
scan (double, add, inplace) : 0.0655 seconds
scan (double, add) : 0.257 seconds
scanI (double, add) : 0.0814 seconds
scan (int, max) : 0.0429 seconds
sequential scan (double, add) : 0.425 seconds
sequential scan (int, max) : 0.266 seconds
filter (double, odd) : 0.147 seconds
pack (double, odd) : 0.123 seconds
gather (int) : 0.197 seconds
gather (double) : 0.211 seconds
scatter (int) : 0.37 seconds
scatter (double) : 0.505 seconds
scatter contended (10^6) : 0.115 seconds
scatter contended (10^5) : 0.129 seconds
scatter CAS (int) : 1.05 seconds
scatter CAS contended (10^6) : 0.67 seconds
scatter CAS contended conditional (10^6) : 0.0495 seconds
scatter CAS contended (10^5) : 0.725 seconds
scatter CAS contended conditional (10^5) : 0.0323 seconds

./sequenceTest 100000000 -cilk_set_worker_count 24
tabulate (double) : 0.238 seconds
map (double, +1) : 0.236 seconds
map (char, +1)  : 0.0113 seconds
map (char, isalpha) : 0.0218 seconds
reduce (double, add) : 0.0211 seconds
map reduce (char, add) : 0.0109 seconds
max Index (double) : 0.021 seconds
scan (double, add, inplace) : 0.0587 seconds
scan (double, add) : 0.26 seconds
scanI (double, add) : 0.0748 seconds
scan (int, max) : 0.0413 seconds
sequential scan (double, add) : 0.438 seconds
sequential scan (int, max) : 0.283 seconds
filter (double, odd) : 0.0611 seconds
pack (double, odd) : 0.0452 seconds
gather (int) : 0.153 seconds
gather (double) : 0.17 seconds
scatter (int) : 0.284 seconds
scatter (double) : 0.294 seconds
scatter contended (10^6) : 0.176 seconds
scatter contended (10^5) : 0.191 seconds
scatter CAS (int) : 0.782 seconds
scatter CAS contended (10^6) : 0.511 seconds
scatter CAS contended conditional (10^6) : 0.0381 seconds
scatter CAS contended (10^5) : 0.538 seconds
scatter CAS contended conditional (10^5) : 0.0242 seconds

./sequenceTest 100000000 -cilk_set_worker_count 28
tabulate (double) : 0.237 seconds
map (double, +1) : 0.0578 seconds
map (char, +1)  : 0.00958 seconds
map (char, isalpha) : 0.0192 seconds
reduce (double, add) : 0.0201 seconds
map reduce (char, add) : 0.0133 seconds
max Index (double) : 0.0202 seconds
scan (double, add, inplace) : 0.0554 seconds
scan (double, add) : 0.0691 seconds
scanI (double, add) : 0.254 seconds
scan (int, max) : 0.0416 seconds
sequential scan (double, add) : 0.849 seconds
sequential scan (int, max) : 0.405 seconds
filter (double, odd) : 0.0616 seconds
pack (double, odd) : 0.0466 seconds
gather (int) : 0.143 seconds
gather (double) : 0.16 seconds
scatter (int) : 0.253 seconds
scatter (double) : 0.271 seconds
scatter contended (10^6) : 0.175 seconds
scatter contended (10^5) : 0.194 seconds
scatter CAS (int) : 0.646 seconds
scatter CAS contended (10^6) : 0.436 seconds
scatter CAS contended conditional (10^6) : 0.165 seconds
scatter CAS contended (10^5) : 0.442 seconds
scatter CAS contended conditional (10^5) : 0.226 seconds

./mergeTest 100000000 -cilk_set_worker_count 1
Merge : 0.982 seconds

./mergeTest 100000000 -cilk_set_worker_count 2
Merge : 0.588 seconds

./mergeTest 100000000 -cilk_set_worker_count 4
Merge : 0.313 seconds

./mergeTest 100000000 -cilk_set_worker_count 8
Merge : 0.192 seconds

./mergeTest 100000000 -cilk_set_worker_count 16
Merge : 0.228 seconds

./mergeTest 100000000 -cilk_set_worker_count 24
Merge : 0.227 seconds

./mergeTest 100000000 -cilk_set_worker_count 28
Merge : 0.237 seconds

./radixSortTest 100000000 -cilk_set_worker_count 1
radix sort (int) : 5.43 seconds
radix sort (int + int payload) : 7.48 seconds
collect double (2 buckets, inplace) : 0.87 seconds
collect (double, 8 buckets, inplace) : 1.03 seconds
collect (double, 256 buckets, inplace) : 1.9 seconds
collect (int, 256 buckets, inplace) : 1.48 seconds
collect (int, 65K buckets, allocate) : 4.04 seconds

./radixSortTest 100000000 -cilk_set_worker_count 2
radix sort (int) : 3.2 seconds
radix sort (int + int payload) : 4.88 seconds
collect double (2 buckets, inplace) : 0.647 seconds
collect (double, 8 buckets, inplace) : 0.759 seconds
collect (double, 256 buckets, inplace) : 1.08 seconds
collect (int, 256 buckets, inplace) : 0.805 seconds
collect (int, 65K buckets, allocate) : 2.55 seconds

./radixSortTest 100000000 -cilk_set_worker_count 4
radix sort (int) : 1.59 seconds
radix sort (int + int payload) : 2.65 seconds
collect double (2 buckets, inplace) : 0.458 seconds
collect (double, 8 buckets, inplace) : 0.511 seconds
collect (double, 256 buckets, inplace) : 0.705 seconds
collect (int, 256 buckets, inplace) : 0.493 seconds
collect (int, 65K buckets, allocate) : 1.62 seconds

./radixSortTest 100000000 -cilk_set_worker_count 8
radix sort (int) : 0.896 seconds
radix sort (int + int payload) : 1.56 seconds
collect double (2 buckets, inplace) : 0.313 seconds
collect (double, 8 buckets, inplace) : 0.329 seconds
collect (double, 256 buckets, inplace) : 0.416 seconds
collect (int, 256 buckets, inplace) : 0.283 seconds
collect (int, 65K buckets, allocate) : 1.02 seconds

./radixSortTest 100000000 -cilk_set_worker_count 16
radix sort (int) : 0.475 seconds
radix sort (int + int payload) : 1.34 seconds
collect double (2 buckets, inplace) : 0.348 seconds
collect (double, 8 buckets, inplace) : 0.331 seconds
collect (double, 256 buckets, inplace) : 0.368 seconds
collect (int, 256 buckets, inplace) : 0.204 seconds
collect (int, 65K buckets, allocate) : 1.21 seconds

./radixSortTest 100000000 -cilk_set_worker_count 24
radix sort (int) : 0.452 seconds
radix sort (int + int payload) : 1.02 seconds
collect double (2 buckets, inplace) : 0.348 seconds
collect (double, 8 buckets, inplace) : 0.381 seconds
collect (double, 256 buckets, inplace) : 0.396 seconds
collect (int, 256 buckets, inplace) : 0.215 seconds
collect (int, 65K buckets, allocate) : 1.41 seconds

./radixSortTest 100000000 -cilk_set_worker_count 28
radix sort (int) : 0.459 seconds
radix sort (int + int payload) : 1.36 seconds
collect double (2 buckets, inplace) : 0.36 seconds
collect (double, 8 buckets, inplace) : 0.36 seconds
collect (double, 256 buckets, inplace) : 0.476 seconds
collect (int, 256 buckets, inplace) : 0.217 seconds
collect (int, 65K buckets, allocate) : 1.53 seconds

./sortTest 10000000 -cilk_set_worker_count 1
sort (double, random) : 1.7 seconds
sort (double, exponential) : 1.34 seconds
sort (double, almost sorted) : 0.466 seconds
sort (trigram strings) : 4.34 seconds
sort (double with 6 x double payload) : 2.15 seconds

./sortTest 10000000 -cilk_set_worker_count 2
sort (double, random) : 0.889 seconds
sort (double, exponential) : 0.711 seconds
sort (double, almost sorted) : 0.249 seconds
sort (trigram strings) : 2.5 seconds
sort (double with 6 x double payload) : 1.19 seconds

./sortTest 10000000 -cilk_set_worker_count 4
sort (double, random) : 0.497 seconds
sort (double, exponential) : 0.406 seconds
sort (double, almost sorted) : 0.152 seconds
sort (trigram strings) : 1.4 seconds
sort (double with 6 x double payload) : 0.745 seconds

./sortTest 10000000 -cilk_set_worker_count 8
sort (double, random) : 0.303 seconds
sort (double, exponential) : 0.259 seconds
sort (double, almost sorted) : 0.103 seconds
sort (trigram strings) : 0.826 seconds
sort (double with 6 x double payload) : 0.554 seconds

./sortTest 10000000 -cilk_set_worker_count 16
sort (double, random) : 0.245 seconds
sort (double, exponential) : 0.222 seconds
sort (double, almost sorted) : 0.0829 seconds
sort (trigram strings) : 0.636 seconds
sort (double with 6 x double payload) : 0.578 seconds

./sortTest 10000000 -cilk_set_worker_count 24
sort (double, random) : 0.244 seconds
sort (double, exponential) : 0.211 seconds
sort (double, almost sorted) : 0.07 seconds
sort (trigram strings) : 0.643 seconds
sort (double with 6 x double payload) : 0.622 seconds

./sortTest 10000000 -cilk_set_worker_count 28
sort (double, random) : 0.246 seconds
sort (double, exponential) : 0.218 seconds
sort (double, almost sorted) : 0.0722 seconds
sort (trigram strings) : 0.658 seconds
sort (double with 6 x double payload) : 0.63 seconds

./remDuplicatesTest 10000000 -cilk_set_worker_count 1
Remove duplicates (int, rand in n) : 1.03 seconds
Remove duplicates (trigram strings) : 1.2 seconds

./remDuplicatesTest 10000000 -cilk_set_worker_count 2
Remove duplicates (int, rand in n) : 0.593 seconds
Remove duplicates (trigram strings) : 0.65 seconds

./remDuplicatesTest 10000000 -cilk_set_worker_count 4
Remove duplicates (int, rand in n) : 0.322 seconds
Remove duplicates (trigram strings) : 0.369 seconds

./remDuplicatesTest 10000000 -cilk_set_worker_count 8
Remove duplicates (int, rand in n) : 0.168 seconds
Remove duplicates (trigram strings) : 0.208 seconds

./remDuplicatesTest 10000000 -cilk_set_worker_count 16
Remove duplicates (int, rand in n) : 0.111 seconds
Remove duplicates (trigram strings) : 0.149 seconds

./remDuplicatesTest 10000000 -cilk_set_worker_count 24
Remove duplicates (int, rand in n) : 0.0982 seconds
Remove duplicates (trigram strings) : 0.13 seconds

./remDuplicatesTest 10000000 -cilk_set_worker_count 28
Remove duplicates (int, rand in n) : 0.0913 seconds
Remove duplicates (trigram strings) : 0.13 seconds

./tableTest 10000000 -cilk_set_worker_count 1
Table (rand int, insert and find) : 1.15 seconds
Table (trigram words, insert and find) : 1.6 seconds

./tableTest 10000000 -cilk_set_worker_count 2
Table (rand int, insert and find) : 0.664 seconds
Table (trigram words, insert and find) : 0.865 seconds

./tableTest 10000000 -cilk_set_worker_count 4
Table (rand int, insert and find) : 0.342 seconds
Table (trigram words, insert and find) : 0.43 seconds

./tableTest 10000000 -cilk_set_worker_count 8
Table (rand int, insert and find) : 0.179 seconds
Table (trigram words, insert and find) : 0.235 seconds

./tableTest 10000000 -cilk_set_worker_count 16
Table (rand int, insert and find) : 0.104 seconds
Table (trigram words, insert and find) : 0.142 seconds

./tableTest 10000000 -cilk_set_worker_count 24
Table (rand int, insert and find) : 0.0855 seconds
Table (trigram words, insert and find) : 0.116 seconds

./tableTest 10000000 -cilk_set_worker_count 28
Table (rand int, insert and find) : 0.071 seconds
Table (trigram words, insert and find) : 0.102 seconds

./maxIndSetTest 10000000 -cilk_set_worker_count 1
Maximal Independent Set (rand dim=2, m=n*10) : 2.31 seconds

./maxIndSetTest 10000000 -cilk_set_worker_count 2
Maximal Independent Set (rand dim=2, m=n*10) : 1.32 seconds

./maxIndSetTest 10000000 -cilk_set_worker_count 4
Maximal Independent Set (rand dim=2, m=n*10) : 0.73 seconds

./maxIndSetTest 10000000 -cilk_set_worker_count 8
Maximal Independent Set (rand dim=2, m=n*10) : 0.402 seconds

./maxIndSetTest 10000000 -cilk_set_worker_count 16
Maximal Independent Set (rand dim=2, m=n*10) : 0.189 seconds

./maxIndSetTest 10000000 -cilk_set_worker_count 24
Maximal Independent Set (rand dim=2, m=n*10) : 0.136 seconds

./maxIndSetTest 10000000 -cilk_set_worker_count 28
Maximal Independent Set (rand dim=2, m=n*10) : 0.177 seconds

./colorGraphTest 10000000 -cilk_set_worker_count 1
Color Graph (rand dim=2, m=n*10) : 8.43 seconds

./colorGraphTest 10000000 -cilk_set_worker_count 2
Color Graph (rand dim=2, m=n*10) : 6.59 seconds

./colorGraphTest 10000000 -cilk_set_worker_count 4
Color Graph (rand dim=2, m=n*10) : 2.66 seconds

./colorGraphTest 10000000 -cilk_set_worker_count 8
Color Graph (rand dim=2, m=n*10) : 1.36 seconds

./colorGraphTest 10000000 -cilk_set_worker_count 16
Color Graph (rand dim=2, m=n*10) : 0.732 seconds

./colorGraphTest 10000000 -cilk_set_worker_count 24
Color Graph (rand dim=2, m=n*10) : 0.49 seconds

./colorGraphTest 10000000 -cilk_set_worker_count 28
Color Graph (rand dim=2, m=n*10) : 0.709 seconds

./maxMatchingTest 10000000 -cilk_set_worker_count 1
maximal Tree Matching (rand parent) : 1.2 seconds
maximal Matching (rand dim=2, m=n*10) : 2.24 seconds
maximal Matching (2d mesh) : 1.82 seconds

./maxMatchingTest 10000000 -cilk_set_worker_count 2
maximal Tree Matching (rand parent) : 0.715 seconds
maximal Matching (rand dim=2, m=n*10) : 1.39 seconds
maximal Matching (2d mesh) : 1.17 seconds

./maxMatchingTest 10000000 -cilk_set_worker_count 4
maximal Tree Matching (rand parent) : 0.374 seconds
maximal Matching (rand dim=2, m=n*10) : 0.741 seconds
maximal Matching (2d mesh) : 0.637 seconds

./maxMatchingTest 10000000 -cilk_set_worker_count 8
maximal Tree Matching (rand parent) : 0.214 seconds
maximal Matching (rand dim=2, m=n*10) : 0.444 seconds
maximal Matching (2d mesh) : 0.416 seconds

./maxMatchingTest 10000000 -cilk_set_worker_count 16
maximal Tree Matching (rand parent) : 0.15 seconds
maximal Matching (rand dim=2, m=n*10) : 0.249 seconds
maximal Matching (2d mesh) : 0.285 seconds

./maxMatchingTest 10000000 -cilk_set_worker_count 24
maximal Tree Matching (rand parent) : 0.125 seconds
maximal Matching (rand dim=2, m=n*10) : 0.186 seconds
maximal Matching (2d mesh) : 0.245 seconds

./maxMatchingTest 10000000 -cilk_set_worker_count 28
maximal Tree Matching (rand parent) : 0.117 seconds
maximal Matching (rand dim=2, m=n*10) : 0.244 seconds
maximal Matching (2d mesh) : 0.356 seconds

./separatorTest 10000000 -cilk_set_worker_count 1
Separator (2d mesh) : 18.2 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) : 49.5 seconds
  Quality: Log Cost = 4.94 before, 6.5 after

./separatorTest 10000000 -cilk_set_worker_count 2
Separator (2d mesh) : 10.7 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) : 27.4 seconds
  Quality: Log Cost = 4.94 before, 6.5 after

./separatorTest 10000000 -cilk_set_worker_count 4
Separator (2d mesh) : 5.71 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) : 14.1 seconds
  Quality: Log Cost = 4.94 before, 6.5 after

./separatorTest 10000000 -cilk_set_worker_count 8
Separator (2d mesh) : 3.19 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) : 7.52 seconds
  Quality: Log Cost = 4.94 before, 6.5 after

./separatorTest 10000000 -cilk_set_worker_count 16
Separator (2d mesh) : 1.94 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) : 4.25 seconds
  Quality: Log Cost = 4.94 before, 6.5 after

./separatorTest 10000000 -cilk_set_worker_count 24
Separator (2d mesh) : 2.32 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) : 3.61 seconds
  Quality: Log Cost = 4.94 before, 6.5 after

./separatorTest 10000000 -cilk_set_worker_count 28
Separator (2d mesh) : 2.64 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) : 3.59 seconds
  Quality: Log Cost = 4.94 before, 6.5 after

./bfsTest 10000000 -cilk_set_worker_count 1
Nondeterministic BFS (rand dim=2, m=n*10) : 2.91 seconds
Deterministic BFS (return BFS tree) (rand dim=2, m=n*10) : 4.25 seconds

./bfsTest 10000000 -cilk_set_worker_count 2
Nondeterministic BFS (rand dim=2, m=n*10) : 1.79 seconds
Deterministic BFS (return BFS tree) (rand dim=2, m=n*10) : 2.62 seconds

./bfsTest 10000000 -cilk_set_worker_count 4
Nondeterministic BFS (rand dim=2, m=n*10) : 0.927 seconds
Deterministic BFS (return BFS tree) (rand dim=2, m=n*10) : 1.36 seconds

./bfsTest 10000000 -cilk_set_worker_count 8
Nondeterministic BFS (rand dim=2, m=n*10) : 0.479 seconds
Deterministic BFS (return BFS tree) (rand dim=2, m=n*10) : 0.706 seconds

./bfsTest 10000000 -cilk_set_worker_count 16
Nondeterministic BFS (rand dim=2, m=n*10) : 0.263 seconds
Deterministic BFS (return BFS tree) (rand dim=2, m=n*10) : 0.374 seconds

./bfsTest 10000000 -cilk_set_worker_count 24
Nondeterministic BFS (rand dim=2, m=n*10) : 0.188 seconds
Deterministic BFS (return BFS tree) (rand dim=2, m=n*10) : 0.255 seconds

./bfsTest 10000000 -cilk_set_worker_count 28
Nondeterministic BFS (rand dim=2, m=n*10) : 0.331 seconds
Deterministic BFS (return BFS tree) (rand dim=2, m=n*10) : 0.456 seconds

./delaunayTest 1000000 -cilk_set_worker_count 1
Delaunay (random points in square) : 4.92 seconds
Delaunay (random points in kuzmin distribution) : 5.54 seconds

./delaunayTest 1000000 -cilk_set_worker_count 2
Delaunay (random points in square) : 3.3 seconds
Delaunay (random points in kuzmin distribution) : 4.02 seconds

./delaunayTest 1000000 -cilk_set_worker_count 4
Delaunay (random points in square) : 2.07 seconds
Delaunay (random points in kuzmin distribution) : 2.26 seconds

./delaunayTest 1000000 -cilk_set_worker_count 8
Delaunay (random points in square) : 1.36 seconds
Delaunay (random points in kuzmin distribution) : 1.43 seconds

./delaunayTest 1000000 -cilk_set_worker_count 16
Delaunay (random points in square) : 1 seconds
Delaunay (random points in kuzmin distribution) : 1.07 seconds

./delaunayTest 1000000 -cilk_set_worker_count 24
Delaunay (random points in square) : 0.92 seconds
Delaunay (random points in kuzmin distribution) : 0.977 seconds

./delaunayTest 1000000 -cilk_set_worker_count 28
Delaunay (random points in square) : 0.963 seconds
Delaunay (random points in kuzmin distribution) : 1.04 seconds

./nearestNeighborTest 10000000 -cilk_set_worker_count 1
k-nearest neighbors (random 3d, k=1) build tree : 6.1 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 14.2 seconds
k-nearest neighbors (random 2d, k=1) build tree : 5.67 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 8.83 seconds

./nearestNeighborTest 10000000 -cilk_set_worker_count 2
k-nearest neighbors (random 3d, k=1) build tree : 3.62 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 8.25 seconds
k-nearest neighbors (random 2d, k=1) build tree : 3.53 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 5.21 seconds

./nearestNeighborTest 10000000 -cilk_set_worker_count 4
k-nearest neighbors (random 3d, k=1) build tree : 2.21 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 4.36 seconds
k-nearest neighbors (random 2d, k=1) build tree : 2.03 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 2.65 seconds

./nearestNeighborTest 10000000 -cilk_set_worker_count 8
k-nearest neighbors (random 3d, k=1) build tree : 1.58 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 2.61 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.4 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 1.64 seconds

./nearestNeighborTest 10000000 -cilk_set_worker_count 16
k-nearest neighbors (random 3d, k=1) build tree : 1.47 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 1.12 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.08 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.708 seconds

./nearestNeighborTest 10000000 -cilk_set_worker_count 24
k-nearest neighbors (random 3d, k=1) build tree : 1.57 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 0.879 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.15 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.538 seconds

./nearestNeighborTest 10000000 -cilk_set_worker_count 28
k-nearest neighbors (random 3d, k=1) build tree : 1.61 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 0.78 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.15 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 0.427 seconds

./mvMultiply 5000000 -cilk_set_worker_count 1
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.412 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.402 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.304 seconds

./mvMultiply 5000000 -cilk_set_worker_count 2
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.395 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.52 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.172 seconds

./mvMultiply 5000000 -cilk_set_worker_count 4
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.161 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.744 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.216 seconds

./mvMultiply 5000000 -cilk_set_worker_count 8
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.128 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.736 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0557 seconds

./mvMultiply 5000000 -cilk_set_worker_count 16
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.062 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.588 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0275 seconds

./mvMultiply 5000000 -cilk_set_worker_count 24
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0485 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.589 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.035 seconds

./mvMultiply 5000000 -cilk_set_worker_count 28
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0717 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 1.51 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0582 seconds

./barnesHut 1000000 -cilk_set_worker_count 1
Barnes Hut (build tree) : 0.538 seconds
Barnes Hut (calculate forces) : 36.4 seconds

./barnesHut 1000000 -cilk_set_worker_count 2
Barnes Hut (build tree) : 0.317 seconds
Barnes Hut (calculate forces) : 19.4 seconds

./barnesHut 1000000 -cilk_set_worker_count 4
Barnes Hut (build tree) : 0.218 seconds
Barnes Hut (calculate forces) : 10.4 seconds

./barnesHut 1000000 -cilk_set_worker_count 8
Barnes Hut (build tree) : 0.192 seconds
Barnes Hut (calculate forces) : 5.34 seconds

./barnesHut 1000000 -cilk_set_worker_count 16
Barnes Hut (build tree) : 0.171 seconds
Barnes Hut (calculate forces) : 2.6 seconds

./barnesHut 1000000 -cilk_set_worker_count 24
Barnes Hut (build tree) : 0.168 seconds
Barnes Hut (calculate forces) : 1.78 seconds

./barnesHut 1000000 -cilk_set_worker_count 28
Barnes Hut (build tree) : 0.168 seconds
Barnes Hut (calculate forces) : 1.54 seconds

./suffixArrayTest 10000000 -cilk_set_worker_count 1
Suffix array (trigram string) : 5.69 seconds
Suffix array (equal string) : 2.09 seconds
Suffix array (repeated string) : 3.64 seconds

./suffixArrayTest 10000000 -cilk_set_worker_count 2
Suffix array (trigram string) : 3.08 seconds
Suffix array (equal string) : 1.33 seconds
Suffix array (repeated string) : 2.42 seconds

./suffixArrayTest 10000000 -cilk_set_worker_count 4
Suffix array (trigram string) : 1.67 seconds
Suffix array (equal string) : 0.778 seconds
Suffix array (repeated string) : 1.51 seconds

./suffixArrayTest 10000000 -cilk_set_worker_count 8
Suffix array (trigram string) : 0.943 seconds
Suffix array (equal string) : 0.536 seconds
Suffix array (repeated string) : 1.23 seconds

./suffixArrayTest 10000000 -cilk_set_worker_count 16
Suffix array (trigram string) : 0.724 seconds
Suffix array (equal string) : 0.51 seconds
Suffix array (repeated string) : 1.35 seconds

./suffixArrayTest 10000000 -cilk_set_worker_count 24
Suffix array (trigram string) : 0.625 seconds
Suffix array (equal string) : 0.374 seconds
Suffix array (repeated string) : 0.947 seconds

./suffixArrayTest 10000000 -cilk_set_worker_count 28
Suffix array (trigram string) : 0.636 seconds
Suffix array (equal string) : 0.516 seconds
Suffix array (repeated string) : 0.934 seconds

./hullTest 100000000 -cilk_set_worker_count 1
Convex Hull (random in unit circle) : 8.59 seconds
Convex Hull (random projected Parobola) : 9.37 seconds

./hullTest 100000000 -cilk_set_worker_count 2
Convex Hull (random in unit circle) : 5.07 seconds
Convex Hull (random projected Parobola) : 5.8 seconds

./hullTest 100000000 -cilk_set_worker_count 4
Convex Hull (random in unit circle) : 2.77 seconds
Convex Hull (random projected Parobola) : 2.91 seconds

./hullTest 100000000 -cilk_set_worker_count 8
Convex Hull (random in unit circle) : 1.58 seconds
Convex Hull (random projected Parobola) : 1.94 seconds

./hullTest 100000000 -cilk_set_worker_count 16
Convex Hull (random in unit circle) : 1.37 seconds
Convex Hull (random projected Parobola) : 1.47 seconds

./hullTest 100000000 -cilk_set_worker_count 24
Convex Hull (random in unit circle) : 1.32 seconds
Convex Hull (random projected Parobola) : 1.69 seconds

./hullTest 100000000 -cilk_set_worker_count 28
Convex Hull (random in unit circle) : 1.3 seconds
Convex Hull (random projected Parobola) : 1.65 seconds

./mstTest 10000000 -cilk_set_worker_count 1
sequential MST (random, m = 6n) : 13.4 seconds
sequential MST (2d grid, m = 2n) : 4.61 seconds
parallel MST (random, m = 6n) : 16.8 seconds
parallel MST (2d grid, m = 2n) : 7.37 seconds

./mstTest 10000000 -cilk_set_worker_count 2
sequential MST (random, m = 6n) : 13.4 seconds
sequential MST (2d grid, m = 2n) : 4.62 seconds
parallel MST (random, m = 6n) : 8.83 seconds
parallel MST (2d grid, m = 2n) : 3.96 seconds

./mstTest 10000000 -cilk_set_worker_count 4
sequential MST (random, m = 6n) : 13.4 seconds
sequential MST (2d grid, m = 2n) : 4.68 seconds
parallel MST (random, m = 6n) : 4.77 seconds
parallel MST (2d grid, m = 2n) : 2.24 seconds

./mstTest 10000000 -cilk_set_worker_count 8
sequential MST (random, m = 6n) : 13.4 seconds
sequential MST (2d grid, m = 2n) : 5.39 seconds
parallel MST (random, m = 6n) : 2.77 seconds
parallel MST (2d grid, m = 2n) : 1.37 seconds

./mstTest 10000000 -cilk_set_worker_count 16
sequential MST (random, m = 6n) : 13.5 seconds
sequential MST (2d grid, m = 2n) : 4.67 seconds
parallel MST (random, m = 6n) : 1.99 seconds
parallel MST (2d grid, m = 2n) : 0.963 seconds

./mstTest 10000000 -cilk_set_worker_count 24
sequential MST (random, m = 6n) : 13.6 seconds
sequential MST (2d grid, m = 2n) : 6.23 seconds
parallel MST (random, m = 6n) : 1.93 seconds
parallel MST (2d grid, m = 2n) : 0.969 seconds

./mstTest 10000000 -cilk_set_worker_count 28
sequential MST (random, m = 6n) : 13.6 seconds
sequential MST (2d grid, m = 2n) : 6.35 seconds
parallel MST (random, m = 6n) : 1.9 seconds
parallel MST (2d grid, m = 2n) : 0.956 seconds
