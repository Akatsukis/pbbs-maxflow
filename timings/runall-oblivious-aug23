HOSTNAME: oblivious
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 65
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 65
Last Changed Date: 2010-08-21 13:08:46 -0400 (Sat, 21 Aug 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.133 seconds
map (double, +1) : 0.189 seconds
map (char, +1)  : 0.147 seconds
map (char, isalpha) : 0.345 seconds
reduce (double, add) : 0.165 seconds
map reduce (char, add) : 0.167 seconds
max Index (double) : 0.139 seconds
scan (double, add, inplace) : 0.331 seconds
scan (double, add) : 0.359 seconds
scanI (double, add) : 0.526 seconds
scan (int, max) : 0.306 seconds
sequential scan (double, add) : 0.185 seconds
sequential scan (int, max) : 0.145 seconds
filter (double, odd) : 0.349 seconds
pack (double, odd) : 0.284 seconds
gather (int) : 2.02 seconds
gather (double) : 2.43 seconds
scatter (int) : 2.12 seconds
scatter (double) : 2.53 seconds
scatter contended (10^6) : 1.14 seconds
scatter contended (10^5) : 0.474 seconds
scatter CAS (int) : 9.58 seconds
scatter CAS contended (10^6) : 1.78 seconds
scatter CAS contended conditional (10^6) : 0.756 seconds
scatter CAS contended (10^5) : 1.3 seconds
scatter CAS contended conditional (10^5) : 0.666 seconds
partition : 0.143 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.0907 seconds
map (double, +1) : 0.165 seconds
map (char, +1)  : 0.0743 seconds
map (char, isalpha) : 0.174 seconds
reduce (double, add) : 0.0883 seconds
map reduce (char, add) : 0.0839 seconds
max Index (double) : 0.0821 seconds
scan (double, add, inplace) : 0.198 seconds
scan (double, add) : 0.254 seconds
scanI (double, add) : 0.281 seconds
scan (int, max) : 0.167 seconds
sequential scan (double, add) : 0.247 seconds
sequential scan (int, max) : 0.152 seconds
filter (double, odd) : 0.233 seconds
pack (double, odd) : 0.191 seconds
gather (int) : 1.02 seconds
gather (double) : 1.22 seconds
scatter (int) : 1.08 seconds
scatter (double) : 1.28 seconds
scatter contended (10^6) : 0.585 seconds
scatter contended (10^5) : 0.262 seconds
scatter CAS (int) : 4.81 seconds
scatter CAS contended (10^6) : 0.967 seconds
scatter CAS contended conditional (10^6) : 0.425 seconds
scatter CAS contended (10^5) : 0.984 seconds
scatter CAS contended conditional (10^5) : 0.374 seconds
partition : 0.161 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.0701 seconds
map (double, +1) : 0.118 seconds
map (char, +1)  : 0.0387 seconds
map (char, isalpha) : 0.0905 seconds
reduce (double, add) : 0.0526 seconds
map reduce (char, add) : 0.0437 seconds
max Index (double) : 0.0502 seconds
scan (double, add, inplace) : 0.124 seconds
scan (double, add) : 0.17 seconds
scanI (double, add) : 0.175 seconds
scan (int, max) : 0.101 seconds
sequential scan (double, add) : 0.242 seconds
sequential scan (int, max) : 0.155 seconds
filter (double, odd) : 0.154 seconds
pack (double, odd) : 0.119 seconds
gather (int) : 0.551 seconds
gather (double) : 0.654 seconds
scatter (int) : 0.663 seconds
scatter (double) : 0.751 seconds
scatter contended (10^6) : 0.349 seconds
scatter contended (10^5) : 0.228 seconds
scatter CAS (int) : 2.43 seconds
scatter CAS contended (10^6) : 0.538 seconds
scatter CAS contended conditional (10^6) : 0.266 seconds
scatter CAS contended (10^5) : 0.657 seconds
scatter CAS contended conditional (10^5) : 0.218 seconds
partition : 0.154 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0509 seconds
map (double, +1) : 0.0776 seconds
map (char, +1)  : 0.02 seconds
map (char, isalpha) : 0.0453 seconds
reduce (double, add) : 0.0295 seconds
map reduce (char, add) : 0.0219 seconds
max Index (double) : 0.0291 seconds
scan (double, add, inplace) : 0.0796 seconds
scan (double, add) : 0.108 seconds
scanI (double, add) : 0.109 seconds
scan (int, max) : 0.0601 seconds
sequential scan (double, add) : 0.251 seconds
sequential scan (int, max) : 0.153 seconds
filter (double, odd) : 0.102 seconds
pack (double, odd) : 0.0715 seconds
gather (int) : 0.289 seconds
gather (double) : 0.338 seconds
scatter (int) : 0.419 seconds
scatter (double) : 0.453 seconds
scatter contended (10^6) : 0.225 seconds
scatter contended (10^5) : 0.213 seconds
scatter CAS (int) : 1.24 seconds
scatter CAS contended (10^6) : 0.577 seconds
scatter CAS contended conditional (10^6) : 0.299 seconds
scatter CAS contended (10^5) : 0.639 seconds
scatter CAS contended conditional (10^5) : 0.294 seconds
partition : 0.16 seconds

./runtest mergeTest 100000000 1
Merge : 0.235 seconds

./runtest mergeTest 100000000 2
Merge : 0.162 seconds

./runtest mergeTest 100000000 4
Merge : 0.118 seconds

./runtest mergeTest 100000000 8
Merge : 0.077 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 3.54 seconds
Integer Sort (32 bit, exponential) :0.1: 3.23 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.82 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 5.64 seconds
Integer Sort (weighted average) : 3.77 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 1.74 seconds
Integer Sort (32 bit, exponential) :0.1: 1.64 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.403 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.79 seconds
Integer Sort (weighted average) : 1.87 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 0.931 seconds
Integer Sort (32 bit, exponential) :0.1: 0.884 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.217 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.51 seconds
Integer Sort (weighted average) : 1.01 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.513 seconds
Integer Sort (32 bit, exponential) :0.1: 0.489 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.122 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.872 seconds
Integer Sort (weighted average) : 0.574 seconds

./runtest quickSortTest 10000000 1
Comparison Sort (double, random) :0.1: 1.25 seconds
Comparison Sort (double, exponential) :0.1: 0.999 seconds
Comparison Sort (double, almost sorted) :0.1: 0.471 seconds
Comparison Sort (trigram strings adjacent) :0.2: 4.13 seconds
Comparison Sort (trigram strings, random layout) :0.2: 5.26 seconds
Comparison Sort (double with 6 x double payload) :0.3: 1.8 seconds
Comparison Sort (weighted average) : 2.69 seconds

./runtest quickSortTest 10000000 2
Comparison Sort (double, random) :0.1: 0.656 seconds
Comparison Sort (double, exponential) :0.1: 0.532 seconds
Comparison Sort (double, almost sorted) :0.1: 0.252 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.27 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.87 seconds
Comparison Sort (double with 6 x double payload) :0.3: 1.05 seconds
Comparison Sort (weighted average) : 1.49 seconds

./runtest quickSortTest 10000000 4
Comparison Sort (double, random) :0.1: 0.371 seconds
Comparison Sort (double, exponential) :0.1: 0.315 seconds
Comparison Sort (double, almost sorted) :0.1: 0.148 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.34 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.74 seconds
Comparison Sort (double with 6 x double payload) :0.3: 0.649 seconds
Comparison Sort (weighted average) : 0.894 seconds

./runtest quickSortTest 10000000 8
Comparison Sort (double, random) :0.1: 0.22 seconds
Comparison Sort (double, exponential) :0.1: 0.206 seconds
Comparison Sort (double, almost sorted) :0.1: 0.0901 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.773 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.13 seconds
Comparison Sort (double with 6 x double payload) :0.3: 0.41 seconds
Comparison Sort (weighted average) : 0.555 seconds

./runtest sampleSortTest 10000000 1
Comparison Sort (double, random) :0.1: 1.51 seconds
Comparison Sort (double, exponential) :0.1: 1.22 seconds
Comparison Sort (double, almost sorted) :0.1: 0.692 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.82 seconds
Comparison Sort (trigram strings, random layout) :0.2: 3.81 seconds
Comparison Sort (double with 6 x double payload) :0.3: 2.33 seconds
Comparison Sort (weighted average) : 2.36 seconds

./runtest sampleSortTest 10000000 2
Comparison Sort (double, random) :0.1: 0.765 seconds
Comparison Sort (double, exponential) :0.1: 0.618 seconds
Comparison Sort (double, almost sorted) :0.1: 0.357 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.43 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.93 seconds
Comparison Sort (double with 6 x double payload) :0.3: 1.22 seconds
Comparison Sort (weighted average) : 1.21 seconds

./runtest sampleSortTest 10000000 4
Comparison Sort (double, random) :0.1: 0.409 seconds
Comparison Sort (double, exponential) :0.1: 0.328 seconds
Comparison Sort (double, almost sorted) :0.1: 0.198 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.755 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.01 seconds
Comparison Sort (double with 6 x double payload) :0.3: 0.69 seconds
Comparison Sort (weighted average) : 0.654 seconds

./runtest sampleSortTest 10000000 8
Comparison Sort (double, random) :0.1: 0.274 seconds
Comparison Sort (double, exponential) :0.1: 0.169 seconds
Comparison Sort (double, almost sorted) :0.1: 0.105 seconds
Comparison Sort (trigram strings adjacent) :0.2: 0.39 seconds
Comparison Sort (trigram strings, random layout) :0.2: 0.513 seconds
Comparison Sort (double with 6 x double payload) :0.3: 0.386 seconds
Comparison Sort (weighted average) : 0.351 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.761 seconds
Remove Duplicates (int, exponential) :0.1: 0.511 seconds
Remove Duplicates (trigram strings) :0.2: 0.939 seconds
Remove Duplicates (weighted average) : 0.787 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.382 seconds
Remove Duplicates (int, exponential) :0.1: 0.26 seconds
Remove Duplicates (trigram strings) :0.2: 0.478 seconds
Remove Duplicates (weighted average) : 0.399 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.2 seconds
Remove Duplicates (int, exponential) :0.1: 0.134 seconds
Remove Duplicates (trigram strings) :0.2: 0.252 seconds
Remove Duplicates (weighted average) : 0.209 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.11 seconds
Remove Duplicates (int, exponential) :0.1: 0.071 seconds
Remove Duplicates (trigram strings) :0.2: 0.144 seconds
Remove Duplicates (weighted average) : 0.118 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 0.858 seconds
Table (trigram words, insert and find) :0.2: 1.47 seconds
Table (weighted average) : 1.27 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.431 seconds
Table (trigram words, insert and find) :0.2: 0.741 seconds
Table (weighted average) : 0.638 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.224 seconds
Table (trigram words, insert and find) :0.2: 0.378 seconds
Table (weighted average) : 0.326 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.12 seconds
Table (trigram words, insert and find) :0.2: 0.19 seconds
Table (weighted average) : 0.167 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.25 seconds
Maximal Independent Set (2d grid) :0.2: 0.649 seconds
Maximal Independent Set (weighted average) : 0.848 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.652 seconds
Maximal Independent Set (2d grid) :0.2: 0.346 seconds
Maximal Independent Set (weighted average) : 0.448 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.357 seconds
Maximal Independent Set (2d grid) :0.2: 0.188 seconds
Maximal Independent Set (weighted average) : 0.244 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.191 seconds
Maximal Independent Set (2d grid) :0.2: 0.11 seconds
Maximal Independent Set (weighted average) : 0.137 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 4.6 seconds
Color Graph (2d grid) :0.1: 1.39 seconds
Color Graph (weighted average) : 3 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 2.4 seconds
Color Graph (2d grid) :0.1: 0.746 seconds
Color Graph (weighted average) : 1.58 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.32 seconds
Color Graph (2d grid) :0.1: 0.435 seconds
Color Graph (weighted average) : 0.875 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 0.713 seconds
Color Graph (2d grid) :0.1: 0.254 seconds
Color Graph (weighted average) : 0.483 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 0.904 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.82 seconds
Maximal Matching (2d mesh) :0.1: 1.44 seconds
Maximal Matching (weighted average) : 1.39 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.469 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.981 seconds
Maximal Matching (2d mesh) :0.1: 0.79 seconds
Maximal Matching (weighted average) : 0.747 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.256 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.547 seconds
Maximal Matching (2d mesh) :0.1: 0.444 seconds
Maximal Matching (weighted average) : 0.416 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.156 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.337 seconds
Maximal Matching (2d mesh) :0.1: 0.283 seconds
Maximal Matching (weighted average) : 0.259 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 15.1 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 42.7 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 28.9 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 7.87 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 22.2 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 15 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 4.45 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 11.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 8.02 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 2.59 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 6.56 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 4.57 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 3.18 seconds
BFS (return BFS tree) (3d grid) :0.1: 4.37 seconds
BFS (weighted average) : 3.58 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.62 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.21 seconds
BFS (weighted average) : 1.82 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.85 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.15 seconds
BFS (weighted average) : 0.95 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.457 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.625 seconds
BFS (weighted average) : 0.513 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) : 65.9 seconds
Delaunay (random points in kuzmin distribution) : 75.6 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) : 33.8 seconds
Delaunay (random points in kuzmin distribution) : 39.5 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) : 17.4 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) : 9.21 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 3d, k=1) build tree : 4.23 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 11.4 seconds
k-nearest neighbors (random 2d, k=1) build tree : 4.83 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 7.27 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 3d, k=1) build tree : 2.7 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 5.75 seconds
k-nearest neighbors (random 2d, k=1) build tree : 2.78 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 3.66 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 3d, k=1) build tree : 1.58 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 3.05 seconds
k-nearest neighbors (random 2d, k=1) build tree : 1.59 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 1.9 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 3d, k=1) build tree : 0.994 seconds
k-nearest neighbors (random 3d, k=1) find neighbors : 1.54 seconds
k-nearest neighbors (random 2d, k=1) build tree : 0.875 seconds
k-nearest neighbors (random 2d, k=1) find neighbors : 1.01 seconds

./runtest mvMultiply 5000000 1
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.339 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.331 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.251 seconds

./runtest mvMultiply 5000000 2
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.182 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.335 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.132 seconds

./runtest mvMultiply 5000000 4
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.103 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.327 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0714 seconds

./runtest mvMultiply 5000000 8
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0571 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.33 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.038 seconds

./runtest barnesHut 1000000 1
Barnes Hut (build tree) : 0.336 seconds
Barnes Hut (calculate forces) : 28.8 seconds

./runtest barnesHut 1000000 2
Barnes Hut (build tree) : 0.19 seconds
Barnes Hut (calculate forces) : 14.6 seconds

./runtest barnesHut 1000000 4
Barnes Hut (build tree) : 0.115 seconds
Barnes Hut (calculate forces) : 7.6 seconds

./runtest barnesHut 1000000 8
Barnes Hut (build tree) : 0.0997 seconds
Barnes Hut (calculate forces) : 3.87 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 4.17 seconds
Suffix Array (equal string) :0.1: 1.49 seconds
Suffix Array (repeated string) :0.1: 3.06 seconds
Suffix Array (weighted average) : 3.41 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.21 seconds
Suffix Array (equal string) :0.1: 0.866 seconds
Suffix Array (repeated string) :0.1: 1.77 seconds
Suffix Array (weighted average) : 1.85 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.25 seconds
Suffix Array (equal string) :0.1: 0.523 seconds
Suffix Array (repeated string) :0.1: 1.02 seconds
Suffix Array (weighted average) : 1.06 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.733 seconds
Suffix Array (equal string) :0.1: 0.324 seconds
Suffix Array (repeated string) :0.1: 0.647 seconds
Suffix Array (weighted average) : 0.634 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 6.88 seconds
Convex Hull (random in unit circle) :0.3: 0.573 seconds
Convex Hull (random projected Parabola) :0.3: 0.767 seconds
Convex Hull (weighted average) : 1.56 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 3.47 seconds
Convex Hull (random in unit circle) :0.3: 0.302 seconds
Convex Hull (random projected Parabola) :0.3: 0.385 seconds
Convex Hull (weighted average) : 0.79 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 1.91 seconds
Convex Hull (random in unit circle) :0.3: 0.179 seconds
Convex Hull (random projected Parabola) :0.3: 0.229 seconds
Convex Hull (weighted average) : 0.447 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 1.02 seconds
Convex Hull (random in unit circle) :0.3: 0.103 seconds
Convex Hull (random projected Parabola) :0.3: 0.13 seconds
Convex Hull (weighted average) : 0.245 seconds

./runtest mstTest 10000000 1
sequential MST (random, m = 6n) : 10.7 seconds
sequential MST (2d grid, m = 2n) : 8.11e-06 seconds
parallel MST (random, m = 6n) : 16.4 seconds
parallel MST (2d grid, m = 2n) : 8.82e-06 seconds

./runtest mstTest 10000000 2
sequential MST (random, m = 6n) : 10.7 seconds
sequential MST (2d grid, m = 2n) : 9.06e-06 seconds
parallel MST (random, m = 6n) : 8.31 seconds
parallel MST (2d grid, m = 2n) : 9.06e-06 seconds

./runtest mstTest 10000000 4
sequential MST (random, m = 6n) : 11 seconds
sequential MST (2d grid, m = 2n) : 6.91e-06 seconds
parallel MST (random, m = 6n) : 4.41 seconds
parallel MST (2d grid, m = 2n) : 5.96e-06 seconds

./runtest mstTest 10000000 8
sequential MST (random, m = 6n) : 10.9 seconds
sequential MST (2d grid, m = 2n) : 8.11e-06 seconds
parallel MST (random, m = 6n) : 2.3 seconds
parallel MST (2d grid, m = 2n) : 7.15e-06 seconds
