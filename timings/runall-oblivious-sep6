HOSTNAME: oblivious
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 82
Last Changed Date: 2010-08-31 19:37:45 -0400 (Tue, 31 Aug 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.132 seconds
map (double, +1) : 0.186 seconds
map (char, +1)  : 0.149 seconds
map (char, isalpha) : 0.348 seconds
reduce (double, add) : 0.164 seconds
map reduce (char, add) : 0.168 seconds
max Index (double) : 0.14 seconds
scan (double, add, inplace) : 0.333 seconds
scan (double, add) : 0.376 seconds
scanI (double, add) : 0.528 seconds
scan (int, max) : 0.305 seconds
sequential scan (double, add) : 0.206 seconds
sequential scan (int, max) : 0.146 seconds
filter (double, odd) : 0.351 seconds
pack (double, odd) : 0.287 seconds
gather (int) : 2.03 seconds
gather (double) : 2.44 seconds
scatter (int) : 2.13 seconds
scatter (double) : 2.53 seconds
scatter contended (10^6) : 1.15 seconds
scatter contended (10^5) : 0.476 seconds
scatter CAS (int) : 9.64 seconds
scatter CAS contended (10^6) : 1.89 seconds
scatter CAS contended conditional (10^6) : 0.836 seconds
scatter CAS contended (10^5) : 1.31 seconds
scatter CAS contended conditional (10^5) : 0.67 seconds
partition : 0.131 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.0988 seconds
map (double, +1) : 0.177 seconds
map (char, +1)  : 0.0743 seconds
map (char, isalpha) : 0.174 seconds
reduce (double, add) : 0.0916 seconds
map reduce (char, add) : 0.0846 seconds
max Index (double) : 0.0861 seconds
scan (double, add, inplace) : 0.205 seconds
scan (double, add) : 0.271 seconds
scanI (double, add) : 0.293 seconds
scan (int, max) : 0.173 seconds
sequential scan (double, add) : 0.277 seconds
sequential scan (int, max) : 0.159 seconds
filter (double, odd) : 0.247 seconds
pack (double, odd) : 0.199 seconds
gather (int) : 1.02 seconds
gather (double) : 1.22 seconds
scatter (int) : 1.1 seconds
scatter (double) : 1.27 seconds
scatter contended (10^6) : 0.564 seconds
scatter contended (10^5) : 0.264 seconds
scatter CAS (int) : 4.81 seconds
scatter CAS contended (10^6) : 0.947 seconds
scatter CAS contended conditional (10^6) : 0.41 seconds
scatter CAS contended (10^5) : 0.987 seconds
scatter CAS contended conditional (10^5) : 0.373 seconds
partition : 0.165 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.07 seconds
map (double, +1) : 0.118 seconds
map (char, +1)  : 0.0388 seconds
map (char, isalpha) : 0.0905 seconds
reduce (double, add) : 0.0526 seconds
map reduce (char, add) : 0.0437 seconds
max Index (double) : 0.05 seconds
scan (double, add, inplace) : 0.124 seconds
scan (double, add) : 0.17 seconds
scanI (double, add) : 0.173 seconds
scan (int, max) : 0.0996 seconds
sequential scan (double, add) : 0.242 seconds
sequential scan (int, max) : 0.155 seconds
filter (double, odd) : 0.152 seconds
pack (double, odd) : 0.119 seconds
gather (int) : 0.549 seconds
gather (double) : 0.655 seconds
scatter (int) : 0.662 seconds
scatter (double) : 0.746 seconds
scatter contended (10^6) : 0.354 seconds
scatter contended (10^5) : 0.228 seconds
scatter CAS (int) : 2.43 seconds
scatter CAS contended (10^6) : 0.53 seconds
scatter CAS contended conditional (10^6) : 0.264 seconds
scatter CAS contended (10^5) : 0.66 seconds
scatter CAS contended conditional (10^5) : 0.218 seconds
partition : 0.153 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0498 seconds
map (double, +1) : 0.0775 seconds
map (char, +1)  : 0.0198 seconds
map (char, isalpha) : 0.0453 seconds
reduce (double, add) : 0.0296 seconds
map reduce (char, add) : 0.0219 seconds
max Index (double) : 0.0291 seconds
scan (double, add, inplace) : 0.0803 seconds
scan (double, add) : 0.107 seconds
scanI (double, add) : 0.108 seconds
scan (int, max) : 0.06 seconds
sequential scan (double, add) : 0.239 seconds
sequential scan (int, max) : 0.167 seconds
filter (double, odd) : 0.094 seconds
pack (double, odd) : 0.0717 seconds
gather (int) : 0.288 seconds
gather (double) : 0.337 seconds
scatter (int) : 0.418 seconds
scatter (double) : 0.453 seconds
scatter contended (10^6) : 0.223 seconds
scatter contended (10^5) : 0.213 seconds
scatter CAS (int) : 1.24 seconds
scatter CAS contended (10^6) : 0.577 seconds
scatter CAS contended conditional (10^6) : 0.3 seconds
scatter CAS contended (10^5) : 0.639 seconds
scatter CAS contended conditional (10^5) : 0.299 seconds
partition : 0.161 seconds

./runtest mergeTest 100000000 1
Merge : 0.205 seconds

./runtest mergeTest 100000000 2
Merge : 0.161 seconds

./runtest mergeTest 100000000 4
Merge : 0.117 seconds

./runtest mergeTest 100000000 8
Merge : 0.077 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 9.17 seconds
Random Permutation (4 x double) :0.1: 14.4 seconds
Random Permutation (weighted average) : 11.8 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 4.68 seconds
Random Permutation (4 x double) :0.1: 7.14 seconds
Random Permutation (weighted average) : 5.91 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 2.6 seconds
Random Permutation (4 x double) :0.1: 3.9 seconds
Random Permutation (weighted average) : 3.25 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 1.61 seconds
Random Permutation (4 x double) :0.1: 2.34 seconds
Random Permutation (weighted average) : 1.97 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 3.53 seconds
Integer Sort (32 bit, exponential) :0.1: 3.23 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.818 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 5.64 seconds
Integer Sort (weighted average) : 3.77 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 1.79 seconds
Integer Sort (32 bit, exponential) :0.1: 1.66 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.416 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.9 seconds
Integer Sort (weighted average) : 1.93 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 0.959 seconds
Integer Sort (32 bit, exponential) :0.1: 0.904 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.224 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.57 seconds
Integer Sort (weighted average) : 1.05 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.577 seconds
Integer Sort (32 bit, exponential) :0.1: 0.494 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.123 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.892 seconds
Integer Sort (weighted average) : 0.595 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 13.3 seconds
Comparison Sort (double, exponential) :0.1: 8.81 seconds
Comparison Sort (double, almost sorted) :0.1: 2.92 seconds
Comparison Sort (trigram strings adjacent) :0.2: 39.6 seconds
Comparison Sort (trigram strings, random layout) :0.2: 54.9 seconds
Comparison Sort (double with 4 x double payload) :0.3: 20.3 seconds
Comparison Sort (weighted average) : 27.5 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 6.91 seconds
Comparison Sort (double, exponential) :0.1: 4.64 seconds
Comparison Sort (double, almost sorted) :0.1: 1.63 seconds
Comparison Sort (trigram strings adjacent) :0.2: 21.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 31.1 seconds
Comparison Sort (double with 4 x double payload) :0.3: 10.7 seconds
Comparison Sort (weighted average) : 15 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4 seconds
Comparison Sort (double, exponential) :0.1: 2.8 seconds
Comparison Sort (double, almost sorted) :0.1: 1.11 seconds
Comparison Sort (trigram strings adjacent) :0.2: 12 seconds
Comparison Sort (trigram strings, random layout) :0.2: 18.1 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.74 seconds
Comparison Sort (weighted average) : 8.83 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.42 seconds
Comparison Sort (double, exponential) :0.1: 1.81 seconds
Comparison Sort (double, almost sorted) :0.1: 0.705 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.79 seconds
Comparison Sort (trigram strings, random layout) :0.2: 11.7 seconds
Comparison Sort (double with 4 x double payload) :0.3: 4.29 seconds
Comparison Sort (weighted average) : 5.48 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 16.3 seconds
Comparison Sort (double, exponential) :0.1: 11.5 seconds
Comparison Sort (double, almost sorted) :0.1: 4.42 seconds
Comparison Sort (trigram strings adjacent) :0.2: 25.7 seconds
Comparison Sort (trigram strings, random layout) :0.2: 39.7 seconds
Comparison Sort (double with 4 x double payload) :0.3: 24.1 seconds
Comparison Sort (weighted average) : 23.5 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 8.25 seconds
Comparison Sort (double, exponential) :0.1: 5.83 seconds
Comparison Sort (double, almost sorted) :0.1: 2.38 seconds
Comparison Sort (trigram strings adjacent) :0.2: 13.2 seconds
Comparison Sort (trigram strings, random layout) :0.2: 20.9 seconds
Comparison Sort (double with 4 x double payload) :0.3: 12.6 seconds
Comparison Sort (weighted average) : 12.2 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4.36 seconds
Comparison Sort (double, exponential) :0.1: 3.08 seconds
Comparison Sort (double, almost sorted) :0.1: 1.32 seconds
Comparison Sort (trigram strings adjacent) :0.2: 7.17 seconds
Comparison Sort (trigram strings, random layout) :0.2: 11.5 seconds
Comparison Sort (double with 4 x double payload) :0.3: 6.8 seconds
Comparison Sort (weighted average) : 6.65 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.24 seconds
Comparison Sort (double, exponential) :0.1: 1.57 seconds
Comparison Sort (double, almost sorted) :0.1: 0.709 seconds
Comparison Sort (trigram strings adjacent) :0.2: 3.65 seconds
Comparison Sort (trigram strings, random layout) :0.2: 5.8 seconds
Comparison Sort (double with 4 x double payload) :0.3: 3.62 seconds
Comparison Sort (weighted average) : 3.43 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 12.2 seconds
Comparison Sort (double, exponential) :0.1: 9.17 seconds
Comparison Sort (double, almost sorted) :0.1: 2.19 seconds
Comparison Sort (trigram strings adjacent) :0.2: 56.2 seconds
Comparison Sort (trigram strings, random layout) :0.2: 75 seconds
Comparison Sort (double with 4 x double payload) :0.3: 14.5 seconds
Comparison Sort (weighted average) : 32.9 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.678 seconds
Remove Duplicates (int, exponential) :0.1: 0.499 seconds
Remove Duplicates (trigram strings) :0.2: 0.848 seconds
Remove Duplicates (weighted average) : 0.719 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.346 seconds
Remove Duplicates (int, exponential) :0.1: 0.25 seconds
Remove Duplicates (trigram strings) :0.2: 0.428 seconds
Remove Duplicates (weighted average) : 0.363 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.181 seconds
Remove Duplicates (int, exponential) :0.1: 0.13 seconds
Remove Duplicates (trigram strings) :0.2: 0.227 seconds
Remove Duplicates (weighted average) : 0.191 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.0987 seconds
Remove Duplicates (int, exponential) :0.1: 0.0698 seconds
Remove Duplicates (trigram strings) :0.2: 0.136 seconds
Remove Duplicates (weighted average) : 0.11 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 0.842 seconds
Table (trigram words, insert and find) :0.2: 1.24 seconds
Table (weighted average) : 1.1 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.419 seconds
Table (trigram words, insert and find) :0.2: 0.616 seconds
Table (weighted average) : 0.551 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.217 seconds
Table (trigram words, insert and find) :0.2: 0.317 seconds
Table (weighted average) : 0.284 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.116 seconds
Table (trigram words, insert and find) :0.2: 0.156 seconds
Table (weighted average) : 0.143 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.23 seconds
Maximal Independent Set (2d grid) :0.2: 0.631 seconds
Maximal Independent Set (rMat) :0.1: 3.09 seconds
Maximal Independent Set (weighted average) : 1.4 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.633 seconds
Maximal Independent Set (2d grid) :0.2: 0.33 seconds
Maximal Independent Set (rMat) :0.1: 1.55 seconds
Maximal Independent Set (weighted average) : 0.712 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.339 seconds
Maximal Independent Set (2d grid) :0.2: 0.18 seconds
Maximal Independent Set (rMat) :0.1: 0.81 seconds
Maximal Independent Set (weighted average) : 0.377 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.179 seconds
Maximal Independent Set (2d grid) :0.2: 0.0983 seconds
Maximal Independent Set (rMat) :0.1: 0.437 seconds
Maximal Independent Set (weighted average) : 0.203 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 4.69 seconds
Color Graph (2d grid) :0.1: 1.43 seconds
Color Graph (weighted average) : 3.06 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 2.43 seconds
Color Graph (2d grid) :0.1: 0.743 seconds
Color Graph (weighted average) : 1.58 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.3 seconds
Color Graph (2d grid) :0.1: 0.426 seconds
Color Graph (weighted average) : 0.864 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 0.689 seconds
Color Graph (2d grid) :0.1: 0.233 seconds
Color Graph (weighted average) : 0.461 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 0.898 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.8 seconds
Maximal Matching (2d mesh) :0.1: 1.43 seconds
Maximal Matching (weighted average) : 1.38 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.463 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.929 seconds
Maximal Matching (2d mesh) :0.1: 0.74 seconds
Maximal Matching (weighted average) : 0.711 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.258 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.518 seconds
Maximal Matching (2d mesh) :0.1: 0.421 seconds
Maximal Matching (weighted average) : 0.399 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.155 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.3 seconds
Maximal Matching (2d mesh) :0.1: 0.249 seconds
Maximal Matching (weighted average) : 0.235 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 14.8 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 42.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 28.7 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 7.66 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 21.8 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 14.7 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 4.18 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 11.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 7.89 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 2.38 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 6.26 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 4.32 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 3.17 seconds
BFS (return BFS tree) (3d grid) :0.1: 4.38 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 7.25 seconds
Visited: 14589631 vertices in 14 levels
BFS (weighted average) : 4.5 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.62 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.23 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 3.69 seconds
Visited: 14589631 vertices in 14 levels
BFS (weighted average) : 2.29 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.843 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.14 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.9 seconds
Visited: 14589631 vertices in 14 levels
BFS (weighted average) : 1.18 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.446 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.621 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.982 seconds
Visited: 14589631 vertices in 14 levels
BFS (weighted average) : 0.624 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 73.4 seconds
Delaunay (random points in kuzmin distribution) :0.1: 80.4 seconds
Delaunay (weighted average) : 76.9 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 37.4 seconds
Delaunay (random points in kuzmin distribution) :0.1: 40.9 seconds
Delaunay (weighted average) : 39.2 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 19.4 seconds
Delaunay (random points in kuzmin distribution) :0.1: 21.5 seconds
Delaunay (weighted average) : 20.4 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 9.92 seconds
Delaunay (random points in kuzmin distribution) :0.1: 11 seconds
Delaunay (weighted average) : 10.5 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 2d, k=1) :0.1: 13 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 17.1 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 25.9 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 44.5 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 43.7 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 65.9 seconds
k-nearest neighbors (weighted average) : 35 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 2d, k=1) :0.1: 6.91 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 9.56 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 13.5 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 23.7 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 22.5 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 34.7 seconds
k-nearest neighbors (weighted average) : 18.5 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 2d, k=1) :0.1: 3.84 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 5.49 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 7.33 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 13.6 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 12 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 18.8 seconds
k-nearest neighbors (weighted average) : 10.2 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 2d, k=1) :0.1: 2.22 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 2.8 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 3.91 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 7.86 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 6.33 seconds
k-nearest neighbors (plummer 3d, k=10) :0.1: 10.2 seconds
k-nearest neighbors (weighted average) : 5.55 seconds

./runtest mvMultiply 5000000 1
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.351 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.344 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.254 seconds

./runtest mvMultiply 5000000 2
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.189 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.345 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.135 seconds

./runtest mvMultiply 5000000 4
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.106 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.353 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0742 seconds

./runtest mvMultiply 5000000 8
sparse VM (rand dim d=2, m = 20n) (double) (par, all) : 0.0576 seconds
sparse VM (rand dim d=2, m = 20n) (double) (seq, all) : 0.332 seconds
sparse VM (rand dim d=2, m = 20n) (double) (par, sym) : 0.0391 seconds

./runtest nbodyTest 1000000 1
Nbody (Random 3d points) :0.1: 250 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 250 seconds

./runtest nbodyTest 1000000 2
Nbody (Random 3d points) :0.1: 124 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 124 seconds

./runtest nbodyTest 1000000 4
Nbody (Random 3d points) :0.1: 68.1 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 68.1 seconds

./runtest nbodyTest 1000000 8
Nbody (Random 3d points) :0.1: 34.5 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 34.5 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 4.2 seconds
Suffix Array (equal string) :0.1: 1.45 seconds
Suffix Array (repeated string) :0.1: 3.05 seconds
Suffix Array (weighted average) : 3.42 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.2 seconds
Suffix Array (equal string) :0.1: 0.829 seconds
Suffix Array (repeated string) :0.1: 1.62 seconds
Suffix Array (weighted average) : 1.81 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.25 seconds
Suffix Array (equal string) :0.1: 0.522 seconds
Suffix Array (repeated string) :0.1: 1.01 seconds
Suffix Array (weighted average) : 1.05 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.747 seconds
Suffix Array (equal string) :0.1: 0.336 seconds
Suffix Array (repeated string) :0.1: 0.713 seconds
Suffix Array (weighted average) : 0.658 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 6.64 seconds
Convex Hull (random in unit circle) :0.3: 0.573 seconds
Convex Hull (random projected Parabola) :0.3: 0.493 seconds
Convex Hull (weighted average) : 1.41 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 3.42 seconds
Convex Hull (random in unit circle) :0.3: 0.302 seconds
Convex Hull (random projected Parabola) :0.3: 0.267 seconds
Convex Hull (weighted average) : 0.732 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 1.84 seconds
Convex Hull (random in unit circle) :0.3: 0.179 seconds
Convex Hull (random projected Parabola) :0.3: 0.162 seconds
Convex Hull (weighted average) : 0.41 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 0.97 seconds
Convex Hull (random in unit circle) :0.3: 0.108 seconds
Convex Hull (random projected Parabola) :0.3: 0.0945 seconds
Convex Hull (weighted average) : 0.225 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 7.1 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 17.2 seconds
Minimum Spanning Tree (weighted average) : 12.1 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 3.59 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 8.64 seconds
Minimum Spanning Tree (weighted average) : 6.11 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.89 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 4.59 seconds
Minimum Spanning Tree (weighted average) : 3.24 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 2.4 seconds
Minimum Spanning Tree (weighted average) : 1.7 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.19 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 11 seconds
Minimum Spanning Tree (weighted average) : 7.58 seconds
