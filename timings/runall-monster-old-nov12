HOSTNAME: monster
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 216
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 216
Last Changed Date: 2010-11-11 14:36:12 -0500 (Thu, 11 Nov 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.214 seconds
map (double, +1) : 0.354 seconds
map (char, +1)  : 0.201 seconds
map (char, isalpha) : 0.474 seconds
reduce (double, add) : 0.248 seconds
max Index (double) : 0.237 seconds
scan (double, add, inplace) : 0.552 seconds
scan (double, add) : 0.606 seconds
scanI (double, add) : 0.742 seconds
scan (int, max) : 0.509 seconds
sequential scan (double, add) : 0.487 seconds
sequential scan (int, max) : 0.316 seconds
filter (double, odd) : 0.881 seconds
pack (double, odd) : 0.626 seconds
gather (int) : 3.06 seconds
gather (double) : 3.07 seconds
scatter (int) : 3.1 seconds
scatter (double) : 3.26 seconds
scatter contended (10^6) : 1.03 seconds
scatter contended (10^5) : 0.908 seconds
scatter CAS (int) : 20.7 seconds
scatter CAS contended (10^6) : 2.49 seconds
scatter CAS contended conditional (10^6) : 1.1 seconds
scatter CAS contended (10^5) : 1.73 seconds
scatter CAS contended conditional (10^5) : 0.911 seconds
partition : 0.287 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.106 seconds
map (double, +1) : 0.196 seconds
map (char, +1)  : 0.101 seconds
map (char, isalpha) : 0.236 seconds
reduce (double, add) : 0.124 seconds
max Index (double) : 0.119 seconds
scan (double, add, inplace) : 0.312 seconds
scan (double, add) : 0.351 seconds
scanI (double, add) : 0.378 seconds
scan (int, max) : 0.238 seconds
sequential scan (double, add) : 0.409 seconds
sequential scan (int, max) : 0.235 seconds
filter (double, odd) : 0.371 seconds
pack (double, odd) : 0.276 seconds
gather (int) : 1.52 seconds
gather (double) : 1.49 seconds
scatter (int) : 1.55 seconds
scatter (double) : 1.59 seconds
scatter contended (10^6) : 0.781 seconds
scatter contended (10^5) : 0.809 seconds
scatter CAS (int) : 7.93 seconds
scatter CAS contended (10^6) : 3.48 seconds
scatter CAS contended conditional (10^6) : 1.06 seconds
scatter CAS contended (10^5) : 3.62 seconds
scatter CAS contended conditional (10^5) : 1.15 seconds
partition : 0.254 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.0679 seconds
map (double, +1) : 0.109 seconds
map (char, +1)  : 0.0515 seconds
map (char, isalpha) : 0.119 seconds
reduce (double, add) : 0.0897 seconds
max Index (double) : 0.0745 seconds
scan (double, add, inplace) : 0.173 seconds
scan (double, add) : 0.206 seconds
scanI (double, add) : 0.208 seconds
scan (int, max) : 0.118 seconds
sequential scan (double, add) : 0.44 seconds
sequential scan (int, max) : 0.319 seconds
filter (double, odd) : 0.204 seconds
pack (double, odd) : 0.156 seconds
gather (int) : 0.762 seconds
gather (double) : 0.815 seconds
scatter (int) : 0.824 seconds
scatter (double) : 0.859 seconds
scatter contended (10^6) : 0.416 seconds
scatter contended (10^5) : 0.458 seconds
scatter CAS (int) : 4.14 seconds
scatter CAS contended (10^6) : 1.89 seconds
scatter CAS contended conditional (10^6) : 0.565 seconds
scatter CAS contended (10^5) : 2.17 seconds
scatter CAS contended conditional (10^5) : 0.62 seconds
partition : 0.27 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.0434 seconds
map (double, +1) : 0.0712 seconds
map (char, +1)  : 0.0282 seconds
map (char, isalpha) : 0.0601 seconds
reduce (double, add) : 0.0426 seconds
max Index (double) : 0.0416 seconds
scan (double, add, inplace) : 0.1 seconds
scan (double, add) : 0.116 seconds
scanI (double, add) : 0.115 seconds
scan (int, max) : 0.0679 seconds
sequential scan (double, add) : 0.448 seconds
sequential scan (int, max) : 0.314 seconds
filter (double, odd) : 0.113 seconds
pack (double, odd) : 0.0847 seconds
gather (int) : 0.383 seconds
gather (double) : 0.411 seconds
scatter (int) : 0.474 seconds
scatter (double) : 0.443 seconds
scatter contended (10^6) : 0.227 seconds
scatter contended (10^5) : 0.255 seconds
scatter CAS (int) : 2.1 seconds
scatter CAS contended (10^6) : 1.2 seconds
scatter CAS contended conditional (10^6) : 0.321 seconds
scatter CAS contended (10^5) : 1.33 seconds
scatter CAS contended conditional (10^5) : 0.357 seconds
partition : 0.261 seconds

./runtest sequenceTest 100000000 16
tabulate (double) : 0.0354 seconds
map (double, +1) : 0.0557 seconds
map (char, +1)  : 0.0141 seconds
map (char, isalpha) : 0.0309 seconds
reduce (double, add) : 0.025 seconds
max Index (double) : 0.0251 seconds
scan (double, add, inplace) : 0.065 seconds
scan (double, add) : 0.0774 seconds
scanI (double, add) : 0.0784 seconds
scan (int, max) : 0.0444 seconds
sequential scan (double, add) : 0.44 seconds
sequential scan (int, max) : 0.273 seconds
filter (double, odd) : 0.0695 seconds
pack (double, odd) : 0.0534 seconds
gather (int) : 0.198 seconds
gather (double) : 0.212 seconds
scatter (int) : 0.285 seconds
scatter (double) : 0.288 seconds
scatter contended (10^6) : 0.171 seconds
scatter contended (10^5) : 0.184 seconds
scatter CAS (int) : 1.04 seconds
scatter CAS contended (10^6) : 0.672 seconds
scatter CAS contended conditional (10^6) : 0.181 seconds
scatter CAS contended (10^5) : 0.728 seconds
scatter CAS contended conditional (10^5) : 0.24 seconds
partition : 0.272 seconds

./runtest sequenceTest 100000000 24
tabulate (double) : 0.0358 seconds
map (double, +1) : 0.0524 seconds
map (char, +1)  : 0.0117 seconds
map (char, isalpha) : 0.0204 seconds
reduce (double, add) : 0.0208 seconds
max Index (double) : 0.02 seconds
scan (double, add, inplace) : 0.0558 seconds
scan (double, add) : 0.0707 seconds
scanI (double, add) : 0.0746 seconds
scan (int, max) : 0.0425 seconds
sequential scan (double, add) : 0.446 seconds
sequential scan (int, max) : 0.282 seconds
filter (double, odd) : 0.067 seconds
pack (double, odd) : 0.0528 seconds
gather (int) : 0.147 seconds
gather (double) : 0.161 seconds
scatter (int) : 0.238 seconds
scatter (double) : 0.27 seconds
scatter contended (10^6) : 0.176 seconds
scatter contended (10^5) : 0.191 seconds
scatter CAS (int) : 0.697 seconds
scatter CAS contended (10^6) : 0.473 seconds
scatter CAS contended conditional (10^6) : 0.167 seconds
scatter CAS contended (10^5) : 0.497 seconds
scatter CAS contended conditional (10^5) : 0.221 seconds
partition : 0.271 seconds

./runtest sequenceTest 100000000 28
tabulate (double) : 0.0333 seconds
map (double, +1) : 0.0552 seconds
map (char, +1)  : 0.00977 seconds
map (char, isalpha) : 0.0177 seconds
reduce (double, add) : 0.0183 seconds
max Index (double) : 0.0191 seconds
scan (double, add, inplace) : 0.0537 seconds
scan (double, add) : 0.0694 seconds
scanI (double, add) : 0.0693 seconds
scan (int, max) : 0.038 seconds
sequential scan (double, add) : 0.436 seconds
sequential scan (int, max) : 0.299 seconds
filter (double, odd) : 0.0574 seconds
pack (double, odd) : 0.0432 seconds
gather (int) : 0.131 seconds
gather (double) : 0.153 seconds
scatter (int) : 0.299 seconds
scatter (double) : 0.267 seconds
scatter contended (10^6) : 0.176 seconds
scatter contended (10^5) : 0.192 seconds
scatter CAS (int) : 0.602 seconds
scatter CAS contended (10^6) : 0.412 seconds
scatter CAS contended conditional (10^6) : 0.173 seconds
scatter CAS contended (10^5) : 0.429 seconds
scatter CAS contended conditional (10^5) : 0.231 seconds
partition : 0.219 seconds

./runtest sequenceTest 100000000 32
tabulate (double) : 0.0336 seconds
map (double, +1) : 0.0512 seconds
map (char, +1)  : 0.0102 seconds
map (char, isalpha) : 0.0154 seconds
reduce (double, add) : 0.0179 seconds
max Index (double) : 0.0179 seconds
scan (double, add, inplace) : 0.0504 seconds
scan (double, add) : 0.0681 seconds
scanI (double, add) : 0.0664 seconds
scan (int, max) : 0.0364 seconds
sequential scan (double, add) : 0.436 seconds
sequential scan (int, max) : 0.301 seconds
filter (double, odd) : 0.0586 seconds
pack (double, odd) : 0.0445 seconds
gather (int) : 0.131 seconds
gather (double) : 0.152 seconds
scatter (int) : 0.251 seconds
scatter (double) : 0.266 seconds
scatter contended (10^6) : 0.178 seconds
scatter contended (10^5) : 0.194 seconds
scatter CAS (int) : 0.529 seconds
scatter CAS contended (10^6) : 0.364 seconds
scatter CAS contended conditional (10^6) : 0.172 seconds
scatter CAS contended (10^5) : 0.378 seconds
scatter CAS contended conditional (10^5) : 0.241 seconds
partition : 0.276 seconds

./runtest sequenceTest 100000000 64
tabulate (double) : 0.0341 seconds
map (double, +1) : 0.0501 seconds
map (char, +1)  : 0.00827 seconds
map (char, isalpha) : 0.0172 seconds
reduce (double, add) : 0.0178 seconds
max Index (double) : 0.0165 seconds
scan (double, add, inplace) : 0.0481 seconds
scan (double, add) : 0.0629 seconds
scanI (double, add) : 0.066 seconds
scan (int, max) : 0.0351 seconds
sequential scan (double, add) : 0.55 seconds
sequential scan (int, max) : 0.412 seconds
filter (double, odd) : 0.0548 seconds
pack (double, odd) : 0.0397 seconds
gather (int) : 0.129 seconds
gather (double) : 0.147 seconds
scatter (int) : 0.272 seconds
scatter (double) : 0.27 seconds
scatter contended (10^6) : 0.177 seconds
scatter contended (10^5) : 0.193 seconds
scatter CAS (int) : 0.523 seconds
scatter CAS contended (10^6) : 0.362 seconds
scatter CAS contended conditional (10^6) : 0.132 seconds
scatter CAS contended (10^5) : 0.377 seconds
scatter CAS contended conditional (10^5) : 0.239 seconds
partition : 0.321 seconds

./runtest sequenceTest 100000000 64
tabulate (double) : 0.0328 seconds
map (double, +1) : 0.0506 seconds
map (char, +1)  : 0.00756 seconds
map (char, isalpha) : 0.0121 seconds
reduce (double, add) : 0.0161 seconds
max Index (double) : 0.0163 seconds
scan (double, add, inplace) : 0.0478 seconds
scan (double, add) : 0.066 seconds
scanI (double, add) : 0.0659 seconds
scan (int, max) : 0.033 seconds
sequential scan (double, add) : 0.969 seconds
sequential scan (int, max) : 0.381 seconds
filter (double, odd) : 0.0551 seconds
pack (double, odd) : 0.042 seconds
gather (int) : 0.121 seconds
gather (double) : 0.145 seconds
scatter (int) : 0.25 seconds
scatter (double) : 0.264 seconds
scatter contended (10^6) : 0.173 seconds
scatter contended (10^5) : 0.193 seconds
scatter CAS (int) : 0.522 seconds
scatter CAS contended (10^6) : 0.362 seconds
scatter CAS contended conditional (10^6) : 0.171 seconds
scatter CAS contended (10^5) : 0.377 seconds
scatter CAS contended conditional (10^5) : 0.235 seconds
partition : 0.321 seconds

./runtest mergeTest 100000000 1
Merging (interleaved) :0.1: 0.297 seconds
Merging (weighted average) : 0.297 seconds

./runtest mergeTest 100000000 2
Merging (interleaved) :0.1: 0.19 seconds
Merging (weighted average) : 0.19 seconds

./runtest mergeTest 100000000 4
Merging (interleaved) :0.1: 0.0992 seconds
Merging (weighted average) : 0.0992 seconds

./runtest mergeTest 100000000 8
Merging (interleaved) :0.1: 0.0677 seconds
Merging (weighted average) : 0.0677 seconds

./runtest mergeTest 100000000 16
Merging (interleaved) :0.1: 0.232 seconds
Merging (weighted average) : 0.232 seconds

./runtest mergeTest 100000000 24
Merging (interleaved) :0.1: 0.232 seconds
Merging (weighted average) : 0.232 seconds

./runtest mergeTest 100000000 28
Merging (interleaved) :0.1: 0.0537 seconds
Merging (weighted average) : 0.0537 seconds

./runtest mergeTest 100000000 32
Merging (interleaved) :0.1: 0.0518 seconds
Merging (weighted average) : 0.0518 seconds

./runtest mergeTest 100000000 64
Merging (interleaved) :0.1: 0.0509 seconds
Merging (weighted average) : 0.0509 seconds

./runtest mergeTest 100000000 64
Merging (interleaved) :0.1: 0.0513 seconds
Merging (weighted average) : 0.0513 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 11.5 seconds
Random Permutation (4 x double) :0.1: 15 seconds
Random Permutation (weighted average) : 13.2 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 6.68 seconds
Random Permutation (4 x double) :0.1: 8.4 seconds
Random Permutation (weighted average) : 7.54 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 3.58 seconds
Random Permutation (4 x double) :0.1: 4.58 seconds
Random Permutation (weighted average) : 4.08 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 1.92 seconds
Random Permutation (4 x double) :0.1: 3.02 seconds
Random Permutation (weighted average) : 2.47 seconds

./runtest randPermTest 100000000 16
Random Permutation (int) :0.1: 1.17 seconds
Random Permutation (4 x double) :0.1: 2.51 seconds
Random Permutation (weighted average) : 1.84 seconds

./runtest randPermTest 100000000 24
Random Permutation (int) :0.1: 0.991 seconds
Random Permutation (4 x double) :0.1: 2.44 seconds
Random Permutation (weighted average) : 1.71 seconds

./runtest randPermTest 100000000 28
Random Permutation (int) :0.1: 2.5 seconds
Random Permutation (4 x double) :0.1: 2.54 seconds
Random Permutation (weighted average) : 2.52 seconds

./runtest randPermTest 100000000 32
Random Permutation (int) :0.1: 0.943 seconds
Random Permutation (4 x double) :0.1: 2.45 seconds
Random Permutation (weighted average) : 1.7 seconds

./runtest randPermTest 100000000 64
Random Permutation (int) :0.1: 0.922 seconds
Random Permutation (4 x double) :0.1: 2.62 seconds
Random Permutation (weighted average) : 1.77 seconds

./runtest randPermTest 100000000 64
Random Permutation (int) :0.1: 3.9 seconds
Random Permutation (4 x double) :0.1: 2.52 seconds
Random Permutation (weighted average) : 3.21 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 3.76 seconds
Integer Sort (32 bit, exponential) :0.1: 3.31 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 1.06 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 4.69 seconds
Integer Sort (weighted average) : 3.5 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 2.09 seconds
Integer Sort (32 bit, exponential) :0.1: 2 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.633 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.67 seconds
Integer Sort (weighted average) : 2.01 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 1.11 seconds
Integer Sort (32 bit, exponential) :0.1: 1.06 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.366 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.56 seconds
Integer Sort (weighted average) : 1.13 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.608 seconds
Integer Sort (32 bit, exponential) :0.1: 0.6 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.246 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.886 seconds
Integer Sort (weighted average) : 0.645 seconds

./runtest intSortTest 100000000 16
Integer Sort (32 bit, random) :0.1: 0.345 seconds
Integer Sort (32 bit, exponential) :0.1: 0.457 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.268 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.726 seconds
Integer Sort (weighted average) : 0.504 seconds

./runtest intSortTest 100000000 24
Integer Sort (32 bit, random) :0.1: 0.274 seconds
Integer Sort (32 bit, exponential) :0.1: 0.43 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.273 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.88 seconds
Integer Sort (weighted average) : 0.547 seconds

./runtest intSortTest 100000000 28
Integer Sort (32 bit, random) :0.1: 0.235 seconds
Integer Sort (32 bit, exponential) :0.1: 0.434 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.276 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.377 seconds
Integer Sort (weighted average) : 0.34 seconds

./runtest intSortTest 100000000 32
Integer Sort (32 bit, random) :0.1: 0.239 seconds
Integer Sort (32 bit, exponential) :0.1: 0.429 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.0918 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.906 seconds
Integer Sort (weighted average) : 0.515 seconds

./runtest intSortTest 100000000 64
Integer Sort (32 bit, random) :0.1: 0.464 seconds
Integer Sort (32 bit, exponential) :0.1: 0.473 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.266 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.897 seconds
Integer Sort (weighted average) : 0.6 seconds

./runtest intSortTest 100000000 64
Integer Sort (32 bit, random) :0.1: 0.202 seconds
Integer Sort (32 bit, exponential) :0.1: 0.476 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.275 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.89 seconds
Integer Sort (weighted average) : 0.546 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 16.4 seconds
Comparison Sort (double, exponential) :0.1: 10.1 seconds
Comparison Sort (double, almost sorted) :0.1: 3.9 seconds
Comparison Sort (trigram strings adjacent) :0.2: 45.9 seconds
Comparison Sort (trigram strings, random layout) :0.2: 65.2 seconds
Comparison Sort (double with 3 x double payload) :0.3: 21.9 seconds
Comparison Sort (weighted average) : 31.8 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 9.15 seconds
Comparison Sort (double, exponential) :0.1: 5.36 seconds
Comparison Sort (double, almost sorted) :0.1: 2.23 seconds
Comparison Sort (trigram strings adjacent) :0.2: 25.6 seconds
Comparison Sort (trigram strings, random layout) :0.2: 39.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 11.9 seconds
Comparison Sort (weighted average) : 18.3 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 5.15 seconds
Comparison Sort (double, exponential) :0.1: 3.1 seconds
Comparison Sort (double, almost sorted) :0.1: 1.52 seconds
Comparison Sort (trigram strings adjacent) :0.2: 13.9 seconds
Comparison Sort (trigram strings, random layout) :0.2: 23.5 seconds
Comparison Sort (double with 3 x double payload) :0.3: 6.8 seconds
Comparison Sort (weighted average) : 10.5 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.15 seconds
Comparison Sort (double, exponential) :0.1: 2.27 seconds
Comparison Sort (double, almost sorted) :0.1: 1.23 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.39 seconds
Comparison Sort (trigram strings, random layout) :0.2: 17.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 4.46 seconds
Comparison Sort (weighted average) : 7.19 seconds

./runtest quickSortTest 100000000 16
Comparison Sort (double, random) :0.1: 2.24 seconds
Comparison Sort (double, exponential) :0.1: 2.02 seconds
Comparison Sort (double, almost sorted) :0.1: 1.17 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.39 seconds
Comparison Sort (trigram strings, random layout) :0.2: 20.8 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.28 seconds
Comparison Sort (weighted average) : 6.97 seconds

./runtest quickSortTest 100000000 24
Comparison Sort (double, random) :0.1: 2 seconds
Comparison Sort (double, exponential) :0.1: 2.06 seconds
Comparison Sort (double, almost sorted) :0.1: 1.06 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.37 seconds
Comparison Sort (trigram strings, random layout) :0.2: 17.2 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.12 seconds
Comparison Sort (weighted average) : 6.16 seconds

./runtest quickSortTest 100000000 28
Comparison Sort (double, random) :0.1: 1.98 seconds
Comparison Sort (double, exponential) :0.1: 2.05 seconds
Comparison Sort (double, almost sorted) :0.1: 1.17 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.45 seconds
Comparison Sort (trigram strings, random layout) :0.2: 18.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.23 seconds
Comparison Sort (weighted average) : 6.51 seconds

./runtest quickSortTest 100000000 32
Comparison Sort (double, random) :0.1: 1.96 seconds
Comparison Sort (double, exponential) :0.1: 2.09 seconds
Comparison Sort (double, almost sorted) :0.1: 1.23 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.64 seconds
Comparison Sort (trigram strings, random layout) :0.2: 17.7 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.2 seconds
Comparison Sort (weighted average) : 6.35 seconds

./runtest quickSortTest 100000000 64
Comparison Sort (double, random) :0.1: 4.21 seconds
Comparison Sort (double, exponential) :0.1: 2.51 seconds
Comparison Sort (double, almost sorted) :0.1: 1.38 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.34 seconds
Comparison Sort (trigram strings, random layout) :0.2: 27.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.89 seconds
Comparison Sort (weighted average) : 9.13 seconds

./runtest quickSortTest 100000000 64
Comparison Sort (double, random) :0.1: 4.2 seconds
Comparison Sort (double, exponential) :0.1: 2.48 seconds
Comparison Sort (double, almost sorted) :0.1: 1.4 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.92 seconds
Comparison Sort (trigram strings, random layout) :0.2: 27.3 seconds
Comparison Sort (double with 3 x double payload) :0.3: 6.69 seconds
Comparison Sort (weighted average) : 10.1 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 20.2 seconds
Comparison Sort (double, exponential) :0.1: 13.8 seconds
Comparison Sort (double, almost sorted) :0.1: 5.6 seconds
Comparison Sort (trigram strings adjacent) :0.2: 30.7 seconds
Comparison Sort (trigram strings, random layout) :0.2: 49.1 seconds
Comparison Sort (double with 3 x double payload) :0.3: 26.2 seconds
Comparison Sort (weighted average) : 27.8 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 10.9 seconds
Comparison Sort (double, exponential) :0.1: 7.2 seconds
Comparison Sort (double, almost sorted) :0.1: 3.06 seconds
Comparison Sort (trigram strings adjacent) :0.2: 16.2 seconds
Comparison Sort (trigram strings, random layout) :0.2: 25.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 13.8 seconds
Comparison Sort (weighted average) : 14.6 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 5.75 seconds
Comparison Sort (double, exponential) :0.1: 3.76 seconds
Comparison Sort (double, almost sorted) :0.1: 1.7 seconds
Comparison Sort (trigram strings adjacent) :0.2: 8.14 seconds
Comparison Sort (trigram strings, random layout) :0.2: 13 seconds
Comparison Sort (double with 3 x double payload) :0.3: 7.08 seconds
Comparison Sort (weighted average) : 7.47 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 3.01 seconds
Comparison Sort (double, exponential) :0.1: 2.13 seconds
Comparison Sort (double, almost sorted) :0.1: 0.936 seconds
Comparison Sort (trigram strings adjacent) :0.2: 4.16 seconds
Comparison Sort (trigram strings, random layout) :0.2: 6.59 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.7 seconds
Comparison Sort (weighted average) : 3.87 seconds

./runtest sampleSortTest 100000000 16
Comparison Sort (double, random) :0.1: 1.8 seconds
Comparison Sort (double, exponential) :0.1: 1.26 seconds
Comparison Sort (double, almost sorted) :0.1: 0.651 seconds
Comparison Sort (trigram strings adjacent) :0.2: 2.25 seconds
Comparison Sort (trigram strings, random layout) :0.2: 3.52 seconds
Comparison Sort (double with 3 x double payload) :0.3: 2.36 seconds
Comparison Sort (weighted average) : 2.23 seconds

./runtest sampleSortTest 100000000 24
Comparison Sort (double, random) :0.1: 1.28 seconds
Comparison Sort (double, exponential) :0.1: 0.867 seconds
Comparison Sort (double, almost sorted) :0.1: 0.55 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.66 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.54 seconds
Comparison Sort (double with 3 x double payload) :0.3: 2.03 seconds
Comparison Sort (weighted average) : 1.72 seconds

./runtest sampleSortTest 100000000 28
Comparison Sort (double, random) :0.1: 1.16 seconds
Comparison Sort (double, exponential) :0.1: 0.79 seconds
Comparison Sort (double, almost sorted) :0.1: 0.537 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.49 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.31 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.91 seconds
Comparison Sort (weighted average) : 1.58 seconds

./runtest sampleSortTest 100000000 32
Comparison Sort (double, random) :0.1: 1.07 seconds
Comparison Sort (double, exponential) :0.1: 0.73 seconds
Comparison Sort (double, almost sorted) :0.1: 0.525 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.38 seconds
Comparison Sort (trigram strings, random layout) :0.2: 2.08 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.84 seconds
Comparison Sort (weighted average) : 1.48 seconds

./runtest sampleSortTest 100000000 64
Comparison Sort (double, random) :0.1: 0.822 seconds
Comparison Sort (double, exponential) :0.1: 0.589 seconds
Comparison Sort (double, almost sorted) :0.1: 0.527 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.18 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.9 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.4 seconds
Comparison Sort (weighted average) : 1.23 seconds

./runtest sampleSortTest 100000000 64
Comparison Sort (double, random) :0.1: 0.827 seconds
Comparison Sort (double, exponential) :0.1: 0.714 seconds
Comparison Sort (double, almost sorted) :0.1: 0.418 seconds
Comparison Sort (trigram strings adjacent) :0.2: 1.01 seconds
Comparison Sort (trigram strings, random layout) :0.2: 1.76 seconds
Comparison Sort (double with 3 x double payload) :0.3: 1.19 seconds
Comparison Sort (weighted average) : 1.11 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 15.8 seconds
Comparison Sort (double, exponential) :0.1: 10.8 seconds
Comparison Sort (double, almost sorted) :0.1: 3.26 seconds
Comparison Sort (trigram strings adjacent) :0.2: 58.1 seconds
Comparison Sort (trigram strings, random layout) :0.2: 82.5 seconds
Comparison Sort (double with 3 x double payload) :0.3: 17.6 seconds
Comparison Sort (weighted average) : 36.4 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.939 seconds
Remove Duplicates (int, exponential) :0.1: 0.69 seconds
Remove Duplicates (trigram strings) :0.2: 1.05 seconds
Remove Duplicates (weighted average) : 0.934 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.533 seconds
Remove Duplicates (int, exponential) :0.1: 0.376 seconds
Remove Duplicates (trigram strings) :0.2: 0.639 seconds
Remove Duplicates (weighted average) : 0.546 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.309 seconds
Remove Duplicates (int, exponential) :0.1: 0.198 seconds
Remove Duplicates (trigram strings) :0.2: 0.352 seconds
Remove Duplicates (weighted average) : 0.303 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.147 seconds
Remove Duplicates (int, exponential) :0.1: 0.0975 seconds
Remove Duplicates (trigram strings) :0.2: 0.198 seconds
Remove Duplicates (weighted average) : 0.16 seconds

./runtest remDuplicatesTest 10000000 16
Remove Duplicates (int, random in n) :0.1: 0.0773 seconds
Remove Duplicates (int, exponential) :0.1: 0.0518 seconds
Remove Duplicates (trigram strings) :0.2: 0.139 seconds
Remove Duplicates (weighted average) : 0.102 seconds

./runtest remDuplicatesTest 10000000 24
Remove Duplicates (int, random in n) :0.1: 0.0942 seconds
Remove Duplicates (int, exponential) :0.1: 0.0362 seconds
Remove Duplicates (trigram strings) :0.2: 0.149 seconds
Remove Duplicates (weighted average) : 0.107 seconds

./runtest remDuplicatesTest 10000000 28
Remove Duplicates (int, random in n) :0.1: 0.0555 seconds
Remove Duplicates (int, exponential) :0.1: 0.037 seconds
Remove Duplicates (trigram strings) :0.2: 0.114 seconds
Remove Duplicates (weighted average) : 0.08 seconds

./runtest remDuplicatesTest 10000000 32
Remove Duplicates (int, random in n) :0.1: 0.0869 seconds
Remove Duplicates (int, exponential) :0.1: 0.0302 seconds
Remove Duplicates (trigram strings) :0.2: 0.0738 seconds
Remove Duplicates (weighted average) : 0.0662 seconds

./runtest remDuplicatesTest 10000000 64
Remove Duplicates (int, random in n) :0.1: 0.0493 seconds
Remove Duplicates (int, exponential) :0.1: 0.0324 seconds
Remove Duplicates (trigram strings) :0.2: 0.0759 seconds
Remove Duplicates (weighted average) : 0.0584 seconds

./runtest remDuplicatesTest 10000000 64
Remove Duplicates (int, random in n) :0.1: 0.0648 seconds
Remove Duplicates (int, exponential) :0.1: 0.0259 seconds
Remove Duplicates (trigram strings) :0.2: 0.0548 seconds
Remove Duplicates (weighted average) : 0.0501 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 1.12 seconds
Table (trigram words, insert and find) :0.2: 1.48 seconds
Table (weighted average) : 1.36 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.642 seconds
Table (trigram words, insert and find) :0.2: 0.826 seconds
Table (weighted average) : 0.764 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.342 seconds
Table (trigram words, insert and find) :0.2: 0.425 seconds
Table (weighted average) : 0.397 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.17 seconds
Table (trigram words, insert and find) :0.2: 0.212 seconds
Table (weighted average) : 0.198 seconds

./runtest tableTest 10000000 16
Table (random in n, insert and find) :0.1: 0.0868 seconds
Table (trigram words, insert and find) :0.2: 0.107 seconds
Table (weighted average) : 0.1 seconds

./runtest tableTest 10000000 24
Table (random in n, insert and find) :0.1: 0.0775 seconds
Table (trigram words, insert and find) :0.2: 0.072 seconds
Table (weighted average) : 0.0738 seconds

./runtest tableTest 10000000 28
Table (random in n, insert and find) :0.1: 0.0525 seconds
Table (trigram words, insert and find) :0.2: 0.0621 seconds
Table (weighted average) : 0.0589 seconds

./runtest tableTest 10000000 32
Table (random in n, insert and find) :0.1: 0.0649 seconds
Table (trigram words, insert and find) :0.2: 0.0546 seconds
Table (weighted average) : 0.058 seconds

./runtest tableTest 10000000 64
Table (random in n, insert and find) :0.1: 0.0401 seconds
Table (trigram words, insert and find) :0.2: 0.0377 seconds
Table (weighted average) : 0.0385 seconds

./runtest tableTest 10000000 64
Table (random in n, insert and find) :0.1: 0.0505 seconds
Table (trigram words, insert and find) :0.2: 0.0378 seconds
Table (weighted average) : 0.0421 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.57 seconds
Maximal Independent Set (2d grid) :0.2: 0.8 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 3.72 seconds
Maximal Independent Set (weighted average) : 1.72 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.923 seconds
Maximal Independent Set (2d grid) :0.2: 0.452 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 2.13 seconds
Maximal Independent Set (weighted average) : 0.988 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.528 seconds
Maximal Independent Set (2d grid) :0.2: 0.259 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 1.11 seconds
Maximal Independent Set (weighted average) : 0.54 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.274 seconds
Maximal Independent Set (2d grid) :0.2: 0.144 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.554 seconds
Maximal Independent Set (weighted average) : 0.279 seconds

./runtest maxIndSetTest 10000000 16
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.146 seconds
Maximal Independent Set (2d grid) :0.2: 0.0967 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.322 seconds
Maximal Independent Set (weighted average) : 0.165 seconds

./runtest maxIndSetTest 10000000 24
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.11 seconds
Maximal Independent Set (2d grid) :0.2: 0.0677 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.252 seconds
Maximal Independent Set (weighted average) : 0.124 seconds

./runtest maxIndSetTest 10000000 28
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.114 seconds
Maximal Independent Set (2d grid) :0.2: 0.0672 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.232 seconds
Maximal Independent Set (weighted average) : 0.12 seconds

./runtest maxIndSetTest 10000000 32
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0978 seconds
Maximal Independent Set (2d grid) :0.2: 0.076 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.217 seconds
Maximal Independent Set (weighted average) : 0.117 seconds

./runtest maxIndSetTest 10000000 64
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0915 seconds
Maximal Independent Set (2d grid) :0.2: 0.0673 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.187 seconds
Maximal Independent Set (weighted average) : 0.103 seconds

./runtest maxIndSetTest 10000000 64
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.0944 seconds
Maximal Independent Set (2d grid) :0.2: 0.0747 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.19 seconds
Maximal Independent Set (weighted average) : 0.108 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 6.12 seconds
Color Graph (2d grid) :0.1: 1.83 seconds
Color Graph (weighted average) : 3.97 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 3.48 seconds
Color Graph (2d grid) :0.1: 1.02 seconds
Color Graph (weighted average) : 2.25 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 2.02 seconds
Color Graph (2d grid) :0.1: 0.61 seconds
Color Graph (weighted average) : 1.31 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 1.03 seconds
Color Graph (2d grid) :0.1: 0.322 seconds
Color Graph (weighted average) : 0.677 seconds

./runtest colorGraphTest 10000000 16
Color Graph (rand dim=2, m=n*10) :0.1: 0.556 seconds
Color Graph (2d grid) :0.1: 0.191 seconds
Color Graph (weighted average) : 0.374 seconds

./runtest colorGraphTest 10000000 24
Color Graph (rand dim=2, m=n*10) :0.1: 0.439 seconds
Color Graph (2d grid) :0.1: 0.163 seconds
Color Graph (weighted average) : 0.301 seconds

./runtest colorGraphTest 10000000 28
Color Graph (rand dim=2, m=n*10) :0.1: 0.393 seconds
Color Graph (2d grid) :0.1: 0.146 seconds
Color Graph (weighted average) : 0.27 seconds

./runtest colorGraphTest 10000000 32
Color Graph (rand dim=2, m=n*10) :0.1: 0.389 seconds
Color Graph (2d grid) :0.1: 0.141 seconds
Color Graph (weighted average) : 0.265 seconds

./runtest colorGraphTest 10000000 64
Color Graph (rand dim=2, m=n*10) :0.1: 0.332 seconds
Color Graph (2d grid) :0.1: 0.161 seconds
Color Graph (weighted average) : 0.247 seconds

./runtest colorGraphTest 10000000 64
Color Graph (rand dim=2, m=n*10) :0.1: 0.315 seconds
Color Graph (2d grid) :0.1: 0.164 seconds
Color Graph (weighted average) : 0.239 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 1.19 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 2.23 seconds
Maximal Matching (2d mesh) :0.1: 1.81 seconds
Maximal Matching (weighted average) : 1.74 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.705 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.35 seconds
Maximal Matching (2d mesh) :0.1: 1.09 seconds
Maximal Matching (weighted average) : 1.05 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.384 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.806 seconds
Maximal Matching (2d mesh) :0.1: 0.673 seconds
Maximal Matching (weighted average) : 0.621 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.217 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.454 seconds
Maximal Matching (2d mesh) :0.1: 0.363 seconds
Maximal Matching (weighted average) : 0.345 seconds

./runtest maxMatchingTest 10000000 16
Maximal Matching (tree rand parent) :0.1: 0.145 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.285 seconds
Maximal Matching (2d mesh) :0.1: 0.259 seconds
Maximal Matching (weighted average) : 0.23 seconds

./runtest maxMatchingTest 10000000 24
Maximal Matching (tree rand parent) :0.1: 0.122 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.269 seconds
Maximal Matching (2d mesh) :0.1: 0.187 seconds
Maximal Matching (weighted average) : 0.193 seconds

./runtest maxMatchingTest 10000000 28
Maximal Matching (tree rand parent) :0.1: 0.116 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.26 seconds
Maximal Matching (2d mesh) :0.1: 0.239 seconds
Maximal Matching (weighted average) : 0.205 seconds

./runtest maxMatchingTest 10000000 32
Maximal Matching (tree rand parent) :0.1: 0.114 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.226 seconds
Maximal Matching (2d mesh) :0.1: 0.228 seconds
Maximal Matching (weighted average) : 0.189 seconds

./runtest maxMatchingTest 10000000 64
Maximal Matching (tree rand parent) :0.1: 0.0951 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.243 seconds
Maximal Matching (2d mesh) :0.1: 0.216 seconds
Maximal Matching (weighted average) : 0.185 seconds

./runtest maxMatchingTest 10000000 64
Maximal Matching (tree rand parent) :0.1: 0.117 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.218 seconds
Maximal Matching (2d mesh) :0.1: 0.195 seconds
Maximal Matching (weighted average) : 0.177 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 17.6 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 49.7 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 33.7 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 10.3 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 28.5 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 19.4 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 5.77 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 14.4 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 10.1 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 3.21 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 7.79 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 5.5 seconds

./runtest separatorTest 10000000 16
Separator (2d mesh) :0.1: 1.97 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 4.51 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 3.24 seconds

./runtest separatorTest 10000000 24
Separator (2d mesh) :0.1: 1.63 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.56 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.59 seconds

./runtest separatorTest 10000000 28
Separator (2d mesh) :0.1: 1.72 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.33 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.52 seconds

./runtest separatorTest 10000000 32
Separator (2d mesh) :0.1: 1.66 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 2.87 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.27 seconds

./runtest separatorTest 10000000 64
Separator (2d mesh) :0.1: 1.77 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3.09 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.43 seconds

./runtest separatorTest 10000000 64
Separator (2d mesh) :0.1: 1.75 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 3 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 2.38 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 4.07 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.97 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 8.72 seconds
BFS (weighted average) : 4.96 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 2.39 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.24 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 5.28 seconds
BFS (weighted average) : 3.08 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.31 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.5 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 2.8 seconds
BFS (weighted average) : 1.73 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.666 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.816 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.42 seconds
BFS (weighted average) : 0.893 seconds

./runtest bfsTest 10000000 16
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.359 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.5 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.764 seconds
BFS (weighted average) : 0.496 seconds

./runtest bfsTest 10000000 24
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.245 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.401 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.546 seconds
BFS (weighted average) : 0.359 seconds

./runtest bfsTest 10000000 28
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.219 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.377 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.486 seconds
BFS (weighted average) : 0.326 seconds

./runtest bfsTest 10000000 32
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.216 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.358 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.453 seconds
BFS (weighted average) : 0.31 seconds

./runtest bfsTest 10000000 64
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.166 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.321 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.367 seconds
BFS (weighted average) : 0.255 seconds

./runtest bfsTest 10000000 64
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.192 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.316 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 0.357 seconds
BFS (weighted average) : 0.265 seconds

./runtest buildTreeTest 10000000 1
build tree (random 2d) :0.1: 2.94 seconds
build tree (kuzmin 2d) :0.1: 6.87 seconds
build tree (random 3d) :0.1: 3.44 seconds
build tree (plummer 3d) :0.1: 7.21 seconds
build tree (weighted average) : 5.11 seconds

./runtest buildTreeTest 10000000 2
build tree (random 2d) :0.1: 1.36 seconds
build tree (kuzmin 2d) :0.1: 3.49 seconds
build tree (random 3d) :0.1: 1.71 seconds
build tree (plummer 3d) :0.1: 3.66 seconds
build tree (weighted average) : 2.55 seconds

./runtest buildTreeTest 10000000 4
build tree (random 2d) :0.1: 0.718 seconds
build tree (kuzmin 2d) :0.1: 1.98 seconds
build tree (random 3d) :0.1: 0.873 seconds
build tree (plummer 3d) :0.1: 1.86 seconds
build tree (weighted average) : 1.36 seconds

./runtest buildTreeTest 10000000 8
build tree (random 2d) :0.1: 0.449 seconds
build tree (kuzmin 2d) :0.1: 1.11 seconds
build tree (random 3d) :0.1: 0.505 seconds
build tree (plummer 3d) :0.1: 1.08 seconds
build tree (weighted average) : 0.786 seconds

./runtest buildTreeTest 10000000 16
build tree (random 2d) :0.1: 0.324 seconds
build tree (kuzmin 2d) :0.1: 0.845 seconds
build tree (random 3d) :0.1: 0.437 seconds
build tree (plummer 3d) :0.1: 0.761 seconds
build tree (weighted average) : 0.592 seconds

./runtest buildTreeTest 10000000 24
build tree (random 2d) :0.1: 0.339 seconds
build tree (kuzmin 2d) :0.1: 0.935 seconds
build tree (random 3d) :0.1: 0.348 seconds
build tree (plummer 3d) :0.1: 0.756 seconds
build tree (weighted average) : 0.595 seconds

./runtest buildTreeTest 10000000 28
build tree (random 2d) :0.1: 0.387 seconds
build tree (kuzmin 2d) :0.1: 0.942 seconds
build tree (random 3d) :0.1: 0.35 seconds
build tree (plummer 3d) :0.1: 0.754 seconds
build tree (weighted average) : 0.608 seconds

./runtest buildTreeTest 10000000 32
build tree (random 2d) :0.1: 0.282 seconds
build tree (kuzmin 2d) :0.1: 0.943 seconds
build tree (random 3d) :0.1: 0.46 seconds
build tree (plummer 3d) :0.1: 0.836 seconds
build tree (weighted average) : 0.63 seconds

./runtest buildTreeTest 10000000 64
build tree (random 2d) :0.1: 0.443 seconds
build tree (kuzmin 2d) :0.1: 1.04 seconds
build tree (random 3d) :0.1: 0.483 seconds
build tree (plummer 3d) :0.1: 0.912 seconds
build tree (weighted average) : 0.719 seconds

./runtest buildTreeTest 10000000 64
build tree (random 2d) :0.1: 0.483 seconds
build tree (kuzmin 2d) :0.1: 1.11 seconds
build tree (random 3d) :0.1: 0.652 seconds
build tree (plummer 3d) :0.1: 0.979 seconds
build tree (weighted average) : 0.807 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 88.7 seconds
Delaunay (random points in kuzmin distribution) :0.1: 95 seconds
Delaunay (weighted average) : 91.9 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 52.7 seconds
Delaunay (random points in kuzmin distribution) :0.1: 57.9 seconds
Delaunay (weighted average) : 55.3 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 28.5 seconds
Delaunay (random points in kuzmin distribution) :0.1: 30.7 seconds
Delaunay (weighted average) : 29.6 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 14.4 seconds
Delaunay (random points in kuzmin distribution) :0.1: 15.4 seconds
Delaunay (weighted average) : 14.9 seconds

./runtest delaunayTest 10000000 16
Delaunay (random points in square) :0.1: 7.71 seconds
Delaunay (random points in kuzmin distribution) :0.1: 8.45 seconds
Delaunay (weighted average) : 8.08 seconds

./runtest delaunayTest 10000000 24
Delaunay (random points in square) :0.1: 5.59 seconds
Delaunay (random points in kuzmin distribution) :0.1: 6.28 seconds
Delaunay (weighted average) : 5.94 seconds

./runtest delaunayTest 10000000 28
Delaunay (random points in square) :0.1: 5.03 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.73 seconds
Delaunay (weighted average) : 5.38 seconds

./runtest delaunayTest 10000000 32
Delaunay (random points in square) :0.1: 4.67 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.49 seconds
Delaunay (weighted average) : 5.08 seconds

./runtest delaunayTest 10000000 64
Delaunay (random points in square) :0.1: 4.24 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.22 seconds
Delaunay (weighted average) : 4.73 seconds

./runtest delaunayTest 10000000 64
Delaunay (random points in square) :0.1: 4.09 seconds
Delaunay (random points in kuzmin distribution) :0.1: 5.24 seconds
Delaunay (weighted average) : 4.66 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 2d, k=1) :0.1: 12.5 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 18.4 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 31 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 26.4 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 50.4 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 48.1 seconds
k-nearest neighbors (weighted average) : 31.1 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 2d, k=1) :0.1: 6.91 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 9.41 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 17.6 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 13.1 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 31.7 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 26.5 seconds
k-nearest neighbors (weighted average) : 17.5 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 2d, k=1) :0.1: 3.57 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 5.46 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 9.51 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 7.01 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 19 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 12.5 seconds
k-nearest neighbors (weighted average) : 9.49 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 2d, k=1) :0.1: 1.94 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 2.98 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 5.3 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 4.01 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 10.2 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 6.38 seconds
k-nearest neighbors (weighted average) : 5.13 seconds

./runtest nearestNeighborTest 10000000 16
k-nearest neighbors (random 2d, k=1) :0.1: 1.28 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.77 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 3.01 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.13 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 5.95 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 3.88 seconds
k-nearest neighbors (weighted average) : 3 seconds

./runtest nearestNeighborTest 10000000 24
k-nearest neighbors (random 2d, k=1) :0.1: 1.04 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.41 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 2.3 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.53 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 5.57 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.72 seconds
k-nearest neighbors (weighted average) : 2.43 seconds

./runtest nearestNeighborTest 10000000 28
k-nearest neighbors (random 2d, k=1) :0.1: 1.05 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.3 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 2.13 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.37 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.42 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.41 seconds
k-nearest neighbors (weighted average) : 2.11 seconds

./runtest nearestNeighborTest 10000000 32
k-nearest neighbors (random 2d, k=1) :0.1: 1.01 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.26 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 2.09 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.28 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.45 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.23 seconds
k-nearest neighbors (weighted average) : 2.05 seconds

./runtest nearestNeighborTest 10000000 64
k-nearest neighbors (random 2d, k=1) :0.1: 1.63 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.91 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 2.62 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.14 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 5.6 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 1.99 seconds
k-nearest neighbors (weighted average) : 2.48 seconds

./runtest nearestNeighborTest 10000000 64
k-nearest neighbors (random 2d, k=1) :0.1: 1.3 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 1.21 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 2.2 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 1.12 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 4.93 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 2.2 seconds
k-nearest neighbors (weighted average) : 2.16 seconds

./runtest spmvTest 1000000 1
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0866 seconds
sparse VM (rMat m = n*20)  :0.1: 0.119 seconds
sparse VM (weighted average) : 0.103 seconds

./runtest spmvTest 1000000 2
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0519 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0649 seconds
sparse VM (weighted average) : 0.0584 seconds

./runtest spmvTest 1000000 4
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0274 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0366 seconds
sparse VM (weighted average) : 0.032 seconds

./runtest spmvTest 1000000 8
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0143 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0182 seconds
sparse VM (weighted average) : 0.0162 seconds

./runtest spmvTest 1000000 16
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00941 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0106 seconds
sparse VM (weighted average) : 0.01 seconds

./runtest spmvTest 1000000 24
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00764 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00891 seconds
sparse VM (weighted average) : 0.00827 seconds

./runtest spmvTest 1000000 28
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00827 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00818 seconds
sparse VM (weighted average) : 0.00822 seconds

./runtest spmvTest 1000000 32
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0077 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00823 seconds
sparse VM (weighted average) : 0.00796 seconds

./runtest spmvTest 1000000 64
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00768 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00829 seconds
sparse VM (weighted average) : 0.00798 seconds

./runtest spmvTest 1000000 64
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.00725 seconds
sparse VM (rMat m = n*20)  :0.1: 0.00832 seconds
sparse VM (weighted average) : 0.00778 seconds

./runtest nbodyTest 1000000 1
Nbody (Random 3d points) :0.1: 314 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 314 seconds

./runtest nbodyTest 1000000 2
Nbody (Random 3d points) :0.1: 158 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 158 seconds

./runtest nbodyTest 1000000 4
Nbody (Random 3d points) :0.1: 80.6 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 80.6 seconds

./runtest nbodyTest 1000000 8
Nbody (Random 3d points) :0.1: 42.4 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 42.4 seconds

./runtest nbodyTest 1000000 16
Nbody (Random 3d points) :0.1: 21.9 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 21.9 seconds

./runtest nbodyTest 1000000 24
Nbody (Random 3d points) :0.1: 15.4 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 15.4 seconds

./runtest nbodyTest 1000000 28
Nbody (Random 3d points) :0.1: 13.4 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 13.4 seconds

./runtest nbodyTest 1000000 32
Nbody (Random 3d points) :0.1: 11.8 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 11.8 seconds

./runtest nbodyTest 1000000 64
Nbody (Random 3d points) :0.1: 11.1 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 11.1 seconds

./runtest nbodyTest 1000000 64
Nbody (Random 3d points) :0.1: 11.1 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 11.1 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 5.28 seconds
Suffix Array (equal string) :0.1: 2.06 seconds
Suffix Array (repeated string) :0.1: 3.52 seconds
Suffix Array (weighted average) : 4.28 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.94 seconds
Suffix Array (equal string) :0.1: 1.31 seconds
Suffix Array (repeated string) :0.1: 2.38 seconds
Suffix Array (weighted average) : 2.5 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.48 seconds
Suffix Array (equal string) :0.1: 0.732 seconds
Suffix Array (repeated string) :0.1: 1.62 seconds
Suffix Array (weighted average) : 1.36 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.84 seconds
Suffix Array (equal string) :0.1: 0.52 seconds
Suffix Array (repeated string) :0.1: 1.49 seconds
Suffix Array (weighted average) : 0.906 seconds

./runtest suffixArrayTest 10000000 16
Suffix Array (trigram string) :0.3: 0.575 seconds
Suffix Array (equal string) :0.1: 0.634 seconds
Suffix Array (repeated string) :0.1: 1.16 seconds
Suffix Array (weighted average) : 0.703 seconds

./runtest suffixArrayTest 10000000 24
Suffix Array (trigram string) :0.3: 0.523 seconds
Suffix Array (equal string) :0.1: 0.574 seconds
Suffix Array (repeated string) :0.1: 1.12 seconds
Suffix Array (weighted average) : 0.653 seconds

./runtest suffixArrayTest 10000000 28
Suffix Array (trigram string) :0.3: 0.54 seconds
Suffix Array (equal string) :0.1: 0.549 seconds
Suffix Array (repeated string) :0.1: 1.13 seconds
Suffix Array (weighted average) : 0.659 seconds

./runtest suffixArrayTest 10000000 32
Suffix Array (trigram string) :0.3: 0.504 seconds
Suffix Array (equal string) :0.1: 0.679 seconds
Suffix Array (repeated string) :0.1: 1.04 seconds
Suffix Array (weighted average) : 0.647 seconds

./runtest suffixArrayTest 10000000 64
Suffix Array (trigram string) :0.3: 0.531 seconds
Suffix Array (equal string) :0.1: 0.698 seconds
Suffix Array (repeated string) :0.1: 1.2 seconds
Suffix Array (weighted average) : 0.697 seconds

./runtest suffixArrayTest 10000000 64
Suffix Array (trigram string) :0.3: 0.545 seconds
Suffix Array (equal string) :0.1: 0.61 seconds
Suffix Array (repeated string) :0.1: 1.11 seconds
Suffix Array (weighted average) : 0.671 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 8.92 seconds
Convex Hull (random in unit circle) :0.3: 0.741 seconds
Convex Hull (random projected Parabola) :0.3: 0.665 seconds
Convex Hull (weighted average) : 1.88 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 4.58 seconds
Convex Hull (random in unit circle) :0.3: 0.458 seconds
Convex Hull (random projected Parabola) :0.3: 0.406 seconds
Convex Hull (weighted average) : 1.02 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 2.35 seconds
Convex Hull (random in unit circle) :0.3: 0.236 seconds
Convex Hull (random projected Parabola) :0.3: 0.216 seconds
Convex Hull (weighted average) : 0.53 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 1.26 seconds
Convex Hull (random in unit circle) :0.3: 0.147 seconds
Convex Hull (random projected Parabola) :0.3: 0.134 seconds
Convex Hull (weighted average) : 0.301 seconds

./runtest hullTest 10000000 16
Convex Hull (random on unit circle) :0.1: 0.751 seconds
Convex Hull (random in unit circle) :0.3: 0.125 seconds
Convex Hull (random projected Parabola) :0.3: 0.126 seconds
Convex Hull (weighted average) : 0.215 seconds

./runtest hullTest 10000000 24
Convex Hull (random on unit circle) :0.1: 0.605 seconds
Convex Hull (random in unit circle) :0.3: 0.0937 seconds
Convex Hull (random projected Parabola) :0.3: 0.089 seconds
Convex Hull (weighted average) : 0.165 seconds

./runtest hullTest 10000000 28
Convex Hull (random on unit circle) :0.1: 0.558 seconds
Convex Hull (random in unit circle) :0.3: 0.0932 seconds
Convex Hull (random projected Parabola) :0.3: 0.0868 seconds
Convex Hull (weighted average) : 0.157 seconds

./runtest hullTest 10000000 32
Convex Hull (random on unit circle) :0.1: 0.545 seconds
Convex Hull (random in unit circle) :0.3: 0.114 seconds
Convex Hull (random projected Parabola) :0.3: 0.0889 seconds
Convex Hull (weighted average) : 0.165 seconds

./runtest hullTest 10000000 64
Convex Hull (random on unit circle) :0.1: 0.504 seconds
Convex Hull (random in unit circle) :0.3: 0.0974 seconds
Convex Hull (random projected Parabola) :0.3: 0.0879 seconds
Convex Hull (weighted average) : 0.151 seconds

./runtest hullTest 10000000 64
Convex Hull (random on unit circle) :0.1: 0.534 seconds
Convex Hull (random in unit circle) :0.3: 0.103 seconds
Convex Hull (random projected Parabola) :0.3: 0.0902 seconds
Convex Hull (weighted average) : 0.159 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 8.08 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 15.4 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 12.5 seconds
Minimum Spanning Tree (weighted average) : 12 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 4.38 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 8.36 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 6.85 seconds
Minimum Spanning Tree (weighted average) : 6.53 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 2.34 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 4.4 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 3.61 seconds
Minimum Spanning Tree (weighted average) : 3.45 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.27 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 2.52 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 2.03 seconds
Minimum Spanning Tree (weighted average) : 1.94 seconds

./runtest mstTest 10000000 16
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.751 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.49 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.16 seconds
Minimum Spanning Tree (weighted average) : 1.13 seconds

./runtest mstTest 10000000 24
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.649 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.17 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.16 seconds
Minimum Spanning Tree (weighted average) : 0.992 seconds

./runtest mstTest 10000000 28
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.597 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.07 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.1 seconds
Minimum Spanning Tree (weighted average) : 0.922 seconds

./runtest mstTest 10000000 32
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.538 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.13 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.762 seconds
Minimum Spanning Tree (weighted average) : 0.809 seconds

./runtest mstTest 10000000 64
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.492 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 0.805 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.677 seconds
Minimum Spanning Tree (weighted average) : 0.658 seconds

./runtest mstTest 10000000 64
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.457 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 0.911 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 0.672 seconds
Minimum Spanning Tree (weighted average) : 0.68 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 5.17 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 14.6 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 13.8 seconds
Minimum Spanning Tree (weighted average) : 11.2 seconds
