HOSTNAME: oblivious
Path: .
URL: https://freyja.aladdin.cs.cmu.edu/svn/pbbs/trunk/src
Repository Root: https://freyja.aladdin.cs.cmu.edu/svn/pbbs
Repository UUID: 62bc7976-c1cc-4065-800b-67e61e609b9e
Revision: 212
Node Kind: directory
Schedule: normal
Last Changed Author: guyb@CS.CMU.EDU
Last Changed Rev: 212
Last Changed Date: 2010-11-10 16:19:41 -0500 (Wed, 10 Nov 2010)

make: Nothing to be done for `all'.

./runtest sequenceTest 100000000 1
tabulate (double) : 0.13 seconds
map (double, +1) : 0.183 seconds
map (char, +1)  : 0.146 seconds
map (char, isalpha) : 0.342 seconds
reduce (double, add) : 0.162 seconds
max Index (double) : 0.137 seconds
scan (double, add, inplace) : 0.327 seconds
scan (double, add) : 0.352 seconds
scanI (double, add) : 0.357 seconds
scan (int, max) : 0.299 seconds
sequential scan (double, add) : 0.18 seconds
sequential scan (int, max) : 0.143 seconds
filter (double, odd) : 0.341 seconds
pack (double, odd) : 0.278 seconds
gather (int) : 2.01 seconds
gather (double) : 2.43 seconds
scatter (int) : 2.1 seconds
scatter (double) : 2.46 seconds
scatter contended (10^6) : 1.13 seconds
scatter contended (10^5) : 0.465 seconds
scatter CAS (int) : 9.59 seconds
scatter CAS contended (10^6) : 1.76 seconds
scatter CAS contended conditional (10^6) : 0.742 seconds
scatter CAS contended (10^5) : 1.29 seconds
scatter CAS contended conditional (10^5) : 0.657 seconds
partition : 0.129 seconds

./runtest sequenceTest 100000000 2
tabulate (double) : 0.0807 seconds
map (double, +1) : 0.144 seconds
map (char, +1)  : 0.0732 seconds
map (char, isalpha) : 0.172 seconds
reduce (double, add) : 0.084 seconds
max Index (double) : 0.0751 seconds
scan (double, add, inplace) : 0.181 seconds
scan (double, add) : 0.229 seconds
scanI (double, add) : 0.23 seconds
scan (int, max) : 0.157 seconds
sequential scan (double, add) : 0.187 seconds
sequential scan (int, max) : 0.144 seconds
filter (double, odd) : 0.207 seconds
pack (double, odd) : 0.175 seconds
gather (int) : 1.02 seconds
gather (double) : 1.24 seconds
scatter (int) : 1.07 seconds
scatter (double) : 1.27 seconds
scatter contended (10^6) : 0.568 seconds
scatter contended (10^5) : 0.261 seconds
scatter CAS (int) : 4.8 seconds
scatter CAS contended (10^6) : 0.969 seconds
scatter CAS contended conditional (10^6) : 0.426 seconds
scatter CAS contended (10^5) : 0.978 seconds
scatter CAS contended conditional (10^5) : 0.367 seconds
partition : 0.129 seconds

./runtest sequenceTest 100000000 4
tabulate (double) : 0.07 seconds
map (double, +1) : 0.118 seconds
map (char, +1)  : 0.0386 seconds
map (char, isalpha) : 0.0898 seconds
reduce (double, add) : 0.0516 seconds
max Index (double) : 0.0493 seconds
scan (double, add, inplace) : 0.123 seconds
scan (double, add) : 0.17 seconds
scanI (double, add) : 0.17 seconds
scan (int, max) : 0.0997 seconds
sequential scan (double, add) : 0.237 seconds
sequential scan (int, max) : 0.152 seconds
filter (double, odd) : 0.152 seconds
pack (double, odd) : 0.118 seconds
gather (int) : 0.548 seconds
gather (double) : 0.648 seconds
scatter (int) : 0.661 seconds
scatter (double) : 0.742 seconds
scatter contended (10^6) : 0.346 seconds
scatter contended (10^5) : 0.228 seconds
scatter CAS (int) : 2.43 seconds
scatter CAS contended (10^6) : 0.53 seconds
scatter CAS contended conditional (10^6) : 0.264 seconds
scatter CAS contended (10^5) : 0.657 seconds
scatter CAS contended conditional (10^5) : 0.216 seconds
partition : 0.15 seconds

./runtest sequenceTest 100000000 8
tabulate (double) : 0.05 seconds
map (double, +1) : 0.0775 seconds
map (char, +1)  : 0.0195 seconds
map (char, isalpha) : 0.0454 seconds
reduce (double, add) : 0.0296 seconds
max Index (double) : 0.0289 seconds
scan (double, add, inplace) : 0.0804 seconds
scan (double, add) : 0.108 seconds
scanI (double, add) : 0.108 seconds
scan (int, max) : 0.0593 seconds
sequential scan (double, add) : 0.234 seconds
sequential scan (int, max) : 0.151 seconds
filter (double, odd) : 0.094 seconds
pack (double, odd) : 0.0717 seconds
gather (int) : 0.289 seconds
gather (double) : 0.337 seconds
scatter (int) : 0.418 seconds
scatter (double) : 0.453 seconds
scatter contended (10^6) : 0.223 seconds
scatter contended (10^5) : 0.213 seconds
scatter CAS (int) : 1.24 seconds
scatter CAS contended (10^6) : 0.577 seconds
scatter CAS contended conditional (10^6) : 0.303 seconds
scatter CAS contended (10^5) : 0.639 seconds
scatter CAS contended conditional (10^5) : 0.294 seconds
partition : 0.152 seconds

./runtest mergeTest 100000000 1
Merging (interleaved) :0.1: 0.197 seconds
Merging (weighted average) : 0.197 seconds

./runtest mergeTest 100000000 2
Merging (interleaved) :0.1: 0.144 seconds
Merging (weighted average) : 0.144 seconds

./runtest mergeTest 100000000 4
Merging (interleaved) :0.1: 0.119 seconds
Merging (weighted average) : 0.119 seconds

./runtest mergeTest 100000000 8
Merging (interleaved) :0.1: 0.0772 seconds
Merging (weighted average) : 0.0772 seconds

./runtest randPermTest 100000000 1
Random Permutation (int) :0.1: 9.1 seconds
Random Permutation (4 x double) :0.1: 13.1 seconds
Random Permutation (weighted average) : 11.1 seconds

./runtest randPermTest 100000000 2
Random Permutation (int) :0.1: 4.68 seconds
Random Permutation (4 x double) :0.1: 6.58 seconds
Random Permutation (weighted average) : 5.63 seconds

./runtest randPermTest 100000000 4
Random Permutation (int) :0.1: 2.59 seconds
Random Permutation (4 x double) :0.1: 3.62 seconds
Random Permutation (weighted average) : 3.11 seconds

./runtest randPermTest 100000000 8
Random Permutation (int) :0.1: 1.61 seconds
Random Permutation (4 x double) :0.1: 2.19 seconds
Random Permutation (weighted average) : 1.9 seconds

./runtest intSortTest 100000000 1
Integer Sort (32 bit, random) :0.1: 2.72 seconds
Integer Sort (32 bit, exponential) :0.1: 2.72 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.817 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 3.73 seconds
Integer Sort (weighted average) : 2.74 seconds

./runtest intSortTest 100000000 2
Integer Sort (32 bit, random) :0.1: 1.37 seconds
Integer Sort (32 bit, exponential) :0.1: 1.42 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.443 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 2.21 seconds
Integer Sort (weighted average) : 1.53 seconds

./runtest intSortTest 100000000 4
Integer Sort (32 bit, random) :0.1: 0.8 seconds
Integer Sort (32 bit, exponential) :0.1: 0.803 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.261 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 1.27 seconds
Integer Sort (weighted average) : 0.881 seconds

./runtest intSortTest 100000000 8
Integer Sort (32 bit, random) :0.1: 0.427 seconds
Integer Sort (32 bit, exponential) :0.1: 0.426 seconds
Integer Sort (8 bit key, 32 bit data, random) :0.1: 0.177 seconds
Integer Sort (32 bit key, 64 bit data, random) :0.2: 0.752 seconds
Integer Sort (weighted average) : 0.507 seconds

./runtest quickSortTest 100000000 1
Comparison Sort (double, random) :0.1: 13.3 seconds
Comparison Sort (double, exponential) :0.1: 8.75 seconds
Comparison Sort (double, almost sorted) :0.1: 2.88 seconds
Comparison Sort (trigram strings adjacent) :0.2: 39.5 seconds
Comparison Sort (trigram strings, random layout) :0.2: 54.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 18.7 seconds
Comparison Sort (weighted average) : 26.9 seconds

./runtest quickSortTest 100000000 2
Comparison Sort (double, random) :0.1: 6.93 seconds
Comparison Sort (double, exponential) :0.1: 4.63 seconds
Comparison Sort (double, almost sorted) :0.1: 1.62 seconds
Comparison Sort (trigram strings adjacent) :0.2: 21.3 seconds
Comparison Sort (trigram strings, random layout) :0.2: 30.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 9.85 seconds
Comparison Sort (weighted average) : 14.6 seconds

./runtest quickSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4 seconds
Comparison Sort (double, exponential) :0.1: 2.78 seconds
Comparison Sort (double, almost sorted) :0.1: 1.09 seconds
Comparison Sort (trigram strings adjacent) :0.2: 12 seconds
Comparison Sort (trigram strings, random layout) :0.2: 18.3 seconds
Comparison Sort (double with 3 x double payload) :0.3: 5.92 seconds
Comparison Sort (weighted average) : 8.63 seconds

./runtest quickSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.41 seconds
Comparison Sort (double, exponential) :0.1: 1.86 seconds
Comparison Sort (double, almost sorted) :0.1: 0.703 seconds
Comparison Sort (trigram strings adjacent) :0.2: 6.84 seconds
Comparison Sort (trigram strings, random layout) :0.2: 11.9 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.68 seconds
Comparison Sort (weighted average) : 5.36 seconds

./runtest sampleSortTest 100000000 1
Comparison Sort (double, random) :0.1: 16 seconds
Comparison Sort (double, exponential) :0.1: 11.3 seconds
Comparison Sort (double, almost sorted) :0.1: 4.39 seconds
Comparison Sort (trigram strings adjacent) :0.2: 25.5 seconds
Comparison Sort (trigram strings, random layout) :0.2: 39.6 seconds
Comparison Sort (double with 3 x double payload) :0.3: 22.3 seconds
Comparison Sort (weighted average) : 22.9 seconds

./runtest sampleSortTest 100000000 2
Comparison Sort (double, random) :0.1: 8.1 seconds
Comparison Sort (double, exponential) :0.1: 5.74 seconds
Comparison Sort (double, almost sorted) :0.1: 2.31 seconds
Comparison Sort (trigram strings adjacent) :0.2: 13.2 seconds
Comparison Sort (trigram strings, random layout) :0.2: 20.8 seconds
Comparison Sort (double with 3 x double payload) :0.3: 11.3 seconds
Comparison Sort (weighted average) : 11.8 seconds

./runtest sampleSortTest 100000000 4
Comparison Sort (double, random) :0.1: 4.3 seconds
Comparison Sort (double, exponential) :0.1: 3.04 seconds
Comparison Sort (double, almost sorted) :0.1: 1.31 seconds
Comparison Sort (trigram strings adjacent) :0.2: 7.15 seconds
Comparison Sort (trigram strings, random layout) :0.2: 11.4 seconds
Comparison Sort (double with 3 x double payload) :0.3: 6.17 seconds
Comparison Sort (weighted average) : 6.43 seconds

./runtest sampleSortTest 100000000 8
Comparison Sort (double, random) :0.1: 2.22 seconds
Comparison Sort (double, exponential) :0.1: 1.56 seconds
Comparison Sort (double, almost sorted) :0.1: 0.712 seconds
Comparison Sort (trigram strings adjacent) :0.2: 3.64 seconds
Comparison Sort (trigram strings, random layout) :0.2: 5.76 seconds
Comparison Sort (double with 3 x double payload) :0.3: 3.26 seconds
Comparison Sort (weighted average) : 3.31 seconds

./serialSortTest 100000000
Comparison Sort (double, random) :0.1: 12 seconds
Comparison Sort (double, exponential) :0.1: 9.07 seconds
Comparison Sort (double, almost sorted) :0.1: 2.18 seconds
Comparison Sort (trigram strings adjacent) :0.2: 56.5 seconds
Comparison Sort (trigram strings, random layout) :0.2: 75.2 seconds
Comparison Sort (double with 3 x double payload) :0.3: 13.4 seconds
Comparison Sort (weighted average) : 32.7 seconds

./runtest remDuplicatesTest 10000000 1
Remove Duplicates (int, random in n) :0.1: 0.684 seconds
Remove Duplicates (int, exponential) :0.1: 0.501 seconds
Remove Duplicates (trigram strings) :0.2: 0.848 seconds
Remove Duplicates (weighted average) : 0.72 seconds

./runtest remDuplicatesTest 10000000 2
Remove Duplicates (int, random in n) :0.1: 0.347 seconds
Remove Duplicates (int, exponential) :0.1: 0.25 seconds
Remove Duplicates (trigram strings) :0.2: 0.428 seconds
Remove Duplicates (weighted average) : 0.364 seconds

./runtest remDuplicatesTest 10000000 4
Remove Duplicates (int, random in n) :0.1: 0.179 seconds
Remove Duplicates (int, exponential) :0.1: 0.131 seconds
Remove Duplicates (trigram strings) :0.2: 0.229 seconds
Remove Duplicates (weighted average) : 0.192 seconds

./runtest remDuplicatesTest 10000000 8
Remove Duplicates (int, random in n) :0.1: 0.126 seconds
Remove Duplicates (int, exponential) :0.1: 0.0697 seconds
Remove Duplicates (trigram strings) :0.2: 0.135 seconds
Remove Duplicates (weighted average) : 0.116 seconds

./runtest tableTest 10000000 1
Table (random in n, insert and find) :0.1: 0.848 seconds
Table (trigram words, insert and find) :0.2: 1.29 seconds
Table (weighted average) : 1.15 seconds

./runtest tableTest 10000000 2
Table (random in n, insert and find) :0.1: 0.422 seconds
Table (trigram words, insert and find) :0.2: 0.647 seconds
Table (weighted average) : 0.572 seconds

./runtest tableTest 10000000 4
Table (random in n, insert and find) :0.1: 0.218 seconds
Table (trigram words, insert and find) :0.2: 0.331 seconds
Table (weighted average) : 0.293 seconds

./runtest tableTest 10000000 8
Table (random in n, insert and find) :0.1: 0.116 seconds
Table (trigram words, insert and find) :0.2: 0.163 seconds
Table (weighted average) : 0.148 seconds

./runtest maxIndSetTest 10000000 1
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 1.25 seconds
Maximal Independent Set (2d grid) :0.2: 0.646 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 3.16 seconds
Maximal Independent Set (weighted average) : 1.42 seconds

./runtest maxIndSetTest 10000000 2
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.662 seconds
Maximal Independent Set (2d grid) :0.2: 0.354 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 1.6 seconds
Maximal Independent Set (weighted average) : 0.742 seconds

./runtest maxIndSetTest 10000000 4
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.355 seconds
Maximal Independent Set (2d grid) :0.2: 0.193 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.849 seconds
Maximal Independent Set (weighted average) : 0.398 seconds

./runtest maxIndSetTest 10000000 8
Maximal Independent Set (rand dim=2, m=n*10) :0.1: 0.185 seconds
Maximal Independent Set (2d grid) :0.2: 0.103 seconds
Maximal Independent Set (rMat m = n*10) :0.1: 0.459 seconds
Maximal Independent Set (weighted average) : 0.213 seconds

./runtest colorGraphTest 10000000 1
Color Graph (rand dim=2, m=n*10) :0.1: 4.63 seconds
Color Graph (2d grid) :0.1: 1.4 seconds
Color Graph (weighted average) : 3.02 seconds

./runtest colorGraphTest 10000000 2
Color Graph (rand dim=2, m=n*10) :0.1: 2.4 seconds
Color Graph (2d grid) :0.1: 0.744 seconds
Color Graph (weighted average) : 1.57 seconds

./runtest colorGraphTest 10000000 4
Color Graph (rand dim=2, m=n*10) :0.1: 1.33 seconds
Color Graph (2d grid) :0.1: 0.435 seconds
Color Graph (weighted average) : 0.885 seconds

./runtest colorGraphTest 10000000 8
Color Graph (rand dim=2, m=n*10) :0.1: 0.711 seconds
Color Graph (2d grid) :0.1: 0.245 seconds
Color Graph (weighted average) : 0.478 seconds

./runtest maxMatchingTest 10000000 1
Maximal Matching (tree rand parent) :0.1: 0.896 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 1.81 seconds
Maximal Matching (2d mesh) :0.1: 1.43 seconds
Maximal Matching (weighted average) : 1.38 seconds

./runtest maxMatchingTest 10000000 2
Maximal Matching (tree rand parent) :0.1: 0.464 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.951 seconds
Maximal Matching (2d mesh) :0.1: 0.764 seconds
Maximal Matching (weighted average) : 0.726 seconds

./runtest maxMatchingTest 10000000 4
Maximal Matching (tree rand parent) :0.1: 0.256 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.53 seconds
Maximal Matching (2d mesh) :0.1: 0.436 seconds
Maximal Matching (weighted average) : 0.407 seconds

./runtest maxMatchingTest 10000000 8
Maximal Matching (tree rand parent) :0.1: 0.154 seconds
Maximal Matching (rand dim=2, m=n*10) :0.1: 0.339 seconds
Maximal Matching (2d mesh) :0.1: 0.264 seconds
Maximal Matching (weighted average) : 0.252 seconds

./runtest separatorTest 10000000 1
Separator (2d mesh) :0.1: 14.7 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 42.7 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 28.7 seconds

./runtest separatorTest 10000000 2
Separator (2d mesh) :0.1: 7.88 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 21.8 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 14.9 seconds

./runtest separatorTest 10000000 4
Separator (2d mesh) :0.1: 4.23 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 11.6 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 7.93 seconds

./runtest separatorTest 10000000 8
Separator (2d mesh) :0.1: 2.46 seconds
  Quality: Log Cost = 6.32 before, 3.23 after
Separator (rand dim, d=2, m = 10*n) :0.1: 6.55 seconds
  Quality: Log Cost = 4.94 before, 6.5 after
Separator (weighted average) : 4.5 seconds

./runtest bfsTest 10000000 1
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 3.2 seconds
BFS (return BFS tree) (3d grid) :0.1: 4.38 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 7 seconds
BFS (weighted average) : 4.44 seconds

./runtest bfsTest 10000000 2
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 1.64 seconds
BFS (return BFS tree) (3d grid) :0.1: 2.24 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 3.55 seconds
BFS (weighted average) : 2.27 seconds

./runtest bfsTest 10000000 4
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.862 seconds
BFS (return BFS tree) (3d grid) :0.1: 1.15 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.89 seconds
BFS (weighted average) : 1.19 seconds

./runtest bfsTest 10000000 8
BFS (return BFS tree) (rand dim=2, m=n*10) :0.2: 0.459 seconds
BFS (return BFS tree) (3d grid) :0.1: 0.628 seconds
BFS (return BFS tree) (rMat, .5,.1,.3) :0.1: 1.02 seconds
BFS (weighted average) : 0.641 seconds

./runtest buildTreeTest 10000000 1
build tree (random 2d) :0.1: 1.7 seconds
build tree (kuzmin 2d) :0.1: 3.91 seconds
build tree (random 3d) :0.1: 2.18 seconds
build tree (plummer 3d) :0.1: 4.31 seconds
build tree (weighted average) : 3.02 seconds

./runtest buildTreeTest 10000000 2
build tree (random 2d) :0.1: 0.858 seconds
build tree (kuzmin 2d) :0.1: 2.29 seconds
build tree (random 3d) :0.1: 1.18 seconds
build tree (plummer 3d) :0.1: 2.4 seconds
build tree (weighted average) : 1.68 seconds

./runtest buildTreeTest 10000000 4
build tree (random 2d) :0.1: 0.515 seconds
build tree (kuzmin 2d) :0.1: 1.38 seconds
build tree (random 3d) :0.1: 0.624 seconds
build tree (plummer 3d) :0.1: 1.38 seconds
build tree (weighted average) : 0.976 seconds

./runtest buildTreeTest 10000000 8
build tree (random 2d) :0.1: 0.32 seconds
build tree (kuzmin 2d) :0.1: 0.837 seconds
build tree (random 3d) :0.1: 0.354 seconds
build tree (plummer 3d) :0.1: 0.856 seconds
build tree (weighted average) : 0.592 seconds

./runtest delaunayTest 10000000 1
Delaunay (random points in square) :0.1: 74.6 seconds
Delaunay (random points in kuzmin distribution) :0.1: 81.1 seconds
Delaunay (weighted average) : 77.8 seconds

./runtest delaunayTest 10000000 2
Delaunay (random points in square) :0.1: 38.1 seconds
Delaunay (random points in kuzmin distribution) :0.1: 41.7 seconds
Delaunay (weighted average) : 39.9 seconds

./runtest delaunayTest 10000000 4
Delaunay (random points in square) :0.1: 19.8 seconds
Delaunay (random points in kuzmin distribution) :0.1: 21.5 seconds
Delaunay (weighted average) : 20.7 seconds

./runtest delaunayTest 10000000 8
Delaunay (random points in square) :0.1: 10 seconds
Delaunay (random points in kuzmin distribution) :0.1: 11.1 seconds
Delaunay (weighted average) : 10.6 seconds

./runtest nearestNeighborTest 10000000 1
k-nearest neighbors (random 2d, k=1) :0.1: 9.42 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 14.8 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 25 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 21.2 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 40.2 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 40.4 seconds
k-nearest neighbors (weighted average) : 25.2 seconds

./runtest nearestNeighborTest 10000000 2
k-nearest neighbors (random 2d, k=1) :0.1: 4.86 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 7.68 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 13.1 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 10.8 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 21.7 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 20.8 seconds
k-nearest neighbors (weighted average) : 13.1 seconds

./runtest nearestNeighborTest 10000000 4
k-nearest neighbors (random 2d, k=1) :0.1: 2.64 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 4.07 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 7.07 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 5.73 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 11.5 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 10.9 seconds
k-nearest neighbors (weighted average) : 6.98 seconds

./runtest nearestNeighborTest 10000000 8
k-nearest neighbors (random 2d, k=1) :0.1: 1.41 seconds
k-nearest neighbors (random 3d, k=1) :0.1: 2.17 seconds
k-nearest neighbors (plummer 3d, k=1) :0.1: 3.78 seconds
k-nearest neighbors (random 2d, k=10) :0.1: 2.94 seconds
k-nearest neighbors (kuzmin 2d, k=10) :0.1: 6.22 seconds
k-nearest neighbors (random 3d, k=10) :0.1: 5.53 seconds
k-nearest neighbors (weighted average) : 3.67 seconds

./runtest spmvTest 1000000 1
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0689 seconds
sparse VM (rMat m = n*20)  :0.1: 0.115 seconds
sparse VM (weighted average) : 0.0921 seconds

./runtest spmvTest 1000000 2
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0349 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0576 seconds
sparse VM (weighted average) : 0.0462 seconds

./runtest spmvTest 1000000 4
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0209 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0326 seconds
sparse VM (weighted average) : 0.0267 seconds

./runtest spmvTest 1000000 8
sparse VM (rand dim d=2, m = n*20)  :0.1: 0.0115 seconds
sparse VM (rMat m = n*20)  :0.1: 0.0173 seconds
sparse VM (weighted average) : 0.0144 seconds

./runtest nbodyTest 1000000 1
Nbody (Random 3d points) :0.1: 248 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 248 seconds

./runtest nbodyTest 1000000 2
Nbody (Random 3d points) :0.1: 125 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 125 seconds

./runtest nbodyTest 1000000 4
Nbody (Random 3d points) :0.1: 69.5 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 69.5 seconds

./runtest nbodyTest 1000000 8
Nbody (Random 3d points) :0.1: 35 seconds
  Sampled RMS Error = 0.002
Nbody (weighted average) : 35 seconds

./runtest suffixArrayTest 10000000 1
Suffix Array (trigram string) :0.3: 4.17 seconds
Suffix Array (equal string) :0.1: 1.46 seconds
Suffix Array (repeated string) :0.1: 3.07 seconds
Suffix Array (weighted average) : 3.41 seconds

./runtest suffixArrayTest 10000000 2
Suffix Array (trigram string) :0.3: 2.18 seconds
Suffix Array (equal string) :0.1: 0.902 seconds
Suffix Array (repeated string) :0.1: 1.67 seconds
Suffix Array (weighted average) : 1.82 seconds

./runtest suffixArrayTest 10000000 4
Suffix Array (trigram string) :0.3: 1.28 seconds
Suffix Array (equal string) :0.1: 0.587 seconds
Suffix Array (repeated string) :0.1: 1.09 seconds
Suffix Array (weighted average) : 1.1 seconds

./runtest suffixArrayTest 10000000 8
Suffix Array (trigram string) :0.3: 0.778 seconds
Suffix Array (equal string) :0.1: 0.448 seconds
Suffix Array (repeated string) :0.1: 0.914 seconds
Suffix Array (weighted average) : 0.74 seconds

./runtest hullTest 10000000 1
Convex Hull (random on unit circle) :0.1: 6.57 seconds
Convex Hull (random in unit circle) :0.3: 0.565 seconds
Convex Hull (random projected Parabola) :0.3: 0.488 seconds
Convex Hull (weighted average) : 1.39 seconds

./runtest hullTest 10000000 2
Convex Hull (random on unit circle) :0.1: 3.36 seconds
Convex Hull (random in unit circle) :0.3: 0.299 seconds
Convex Hull (random projected Parabola) :0.3: 0.265 seconds
Convex Hull (weighted average) : 0.722 seconds

./runtest hullTest 10000000 4
Convex Hull (random on unit circle) :0.1: 1.85 seconds
Convex Hull (random in unit circle) :0.3: 0.18 seconds
Convex Hull (random projected Parabola) :0.3: 0.163 seconds
Convex Hull (weighted average) : 0.411 seconds

./runtest hullTest 10000000 8
Convex Hull (random on unit circle) :0.1: 0.97 seconds
Convex Hull (random in unit circle) :0.3: 0.103 seconds
Convex Hull (random projected Parabola) :0.3: 0.0926 seconds
Convex Hull (weighted average) : 0.222 seconds

./runtest mstTest 10000000 1
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 6.07 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 12.7 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 10.4 seconds
Minimum Spanning Tree (weighted average) : 9.73 seconds

./runtest mstTest 10000000 2
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 3.11 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 6.47 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 5.33 seconds
Minimum Spanning Tree (weighted average) : 4.97 seconds

./runtest mstTest 10000000 4
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 1.68 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 3.46 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 2.89 seconds
Minimum Spanning Tree (weighted average) : 2.68 seconds

./runtest mstTest 10000000 8
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 0.924 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 1.89 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 1.58 seconds
Minimum Spanning Tree (weighted average) : 1.47 seconds

./serialMstTest 10000000
Minimum Spanning Tree (2d grid, m = 2n) :0.1: 3.23 seconds
Minimum Spanning Tree (rMat m = 5n) :0.1: 7.36 seconds
Minimum Spanning Tree (random, m = 6n) :0.1: 6.98 seconds
Minimum Spanning Tree (weighted average) : 5.85 seconds
